[
{"score": "10", "title": "[2017-11-14] Challenge #340 [Intermediate] Walk in a Minefield", "content": ["You win the game when the order sequence allows the robot to get out of the minefield without touching any mine. Otherwise it returns the position of the mine that destroyed it.", "A mine field is a grid, consisting of ASCII characters like the following:", "The mines are represented by * and the robot by M.", "The orders understandable by the robot are as follows:", "If one tries to move it to a square occupied by a wall ", ", then the robot stays in place.", "If the robot is not started (", ") then the commands are inoperative.\nIt is possible to stop it or to start it as many times as desired (but once enough)", "When the robot has reached the exit, it is necessary to stop it to win the game.", "Write a program asking the user to enter a minefield and then asks to enter a sequence of commands to guide the robot through the field.", "It displays after won or lost depending on the input command string.", "The mine field in the form of a string of characters, newline separated. ", "Displays the mine field on the screen", "Commands like:", "Display the path the robot took and indicate if it was successful or not. Your program needs to evaluate if the route successfully avoided mines and both started and stopped at the right positions. ", "Change your program to randomly generate a minefield of user-specified dimensions and ask the user for the number of mines.\nIn the minefield, randomly generate the position of the mines. No more than one mine will be placed in areas of 3x3 cases. We will avoid placing mines in front of the entrance and exit. ", "Then ask the user for the robot commands. ", "This challenge was suggested by user ", ", many thanks! If you have a challenge idea, please share it at ", "  and there's a chance we'll use it. ", "Naturally. ", "How is the exit field defined? Can there be more than one exit?", "Also the start can be seen as an exit if you don't check that it is the start. maybe an E should be used for exits?", "Isn't the start designated by ", "?", "And the exit is a ", " which is on the border.", "The way I saw it was that ", " was the robot, so when it moved the start would then look like an exit.", "But I guess you would replace the place where the robot was with a different character everytime it moves anyways because ", "being one of the outputs. So we don't need to put an E at the exit.", "So you are right that the exit is just a ", " on a border if you replace the ", " start with something other than ", "However ", " questions still stand :)", "Edit: Replacing previous places the robot has already gone with something other than ", " will cause problems if the directions overlap, changed previous positions to start.", "I'm having trouble can someone please post a code, I'm having trouble.I'm trying to code in c++."]},
{"score": "67", "title": "[2017-09-22] Challenge #332 [Hard] Skyscrapers and CEO's peculiar requirements", "content": ["You have an NxN grid that you'll fill such that every row and column contains 1...N", "fx:", "There is however a catch, since we're working with a grid of Skyscrapers we cant just place them willy nilly.", "The Mayor sits in his office and demands that you can only see so many skyscrapers from different directions (only looking across columns and rows)", "To solve this issue we have to abuse that each skyscraper is only as high as its number, and can hide lower skyscrapers behind it.", "For example looking either from the left or right in this row:", "From the left can 2 skyscrapers be seen, 1, and 4.", "From the right can 3 skyscrapers be seen, 2, 3, and 4.", "First we will get an N telling us how big the grid is in NxN. (10 > N > 0)", "N will only be different from 4 in the bonus, so you can assume N is always 4 outside of the bonus", "Secondly we get all the view demands in a single array (N >= X_i >= 0)", "The array is always of length N * 4", "0's mean that there are no demands for the view of the given row/column", "0's means no constraint in number of buildings in view", "You must be able to see EXACTLY the amount that is told, no more, no less", "The array should be read as such:", "Going clockwise around the grid starting at the top-left", "Or as displayed with indexes", "Where each number is looking inwards at their respective column/row", "The output is the filled out city grid", "For the input above we get:", "Make it solve for an n by n game", "Some tiles may already be filled in", "After the array of ints there will be an NxN 2D array of ints with some prefilled tiles", "all 0 tiles are empty ones your solver need to fill out", "A better explanation than I ever could do and some helpful hints can be found here:\n", "If you have any challenges, please share it at ", "!", "And remember to upvote challenges you like :)", "Solution using ", ".", "Here is the example code for the challenge input:", "There is a cool blog post explaining a Sudoku solver [1]. I used part of this idea for checking the basic \"Sudoku\" property in a neat way. The bonus should work by just using solve-skyscraper directly, with the given grid and constraints, where 0 is substituted with underscore. It will probably ", " terminate, though, for larger inputs.", "[1] ", " The code's somewhat messy and I'm sure there are better ways of implementing my solution but it seems to work for the challenge cases.", " using the constraint programming library ", ". ", "Works for both bonuses. Bonus 1 takes a few seconds and bonus 2 takes about 10 minutes.", "The program just builds the model and passes it to the constraint programming library to find a solution.", "There are 5 variables per tile on the board. One variable for the height and one variable which indicates whether the tile is visible from each direction.", "If the value of the tile is specified in the input, a constraint will be placed on the height variable for that tile forcing it to be to given value. The constraint on each 'visible from direction' variable is, if the tile is higher than every tile between it and the side being considered, it has a value of 1, otherwise it is zero. A tile on the edge of the grid always has a value of 1 for the 'visible from direction' variable for the side it is on.", "A cardinality constraint is used to specify how many tiles should be visible from each side for each column/row. The constraint specifies how many 'visible from direction' variables in the row/column can have a value of 1 for the direction being considered. Also, there is a 'distinct' constraint on each row and column.", "Here is a solver which employs no backtracking. It also tells you which rules it is using to eliminate possibilities much like a human solver would do:", "Below is the output for both challenges. Circled numbers are the ones that were eliminated using the specified rule. The rules are:", "The ", ", ", " and ", " rules are ones ones that humans can readily apply. The ", " rules are more advanced, but become easier to apply if a lot of digits have already been eliminated by the other rules.", "Update:", "Output for Bonus 1:", "Output for Bonus 2:", "Challenge 1:", "Challenge 2:", "Any particular reason you misspelled skyscraper(s) the same way almost every time?", "Yes, I i cannot into spelling will fix when I'm by a pc", "Ah of course", "should be fixed now :P I apparently made it a mix of skyskraber (danish) and skyscraper (english)", "the constraints are a maximum, IIRC?  or an exact view count, where 0 means no constraint?", "I believe you need to to find values for all the 0 slots and the other values must remain.", "if you have a constraint that the first row from the left is 2, are you allowed to see 1 or 2 buildings?  Or must it be exactly 2?", "You must see exactly 2 buildings then < added to description", "and yes 0 means no constraint, any number of buildings in view is allowed", "Naive solution checking all the possible cases and testing them. Code in c#"]},
{"score": "46", "title": "[2017-09-08] Challenge #330 [Hard] Mini-Chess Positions", "content": [".", "For the purposes of this challenge, use the 'Silverman 4x4' layout provided in the link above. This means 1 row of pawns per color, 2 rooks per color, 1 queen per color, and 1 king per color.", "There will only be input for the bonus challenge, where you can choose the dimensions of the board.", "Print the number of ways of placing chess pieces on a 4x4 board such that:", "Extend your solution to accommodate different boards. Can your program handle 3x4, 4x3 or 4x4 boards? See the wikipedia article below for layouts.", "There is a ", " on minichess variants.", "Thanks to ", " for the idea for this challenge.", "Please feel free to provide feedback. I'm a decent chess player myself, however I have never played mini-chess and am not 100% versed in its rules and variations. ", "Grammar and links. I have limited the parameters of this challenge from the original posting, because as ", " rightly pointed out, the original problem is being pursued by professionals and may have over a quadrillion possible solutions.", "After some initial research I've found that this is a challenge that people who write proper chess solvers are working on. One site I saw that has examined 4x4 chess put the figure at 3.6 quadrillion legal positions ignoring symmetrical solutions (this took weeks to calculate), and this was assuming that a maximum of 9 pieces were on the board - using the Silverman layout would lead to even more combinations.", "If your solution takes even one millisecond to verify the validity of a particular position, it will take several hundred thousand years to complete, and it seems that brute forcing is the only way to complete the challenge.", "Good guy ", " \nSolves it by declaring it unsolvable.", "Thank you for pointing this out. I will simplify the scope of the challenge shortly. ", "Thanks. I appreciate all the work you guys do on this sub btw, hopefully I didn't come across as a dick because I know how much time it takes to come up with challenges and I feel like people do take it for granted sometimes.", "Nah man, you're good. I thought this looked like an interesting challenge, and I did not realize the scope of the original proposal. I appreciate the feedback, and hopefully it makes the challenge seem more attainable. ", "What's the site?", "The \"positions with 9 pieces have been solved\" refers to those boards whose positions have been analyzed and whose outcome (white wins, black wins, draw) has been determined.", "This puzzle is just asking to count the number of ways of placing chess pieces on a 4x4 board subject to certain restrictions.", "Few comments. First of all I think this is a really interesting topic. I think this problem is not specified clearly enough:", "About using 3x3 chess as reference. It's generally a good idea. Unfortunately the number on my ", " (304,545,552) is not suitable for comparison - it's simply a number of positions stored in my database during solving - it's related to the actual number of positions, but it's not a well defined metric. Much later I computed the number of unique legal positions in 3x3 chess as ", ". This is a better reference, but it considers all symmetries (counts only one positions for all sets of symmetrical positions), so it's not what this problem description asks for.", "The number on my ", " - 3,677,542,994,054,890 - includes positions with up to 16 pieces (even though only those with up to 9 pieces are solved). It also takes into acccount all symmetries (", ").", "More details about the metric that I use for counting positions: ", ".", "Good luck everyone!", "Here is how I interpreted the original problem from the Wikipedia page:", "The total number of boards is obviously bounded above by 11", ". For N = 3 I'm pretty sure a brute force solution is possible, but there are a lot of ways to reduce the complexity of the problem.", "How do you get the 11? Aren't there 4 different pieces for each side and the possibility of an empty square, giving 9 possible ways of filling a square? I am just trying to understand...", "Most of the squares (N", " -2) have 11 possibilities: either empty or a white piece (P,R,N,B,Q) or a black piece. The remaining two squares are the kings for which the factor of 11 easily overcounts the possibilities.", "I'm not sure why the Silverman position was mentioned in the problem at all. The calculation that Kyrukov performed assumed that any square can contain any piece (or be empty) subject to the mutual check condition.", "Under these assumptions:", "Here is a python program to print the number of legal boards:", "Here are my results for a 3x3 board:", "If pawns are allowed on the last rank:     393392832", "If pawns are not allowed on the last rank: 250376348", "To help debug discrepancies, here are some additional results I computed if only a subset of the pieces are used (also on a 3x3 board):", "If there seems to be agreement on these numbers I'll post my results for a 4x4 board.", "Here are my answers for various size boards.", "Pawns are not allowed on their last rank. \"both safe\" is the number of positions where both kings are not attacked. \"black safe\" is the number where the black king is not attacked (but the white king may be). \"total\" is the number of ways where not both kings are attacked.", "Python code:", "Urrm, why?", "The objective of this program is to determine the initial layouts, not all possible moves.", "Oh, I think I may have gone above and beyond with my program then, I was thinking this is far too complex for a daily problem", "Edit: so do all pieces have to be within their first two rows?", "I would imagine yes, but refer to the Wikipedia page for more details. ", "Another question then, if doing a 3x4 board you of course can't include all of the pieces in the first two rows. Are pieces apart from the two kings optional?", "You should really clarify this on the main post, also you should clarify which pieces must be included, and how many of what ect. I've half completed the challenge but now it feels like it's changed half way through. I might just finish it to calculate any possible state a board could be in and count how many possibilities there are", "I apologize, it was changed heavily from the original post b/c otherwise it was going to be way to big for the level of this subreddit.", "Well - that rule probably came from the 3x3 version which is something I added using the rationale that pawns on the last rank would be promoted and also to make it different from Kryukov's calculation.", "Ah I see, this question feels messy, I think I'll just finish building my first interpretation of the question when I'm back at work on Monday", "Assuming I understood the problem correctly, can a pawn be placed at the opposite end ? If so, does it get promoted ?", "In Kryukov's calculation, pawns are allowed on the last rank.", "In the version I proposed in dailyprogrammer_ideas I disallowed that under the assumption that pawns would get promoted (and also to make it different from Kryukov's problem.)", "I have no clue what version of this problem we are supposed to solve now. Are both colors restricted to their first two rows? Is there a fixed number of pieces? Is there maximum numbers of certain pieces? Where can the pawns stand?", "To give my personal opinion...", "I would first solve the 3x3 case using what I believe to be Kryukov's rules and then you can check your answer against what the Wikipedia page says. Kryukov's rules appear to be:", "Write your solution keeping in mind my variation which disallows pawns on the last rank so you can compute that.", "The 3x3 problem admits a brute force solution. Larger board sizes likely require some clever ideas.", "It would interesting to compare answers and approaches.", "OK, thank you! Now, I can really start. :-)", "Update on Kryukov's numbers...", "Kryukov also takes into account whose move it is in determining if a position is legal or not. For instance, this position is legal because it is black's turn to move:", "..", "But the same position with white to move is not legal:", "..", "because white could capture black's king.", "This puzzle doesn't have that variable, so you won't get Kryukov's numbers for a 3x3 board.", "Somehow, I get different a number for 4x4 than ", "\nBut it runs in a few milliseconds. :-) Maybe there is still a mistake. I will clean it up and investigate tomorrow.", "Mine takes ages to even calculate a 3x3 board, I think you might have missed something", "I am certain that I still have bugs in there. So far I haven't had time, but I still plan to fix that. For the run time, I think it shouldn't change.", "How do you calculate the number of positions?", "First I calculate the piece count permutations, so 1 kingB, 1 kingW. Then add a pawn, then add two pawns, then the other colour, ect. An array of all different possible piece combinations. Then loop through each of those and place them on the board, then get every possible position of every possible combaintion of pieces. Check through a series of conditions whether that board is valid or not, if it is ++ to total", "Have a look, ", ", it's in js and uses node to readline for the x and y inputs. Mine doesn't just calculate starting positions though, it does what the original task before it was edited was supposed to do, it finds any possible legal set up of pieces. Although it does make the assumption that pawns cant be on the first or last line", "Edit: disclaimer, it could be a lot more efficient", "I've found that of your main bottlenecks is your ", " routine which takes on the order of a second per flat board configuration. So to examine all 8000 configurations (", ") will take around 90 mins.", "Another problem is this approach examines a lot of redundant positions. For instance, you first examine the positions with only 2 kings, and of those 72 positions only 32 are legal. Then when you look at the positions with two kings and a knight, you end up generating positions where the two kings are adjacent, so you look at 504 (= 9", "7) positions and discard 280 of them. However, if you could start from a legal 2 King position and just add a knight you would only examine 32*7 = 224 positions.", "Thanks, how could I improve my perms() function do you think? And that's a really good point with basing it off of the previous piece sets, I might go and think about how I would apply that", "Basic outline of an idea...", "First pick the positions of the two kings. Then for each square, try placing a piece there (or leave it empty). If it's legal, proceed to the next square. When you've made choices for all of the squares, increment the total count and backtrack.", "You're right that changing a square from empty to occupied can change whether the board is legal or not. However, in the 3x3 case you can visit the squares in a particular order which allows you to skirt around this issue.", "Also, note that the number of solutions for a 4x3 board is around 154 billion, so any approach which finds solutions one at a time is going to take forever.", "Ah well, it was a proof of concept more than anything, interesting though, it can manage a 3x3 board but yeah any bigger is a no no", "Actually just noticed a flaw in basing it off of legal positions, if for example there's a rook threatening a king which is illegal (assuming other king under threat too), adding a piece between the two would make it legal again", "Ok. I think the difference is that my program doesn't look at single positions but computes several at once. E.g. if you know that the king is at A1 and A2 is non-empty, then it doesn't matter what's the piece on A3. So you can simply increase the total by the all pieces that could be on A3 (= 11). Of course there are some squares that have this property, so you can increase the total by ", " combinations for those positions (which is the product of all single possibilities).", "But I still have bugs that I know and bugs that I don't know and still haven't had the time to fix them...", "Performs a plain search and backtracks when both kings are in check.", "Source code is available ", ", the readme file gives more details on the search criteria and how to run the program, there is flexibility for the board size, the type of pieces included and the maximum number of pieces put on the board.", "The search completes in 70 seconds for a 3x3 chessboard on my computer (Windows 7 - Intel i3 3.5 GHz) , and I get same results as ", " (393392832 valid positions).", "Currently running on a 4x3 chessboard at a rate of about 1 billion positions found per minute, so not expecting it to complete in less than 10 hours.", "Here are my numbers if pawns are allowed on all ranks:", "Thanks for the numbers!", "After quite a bit of running time, I got same result for 4x3", "If I have some time will try to optimize my program for other board sizes.", "Some progress here !", "I ported my initial solver to Ruby to benefit from the built-in big number management, and improved the algorithm to reduce the branching factor of the backtracking.", "There is now a maximum of 4 choices for each square:", "The number of choices can be further reduced in some cases, for example when one king is already in check, the pieces that can put this king in check can be merged with the \"other\" pieces.", "Here is the ", ".", "Now the search can be done in a reasonable time (less than 1h30) for a 5x5 chessboard.", "Here are my results:", " Improved running time after implementing symmetry management."]},
{"score": "78", "title": "[2017-09-15] Challenge #331 [Hard] Interactive Interpreter", "content": ["Variable names must start with a character a-z and can be continued by any alphanumeric character.", "All variables will be numerical (can be either floats or integers), feel free to support arbitrarily large numbers.", "The mathematical evaluator shall be capable of adding, subtracting, multiplying, dividing, exponents and handling nested parenthesis.", "exponents will be using ^ as symbol.", "The usual order of mathematics apply, so PEMDAS shall be applied in evaluations.", " refrain from using your languages built in evaluators.", "A list of strings such as (divided by \\n):", "Assume all inputs to be written properly, i.e. no undefined variables or wrong placed parenthesis", "Assume all whitespace as negligible so \"1 2\" and \"12\" can be assumed the same", "Output for each input line, fx from above would be:", "Variables are nice, but it's all quite limited until we got functions", "functions doesnt eval on declaration, so just make a newline as output from a funtion declaration", "functions and variables can exist with the same name.", "functions either look like 'func()' or 'func(arg1, arg2, arg3)' with any number of arguments needed", "arguments given for functions are only used within the function themself and overwrites any variable with the given name.", "if the function requires no arguments", "Handle errors 'gracefully'", "Errors include but are likely not limited to:", "Return error description as output if an error occurred", "If you have any challenges, please share it at ", "!", "This is really funny that this was this weeks challenge because I actually did this after the ", " challenge earlier this week. I just had to add parentheses and variable capabilities. No bonuses (yet) but I'll try to add them.", "EDIT: Added much improved version that made it more theoretical sound (like replacing the 'searching' for equivalences with actually parsing/tokenizing everything) and include function capabilities. It needs a couple of tweaks but I'm pretty satisfied with it.", "In C++ the header files of C are starting with a c and don't have the .h extension.\nSo <math.h> should be <cmath> etc.", "Nah they both work for C++. One defines symbols within the global namespace the other within the standard namespace. ", "The big differences raised by using one over the other is compatibility and whether you want to dump a lot of stuff into your global namespace.  ", " using the ", ". It\nhandles errors and rejects most invalid input, though it doesn't explain\nthe reason. Divide by zero is not an error, per IEEE 754.", "In computer science, the shunting-yard algorithm is a method for parsing mathematical expressions specified in infix notation. It can produce either a postfix notation string, also known as Reverse Polish notation (RPN), or an abstract syntax tree (AST). The algorithm was invented by Edsger Dijkstra and named the \"shunting yard\" algorithm because its operation resembles that of a railroad shunting yard. Dijkstra first described the Shunting Yard Algorithm in the Mathematisch Centrum report MR 34/61.", " ", " ", " ", " ", " ", " ", " ", " ", " ", "   ", "\n", " ", " ", " ", " ", "Good bot thank you", "Thank you floAr for voting on WikiTextBot.  ", "This bot wants to find the best and worst bots on Reddit. ", ".  ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I've not seen this syntax in C.  Would you mind explaining it?  All of my C programming has been done with a version of C prior to C99.", "You guessed correctly that this is a C99 feature. When initializing an\narray you can choose specific indexes to initialize using that bracket\nnotation. For example, take this classically-initialized array:", "The indexes can be made explicit:", "Or even reordered:", "These are all equivalent. Any indexes skipped are zero-initialized. The\nvalue inside the expression can be any constant expression, not just\ninteger literals. That includes character literals, like in my code. I'm\nusing the array sort of like a cheap hash table.", "Before C99 the equivalent table would have a much larger initialization.", "My favorite use of this feature is to supply string names to\nenumerations. For example, I could supply names to my tokens types for\nthe sake of debugging (printing enum values):", "Oh, yeah, this is a really nice feature.  Thanks for the explanation.", "I ended up (ab)using the regex... ", "Implemented Bonus 1 i.e. functions.", "It's a context-free grammar, how does regex work for this? ", "The grammar is relatively simple with three kinds of rules: variable assignment, function assignment and statement. Some ifs, some regex matching and voila, it works! ", "I admit that I should have made the code simpler and included some comments. Right now, with all the regex and the functional syntax, the code looks absolutely complicated when, in fact, it is not.", "A ", " that uses ", ".", ":", " (I didnt include here to not make this post too long)", "My Goal for this implementation is to try and keep it minimalistic and simple, i decided to opt for a single class design instead of a multi class oop huge implementation, the only downside of this is that i can not provide very detailed error information if the input expression is malformed or wrong in some way.", "Please ", " i have dyslexia so spelling is bad sorry.", "The implementation was done in ", "you really need to trim down on uncessesary commenting, sometimes the code can speak for itself :P", "Also I'm curious why you write your comments as if it was XML, is it a C# thing?", "its an official C# thing it allows the ide to integrate with the documentation, but the comments xml is auto generated so its easy to write you just fill in the values", "also good comments are help full some times", "Comments are only necessary where the code doesn't speak for itself. Generally it's best to aim for code that needs no explanation, but that's extremely difficult. ", "Variable names, loops where it makes sense, etc shouldn't need comments. Methods are good to comment to provide good idea of what goes in/out. Complex algorithms need comments to explain flow of logic. Anything else rarely gets comments.", "Yea all the xml comments are there so that if some one alse want to use the code there ide, will tell them what each method does, making it easy to use the code with out any documentation, when i say use im mean copy an paste the code in and use it and not ther internal code.", ", without bonuses.", "your variable to value conversion for new lines seem a bit risky", "what if you had the variable 'a' and the variable 'ab' ?", "fx:", "btw hashmaps can do", "no need for entrysets", "Thank you! I've now changed the relevant portion:", "I think there might be an error in there. Try", "The result should be 20, but it'll print 1010, no?", "Or", "I think your code will first take \"-2+2\", and replace that string with 0, resulting in '20'.", "Fucking minus sign is giving me headaches.", "Thanks! I've added a fix:", "Nice challenge. Solution in ", " Scheme, which - using its integrated LALR parser - is close to cheating (EDIT: sorry - read the advise to not use built-in evaluators just now, it might very well apply here). Supporting the bonus in return:", "Output:", "Also note that Bigloo generates a nice standalone executable and usually has good performance characteristics.", "(java)I was too lazy to do decent error checking, I did do the bonus exercise. Maybe as  next exercise we can add conditional statements, labels and gotos? Maybe I'll implement a better version later with shunting yard.", "EDIT: ", " conditonal operations so fac(x)=?(x)(x", "fac(x-1))(1), scientific notation values aren't interpreted correctly\nEDIT2: ", ", don't use capital E for functions/variables", "Concise solution in ", ". I don't have much Prolog experience, but this just looked to fun of a problem to ", " use it.", "EDIT: Now includes the first bonus and the second one partially (only evaluation errors).", "To run on the challenge input (non interactive):", " First Time Writing a Lexer/Parser by hand.\nit looks like shit, but it mostly works.  ", "Ruby. Builds an AST then evaluates it.", "This took me a pretty long time.  I haven't learned enough about Haskell to make things easy. So instead of being interactive, it takes a script and prints the final value.  I also didn't implement parentheses or order of operation.  I chose to use the J order of operation -- right to left.", "Here's my solution in ", ".  It uses the Shunting-yard algorithm likes others in the thread do.  It does rudimentary error checking catching things like:", "Python 3 no bonus", "just getting back into programming so any critiques/suggestions are welcomed", "This is my Java solution. Its probably wildly inefficient but nonetheless lmk what you think.", "It's been a while since a programmed anything, comments and tips are welcome.", "I programmed this in C, features include:\n- lots of memory hogging due to static allocation of space for variable names (lol)\n- hopefully easily readable code (let me know if i succeeded!?)\n- shunting yard expression parsing\n- custom hash table\n- minimal error checking"]},
{"score": "73", "title": "[2017-09-27] Challenge #333 [Intermediate] Beer Street and Gin Lane", "content": [". ", "This particular challenge differs from many we do because I anticipate you'll use languages and tools such as SQL, LINQ, and similar, although if you feel like using a more conventional programming language please do. My objective with this particular challenge is to explore a data science type of a challenge, inspired by some comments earlier this year seeking more practical challenges. ", "The title of this challenge refers to ", ".", " After reading ", " that does a great job explaining the data set (I had misinterpreted it when I wrote this up), i edited the questions. Also I don't think Iowa tracks beer sales in this category. ", "Challenges for you to consider include runtime analysis and performance. ", "Feel free to highlight any insights you find and how you found them - that's in scope for this challenge.", "You can get ", " on the Iowa data website. Export it to get it into a format (e.g. CSV) suitable for coding - don't bother trying to scrape it!", "Some links that may be useful", "Here's my best shot using ", "No doubt slow to compute, but not absurdly slow.", "General setup:", "Code: ", "Result (I did this by number of bottles sold):", "Code: ", "Result:", "Code: ", "Result:", "Code: ", "Result:", "I just completed my solution using MongoDB - and it was really nice to have your solution as a reference: Good job!", "However I got vodka sales for Mondays and Tuesdays too... A lot of it actually. I don't know why you didn't. Posted my solution so you can compare. ", "Good catch!", "The problem in my code was in the ", " command. In R, if there are any NA values in the array passed to ", ", then the result will be NA unless you specifically tell it to ignore NA values. I neglected to do that.", "The reason there were NA's was that there were blank values in the ", " column (there were three such values for Monday, Invoice numbers S03816000008, S03816800149, and S03814000102. I assume it was the same problem for Tuesday). ", "I've updated my answer to reflect the change (I just added the ", " argument to the ", " function).", "Good work! Now it matches my result. Mongo is  kinder in this sense. However it was really picky with subtract and multiply (there is one post that has no values for question two - and I had to filter those out to get a result.) So similar problem, different question.", "Also we both forgot the Beer Street and Gin Lane question :D", "Eh, I didn't forget,  just didn't totally understand it and didn't know if it was possible since the data set is basically just liquor :)", "I agree - there ain't much beer being sold as liquor (40 liters in total). But I gave it a shot now. Edited my solution.", "Sorry to say your rootbeer answer is wrong ;) And so was mine.\nWe only searched for \"rootbeer\" not \"root beer\". \nzero judge's TSQL solution got me thinking.", "Huh I could have sworn I checked to make sure they were all rootbeer. Oh well", "Just a programming exercise. I thought the interesting part was to compare time taken for the db/language and how easy the syntax is in different languages. I must say both speed and syntax seems nice in R. MongoDB is a bit unintuitive with its contrived JSON syntax for everything (and I love JSON for data... but for querying... sometimes... it's just to easy to forget a closing bracket when all you want to focus on is problem solving).", "The readability (but also the speed) of my solution would have been very different a few years ago.  There has been a sort of revolution in the past couple years due to a guy named Hadley Wickham releasing a series of r packages, such as dplyr. They emphasize a common syntax and rationale for data preparation. ", "I learned r prior to this revolution,  and I still could have answered these questions,  but the syntax would have been uglier and less intuitive. I was happy to see this challenge pop up so that I could practice my dplyr skills :)", "Cool. Found Wickham's homepage: ", "so downloading it thru the link on the site is working (but slow). ", "I also tried", "wget ", "and was told", "--2017-09-27 10:33:13--  ", "\nResolving data.iowa.gov (data.iowa.gov)... 52.206.140.205\nConnecting to data.iowa.gov (data.iowa.gov)|52.206.140.205|:443... failed: Network is unreachable.", "am i doing something wrong trying to get the file that way?", "They're serving it raw and uncompressed, not even with HTTP gzip encoding, which is pretty silly. The 3.2GB compresses to 700MB with gzip, or just 117MB with xz.", "I was very surprised to see the file coming in as a straight CSV, with no compression whatsoever. <insert government work joke here>.", "working for me:", "I need the ?accessType=DOWNLOAD on there.. thanks!", "Acutally I lied. it still isnt working. oh well. normal download worked..", "Gah. figured out my problem. thanks", "How large is the file ? My download reached 27 MB and has yet to stop.", "It's around 3.2 GB", "Looks like I'll have to sit this one out then, my monthly data plan only offers 5 GB.", "Oof, yeah, barring a coffee shop with free wifi and very lenient loitering standards, I'd say it's not worth it ;)", "Thought I'd try getting all the answers I could strictly from the API itself using jQuery AJAX calls. Iowa's API allows for SoQL operations which is very similar to SQL. I was only able to get the first 3 answers via this method.", "Answer:", "Answer:", "Answer:", "This data is a record of retailer purchases from vendors,  not a record of consumer purchases from retailers.", "You can easily find Retailer purchase information (such as which day retailers most often order vodka, but not which day consumers most often buy vodka.)  Each retailer tend to place orders on the same day each week.", "State bottle cost is the cost the Iowa Alcohol Beverage Division buys a particular product for.", "State retail is what the Retailers are buying the bottle for.  There is no record as to what the retailer sells the bottle for.  It is impossible to tell how much of a profit the store is making.  They are buying at state retail, not state bottle cost.  I suppose it is likely they will sell at the same markup the state sold to them.", "Bottles sold is not the number of bottles the retailer sold, but the number of bottles the state sold to the retailers.", "It would make an interesting exercise to see how much the state is profiting from the sale of Alcohol in both markup to the retailers plus the addition of state taxes (if applicable) based upon category (beer, wine, whisky, vodka, etc).  I will certainly be mining that one myself.", "thanks. based on your comment, i reviewed the data and challenge and made some edits. i also further explained the scope and intention:", "You are welcome.  Wanted to be sure we were all on the same page.  I like this challenge.  While most challenges are interesting and useful in some fashion (algorithm and math wise), this challenge presents real world data which once sliced and diced will be interesting beyond knowing you got the right answer.", "Haskell:", "The large dataset makes a big part of the challenge analyzing the runtime and performance.  Therefore, I wanted to try using one of Haskell's streaming libraries.  I choose to use the Pipes library to guarantee constant memory usage without relying on the GHC's strictness analyzer or lazy IO.  The program uses about 5mb of memory!  The Pipes ecosystem also interfaces nicely with the Cassava library for csv parsing.  I also chose to use the Foldl library because it provides a composable way to prevent space leaks and for it's compatibility with the Pipes library (it's written by the same author).  ", "I was able to use GHC generics and the latest Cassava library automatically generate the csv parser for my types!  This version of the library isn't available or even compatible with stack yet, so I had to use the following stack.yml to get it to work:", "I decided to use full types for csv parsing instead of receiving a HashMap to try out the new GHC Generic feature.   The downside is the Invoice type declaration is rather lengthy and with the number of imports is about 100 lines.  Which is why the code below only shows the relevant parts of the question.  You can see the full solution ", "I'm late to the party. I imported the data then ran some really simple TSQL against it. I could have and should have been more elegant and tie it altogether in one, but I'm tired ;). I didn't to #4 but I will (see comments in code). Maybe I'll do some LINQ in C#.", "Good job! How fast was TSQL to answer?", "Although I don't get the same results for root beer schnapps... Edited: Now I do. Thanks I was searching only for \"rootbeer\" not \"root beer\" before. Thanks!", "Fun challenge. I wanted to learn a thing or two about MongoDB (v 3.4), its aggregation pipeline and how to import a large CSV file to it. After a few false starts I learned that basic modification (removing $ in number fields, improving field names etc.) was much faster to do before import, using ", ".", "I had great help comparing my approach to aggregation and my results with goodygood23's solution for R.\nIn all cases except question 3 me and goodygood23 got identical results. In question three I have results for Mondays and Tuesday. While goodygood23 got no results for these days. I don't know why.", "Speed? Mongo churned through the large data set without to much hassle, but was around 2-3 times as slow than goodygood23's result for question 1 and 2, almost on par for question 3 and question 5.", "I tried some to set some indexes in MongoDB, but it didn't really help much. So I ran the questions without them.", "Since goodygood23 and I used very steps when we aggregated data my conclusion is that MongoDB is just a bit slower than R. (I ran my MongoDB instance on a two year old MacBook i7 and gave it plenty of memory.)", "Match the year 2016 and any non-beer category, group by item description, sum liters and bottles, sort descending by liters, limit to the first result.", "Make sure we have state bottle retail prices and costs as numbers (they are empty text for one post), group by store name and sum profits, sort descending by profit, limit to the first result.", "Match the word vodka in category names, extract the a week day number from the date, group by week day number and sum the sales, sort descending by sales, map week day numbers to week day names.", "Two subquestion, same modus operandi: Filter out categories that equals beer (first subquestion) or gin (second subquestion). Then remove the street number from the address, leaving the street. Group by street, sum liters sold, sort descending by liters sold. Limit to a top 5 list.", "There really isn't much beer sold in these stores (counted as liquor). But here goes:", "A lot of gin are sold on these streets:", "Match the words rootbeer schnapps in the item description, group by store name, add the city and sum the number of liters sold, sort descending by liters sold, limit to a top 10 list.", "Edited my solution for a faulty \"under matching\" of root beer schnapps.", "What is the size of the exported csv? I'm at 1.8 GB so far. Just wondering how much longer I'll be waiting.", "I'm at 3,0 GB at this time but it seems to have slown down.", "Edit just finished at around 3.2GB.", "Mine finished at 3.36 GB. I'll assume it completed successfully. If anyone gets a larger file, let me know.", "Edit: file looks to contain 12217598 rows and 24 columns", "I think I'm missing something. For the first question, I'm only seeing one category that strikes me as beer: ", "And restricting by that category leaves just 32 rows. ", "And all other references to beer in the data appear to be things like root beer, ginger beer, and other non-beer things. ", "I must be missing something? Did I grab the wrong data?", "EDIT:", "To answer the first question using ", ":", "This gives the following result:", "I guess I could get really clever with a regex, but I don't feel like it. So I'm going to say my answer is", "I might come back and look at some different questions later. ", "(BTW, after the initial 90 second reading in time, the rest of the code ran very quickly)", "I have the same problem. I don't think this data covers regular beer sales.", "it doesn't - my bad. see edits. ", "The retailers in IA get their Beer straight from the Beer distributors.  Liquor however must be purchased from the state.  That is why only spiked root beer shows up on the list", "Am I just completely stupid, or is the csv missing a comma ever 2nd and third lines of data? Which makes it hard to read to data without more work.", "Newlines in the address field I think. You'll want a proper CSV parser that understands quoted fields. ", "Yeah you're right. Is this standard or would you agree that it's stupid?", "Yeah the stupid Store Location. lol. I made a parser. Stupid double quotes lol", "Mainly this challenge has shown me that the Iowa ABC has data issues.", "Answered a couple of these with ", ", a helpful command line tool.", "What's the most popular non-beer beverage bought in 2016?", "What day of the week sees the most vodka sales?"]},
{"score": "67", "title": "[2017-10-06] Challenge #334 [Hard] Dinosaurs", "content": ["The exit of the lab is located at its northeast corner. Jeff knows that if any of the\ndinosaurs wakes up, he does not stand a chance. Thus, he wants to follow a path that maximizes the minimum distance from him to the dinosaurs along the path. The length of the path is of no interest to him.", "In this problem we assume that Jeff and the dinosaurs are points on the plane and that Jeff\u2019s path is a continuous curve connecting the southwest and northeast corners of the lab. As we mentioned, Jeff wants to maximize the minimum distance between this curve and the position of any dinosaur. You can find an example solution for the third test case\nin the sample input ", ".", "The input contains several test cases, each consisting of several lines. The first line of\neach test case contains three integers ", ", ", ", and ", " separated by single spaces. The value ", " is the number of dinosaurs in the lab. The values ", " (width)\nand ", " (height) are the size of the lab. Jeff starts at ", ", while the exit of the\nlab is located at ", ".", "Each of the next ", " lines contains two integers ", " and ", " separated by a single space, representing the coordinates of a dinosaur (", "). Note that no dinosaur is located on the border of the lab.", "For each test case print a single line with the maximum possible distance to the\nclosest dinosaur rounded to three decimal digits.", "Good challenge!", "I don't think I'll have time this weekend to attempt a solution, so I wanted to share my idea for getting what I think would roughly be an O(n log n) solution.  Potential Spoiler Below!", "You can use Fortune's algorithm to generate a graph to run Dijkstra's algorithm against where the weight of an edge is either 0 if the edge doesn't bring you closer than any previously visited edge or you need to adjust the new closest encounter.", "EDIT: Explanation with pictures: ", " / ", "EDIT2: Added explanation of why Voronoi diagram is optimal for a special case.  ", "What's an edge in this graph - or is that giving too much away?", "I've edited my comment with an explanation with pictures.  Let me know if this helps!", "I just wanted to say that O(n log n) should be possible using", "I just found out this is very related to Fortune's algorithm. I haven't completely understood how you want to use Dijkstra's algorithm, but after having the", "there seem to be many ways, since the number of edges is in O(|dinosaurs|). So you could just do sort those by length and use a binary search.", "I don't think a binary search would be as helpful because you would still need to find a path of connected segments from start to finish through the graph to answer the question.  I can imagine using it by pruning the worst segment until the endpoint wasn't reachable, but I think that take longer than running Dijkstra's after you consider the time to sort and recomputing reachability for each pruning.  Maybe you can explain.   ", "Yes, connectivity has to be checked for each binary search step. But since the graph contains O(n) edges, the run time cost for that is also just O(n).", "I like this strategy for doing it!  It seems a lazy solution could be efficient.", "The more I think about it, I'm not sure E is in O(|n|).  I could come up with a layout where adding 1 new node creates n-1 new edges in the graph.  We may want to think about the time cost some more", "I don't know about the Voronoi diagram, but let me convince you the Delaunay triangulation (DT) is ", " way to go: It has less edges and in fact it has at most 2n edges. That's why assumed the Voronoi diagram also had O(n) edges. Instead of computing the way you go, you compute the path with the min-max edges from one wall to the other over the dinosaurs...", "I think there are better ways than binary search, Prim's algorithm being one. This is how it could be done:\n1. Compute the DT of the dinosaurs.\n2. Add all dinosaur-wall connections.\n3. Use Prim's algorithm to reduce it to one possible path between all vertex pairs.\n4. Compute the min cut between the walls (easy since there is only one path).", "Python has scipy.spatial.Delaunay which I assume runs in O(n log n), but I haven't programmed in Python in a long time. I am kind of indecisive whether to program the DT myself...", "Yeah, I think this would have a better time practically, but I think most of the solutions have the similar asymptotics.", "Now we just need someone to implement it haha", "Lol, yeah. But I just overcame my laziness and started in Python. Here, I share my initial draft, maybe this could be a group effort. :-) It reads in the problem and computes the Delaunay triangulation, then creates list of edges and distances (maybe should use different data structures). Now, your version Dijkstra is missing to compute the min path from left to right. Maybe I will continue in a few hours. It's not necessarily faster on the problems than OP's algorithm, because they are all very small (n roughly 100), but I tested the Delaunay triangulation and that scales really well with n (n=10000 -> around 0.3s).", "I'll share my idea as well for the same reason. Minimum spanning tree.", "The north and west walls represents one node, and the south and east walls is another. Every shark is also a node. Jeff will have to cross exactly one of the edges in the MST, and he should chose the one with largest shark distance. The shark distance is the cost in the MST.", "The answer is the edge in the tree with highest cost.", "Edit: dinosaurs, not sharks.", "Edit2: Almost. The answer is an edge in the MST, but not necessarily the one with total highest cost.", "If a shark was put into a large swimming pool, it would be able to smell a single drop of blood in the water.", "A MST will reach each node, but not every node may be part of the solution, so it's hard to see how to use the MST alone for the answer.", "Let's say you have a connection from one side to the other for which the longest edge is still smaller then the longest edge in the path of the MST. Adding it to the MST would create a cycle in the graph and you could remove the previously longest edge of the path, resulting in a shorter MST. That's contradicting our assumption of a MST.", "Yes, I see.  And the variation on my shortest path algorithm I described is effectively Prim's algorithm.   ", "It seems there are a bunch of ways to solve it once you have the voronoi diagram.  It's probably not worth looking into more efficient ways to do this part of the algorithm since getting the diagram takes O(n log n)", "Yes, a minimum spanning tree would suffice. I think this is the easiest and fastest solution.", "However, you might have to compute it for the dinosaurs first and then add all the wall-dinosaur connections because computing the minimum spanning tree is only efficient for euclidean distances. The walls cannot be treated as simple points then. Still O(n log(n)) though.", "Edit: All of these ideas have one thing in common: It seems that we all have to compute the Delaunay triangulation/Voronoi diagram, also to compute the MST. This ", " compares different approaches for that. It seems the Algorithm by ", " is the fastest, although there are a lot that run in O(n log n).", "Yes, efficient calculation of candidate edges for the MST seems like the hardest part. It seems very easy if you are willing to deal with the full set of N", " edges, though.", "Do you guys think that reducing the Delaunay to a MST in my post here ", " could effectively reduce the runtime? Or does it destroy my logic?", "I think the logic would still be ok, if you connect all the dinosaurs to the walls afterwards. The reduction in runtime is questionable though. Actually, I think it would be best to leave all the edges from the Delaunay triangulation and dinosaur-wall connections and then use the adaptation of Dijkstra's algorithm that ", " described above.", "C++ with O(n", " (log min(w,h) + log epsilon)) time, O(n", " space.", "I use a binary search to find the result, which changes the problem to \"Can you walk if their hearing radius is x?\". To solve that, first make a graph of dinosaurs and walls. Then, add edges so that an edge exists if two dinosaurs/dinosaur and wall intersect. Finally, check if walls on left side of the room are connected to walls on right side of the room.", "Challenge Output:\n    4111.000\n    1441.000\n    139.463", "Nice solution. It seems, though, that the critical distance is determined by two dinosaurs (or a dino and a wall), so you possibly could use that to some effectiveness in the algorithm.", "Good idea, like replace binary search with MST(where weight is min hearing to intersect). This would yield nicer O(n", " log n) complexity.", "Solution in python, had exactly the same idea as ", ".", "Complexity is ", " I think, haven't looked at the algorithm too closely. Average case is much better, as I only explicitly do an ", " operation once. Worst case occurs when the dinosaurs all lie in some circle of radius r, which should be rare if there's a sufficiently large number of dinosaurs distributed uniformly ", "Anyways, I'm exited to see how people will solve it with reduced complexity.", "Very interesting problem, truly unique in it's way to challenge us.", "I want to program this one out this week but I got the following idea in order to work this problem out:", ": Let's say this is the problem we are working with. 6 Dinosaurs distributed over the plane.", ": First we construct a ", ". (perfect example for Delaunay Triangulation)", ": Next we append the graph with red nodes in the exact middle of every edge, these are the points we can squeeze through for a maximum distance.", ": Next we append the graph with red nodes at the edge of the map directly perpendicular to visible black nodes. Alongside with adding a start and end node.", ": Extend the original graph with lines from those black nodes to those new red nodes.", ": Extend the original graph doing another maximal planar graph algorithm. This results into a possible walking graph from start to finish. (This one would be easier, for every red node attached to black node, connect to next red node. Also connect edges)", "Now comes the tricky part:", "In our example the answer would be 2.5 because:", "output would be: ", ", note that the green circles are made slightly smaller in order to show the actual path.", "Haven't found much theory yet, but according to what I found so far, I think this should all be possible with a O(n log n) implementation. ", "Yes, if you look at ", "'s comment, we have discussed pretty much exactly this. Please, read and comment. It seems you could have something interesting to add.", "Now, I think I finally understood one version of a Delaunay triangulation algorithm, so I am going to take a shot at this, too.", "appended a question to that comment chain.", "I think reducing the original delaunay graph into a MST could reduce the edge count from \"3n-3-k\" where k are the outernmost nodes, to just \"n\" edges. I'm just not quite sure if the MST wouldn't destroy some information. I can't find a contradiction, but still.", "In graph theory, a planar graph is a graph that can be embedded in the plane, i.e., it can be drawn on the plane in such a way that its edges intersect only at their endpoints. In other words, it can be drawn in such a way that no edges cross each other. Such a drawing is called a plane graph or planar embedding of the graph. A plane graph can be defined as a planar graph with a mapping from every node to a point on a plane, and from every edge to a plane curve on that plane, such that the extreme points of each curve are the points mapped from its end nodes, and all curves are disjoint except on their extreme points.", " ", " ", " ", " ", " ", " ", " ", " ", " ", "   ", "\n", " ", " ", " ", " ", "Minimum Spanning Tree based solution in python. It takes O(N", " ) time and O(N) space, but it should be possible to make it O(N log N) with changes suggested in comments. I tried to make it readable, not fast.", "It uses something like Prim's algorithm, but terminates immediately when the tree spans between the walls. ", "Edit: typos and cleanup", "Approach similar to the solution by ", ". ", "The optimal distance will occur when one of the circles is tangent to another circle or one of the walls. Enumerate all n", " possible distances and sort them in increasing order. This is O(n", " log(n)).", "Now find the smallest distance which results in a connected path of circles from the top/left walls to the bottom/right walls. Build up a subgraph of nodes connected to the top/left walls and another subgraph of nodes connected to the bottom/right walls. Since the distances are sorted, testing the next distance only requires adding the corresponding edge to the graph and updating the subgraphs. This search is O(n", ") as it is essentially a simple graph traversal."]},
{"score": "58", "title": "[2017-09-13] Challenge #331 [Intermediate] Sum of digits of x raised to n", "content": [" find the sum of its digits. The solution to this problem is extremely simple. Say, I give you 3", " You could calculate 3", " and add the digits.", "However things might get a bit complex for 5", " It's a 70-digit  number. You could come up with a larger data type that could handle the product of that number and then you could add each number... but where's the fun in that?", "This is today's challenge. Find the sum of the digits of some x", " without directly calculating the number and adding the digits.", "Some simple examples with values that you're familiar with:", "2", " = 32 = 3 + 2 = 5", "5", " = 125 = 1 + 2 + 5 = 8", "2", " = 1 + 2 + 8 = 11 ", "Note that I have not summed the digits of 11. ", "We'll work with powers and bases greater than zero. ", "means base", "means 2", "Display the sum of the digits of base", "If you have any challenges, please share it at ", "!", "Edit : If you're unable to come up with an idea, like the one is Project eulers 16, then feel free to solve it using your own data types (if required). Please consider it as the last option. ", "Is there a general case where you can sum the digits of any thing to an arbitrary power without calculating the power?  ", "This isn't making sense to me at all.", "I'm not sure what it means by ", "Am I not allowed to just put \"int result = pow(base,exponent);\" and perform logic on that, or is there some other meaning to this like I can't take the base & exponent and create my own pow function which calculates it manually to give me the sum of the digits? ", "I can't think of a way of doing this without calculating it first :(", ". Doesn't need to compute the exponent.", "Caveat: the digit sum is performed in the base of the input base.", "You cheating bastard. Have an upvote!", "You clever, clever dick", "He's taking the idea that  x", " is 1 followed by n zeros in a base x number system.  For instance, 2", " == 100000000 in binary.  Thus the sum of the digits is always 1", "That's the point.", "10", " = 100000 in base ten.  Sum of digits = 1", "2", " = 100000 in binary (base 2).  Sum of digits = 1", "16", " = 100000 in hex (base 16).  Sum of digits = 1", "one billion", " = 100000 in base one billion...", "Very new to programming, only know like 3 things of Python. ELI5 for how this is possible? what is going on here?", "Melz014 ", ". X", " in base X is always 1 followed by n zeros.", "ohhh, interesting. Thank you, I missed that comment.", "I'm guessing using a BigInteger library is \"cheating\" the spirit of the question, but", "...works like a charm in VB.Net", "what math theory/principle would avoid calculating the exponentiation?", "in J, takes 1ms,", "Do you know project Euler question 16? Check out any indirect emotion solution to that problem. The expected solution should be similar to that. ", "I'm forcing you guys to come up with new solutions. To invent something. I've made an edit but I wish to see something new. ", "Checking that project Euler question might help you think about how you're supposed to think this. It's not exactly close since the base is a constant but still. It could help. ", "I guess the approach you are inferring is if your language does not have extended/big integers, then you might use a paper/gradeschool multiplication algorithm on an array of base 10 digits?", "My question was more along the lines of whether there exists some surprising mathematical shortcut to the answer.", "I'm inclined towards finding the answer to your question too ", "I don't think there is one, though it'll be tough to prove that. ", "It's very easy to only calculate a few ", " digits of any huge b", " but in order to reach the leading digit I believe you have to effectively calculate the entire number. You may be able to cheese around an explicit representation by detecting the repeating patterns in the rear digits, but whatever format you end up with will be at least as big as a complete representation of the entire number, if not bigger. So if this is about finding a solution that is, at least theoretically, more space efficient, I'd be very surprised if there was one.", "I assume we can rely on both base and power being integers greater than zero?", "Yes. ", "\nThis is my first post to Daily Programmer", "Solution in ", ". Using ", " only for validation, evaluation is done according to challenge rules. Idea is to multiply the base in steps and to then increment the individual digits per each step:", "Results:", "I am entirely  out of  ideas  here and I cannot think of any way this can be achieved  without performing the calculation and then calculating the sum of digits  ?", "what  are some ideas to do this without having to perform the computation ?", "I've been working on and off on this problem for a few days, here's my thoughts so far:", "There's a 9's divisibility trick that goes: the number is divisible by nine if its sum of digits is divisible by nine. You can see this by:", "( '.' denotes concatenation)", "a.b.c = a * 100 + b * 10 + c = a * (99 + 1) + b * (9 + 1) + c", "= 9 * (11a + b) + (a + b + c)", "clearly if a + b + c is divisible by nine, so is a.b.c. Furthermore, the remainder if 9 doesn't divide it is the same for both. So that is", "a.b.c mod 9 = a + b + c mod 9 ", "where 'mod' is modulus.", "We can find out what a.b.c mod 9 is very quickly using ", " in log(n) time. Furthermore, if we can get similar equation for other coprime bases (like mod 7 for example), we could use the ", " to find the number modulus {the product of the bases}, which if we had enough of them, would actually be the sum of digits.", "Unfortunately, you can prove that there only exists this property for digits 3 and 9. I've made similar expressions for other numbers, but you cannot reduce them to the simple a + b + c... Now the interesting note is that this holds for other base number systems. So if instead of working in decimal (base 10) and instead choose base 18 for example, the property would hold for mod 17. If you chose a base number system = 23, it would hold for 22 (and therefore 11 and 2), you get the idea.", "The other approach I've taken on this is to continue with the base 9 approach, but to group numbers into 2s, so instead of", "1 . 3 . 6 . 7, you would have  13 . 67, two 2-digit numbers. This is effectively working in base 100. I can then calculate the sum of the two digit numbers, using the technique I mentioned above, and then multiply the original number a.b.c times 10, so it doesn't change the sum, but shifts each value over, so they form new pairs. in so  13 . 67  goes to  1 . 36 . 70 effectively. I can compute this, and by a bit of math sum up the two values, divide by 11,  (1 + 10) and get the answer mod 99. ", "To show how this works really quick:\nn = 1000a + 100b + 10c + d  ->>  100 * (10a + b) + 1 * (10c + d)", "Shifting gives:", "10 * ( 100 * (10a + b) + 1 * (10c + d)  )  ", "=  10000 * (10 * 0 +a)  + 100 * (10b + c) + 1 * (10d + 0)", "After shifting, if you add them (simplified expression):", "11000a + 1100b + 110c + 11d   ", "but given this is all mod 99, we have (take the coefficients mod 99):", "= 11a + 11b + 11c + 11d", "which you can divide by 11 to get", "a + b + c  + d", "I can expand this by grouping into 4s, like 7654 . 8920, rinse repeat, divide by 1111, get the answer mod 9999. If I repeat enough times, I can get the sum modulo a number large enough that it is actually the sum itself.", "The problem is that this is linear time, and is no improvement over the naive solution. If I could modify the last step to take the mod, shift by 10, add the two together, shift by 100, repeat, 10000, etc, it would become logarithmic, but sadly the math doesn't play out and so I get the wrong result.", "Python 3, the easy version:", "I'd just make it a function", "Python 3 integers can be arbitrarily large so no problems with large bases. ", "It is a one-line, one-off task. A function is overkill for that.  And I personally think generator expressions are much easier to read than ", ".", "I know. Although it can use up all the computer's memory if the exponent or base gets too large.", ", long form multiplication without any bigint libraries.", "Comments?", "Hey, there's one comment in there. :-)", "With two exceptions, comments are really only something to use as a last resort, for when the code can't explain itself. For example, code that's been carefully optimized won't itself express why certain unusual decisions were made. Otherwise comments increase maintenance cost (have to be updated to match the code), risk being out of date (not updated to match the code), or decrease the signal-to-noise ratio of the code by adding noise. The exceptions are:", "My code operates on strings of ASCII base-10 numbers which can be arbitrarily long. However, these numbers are backwards (\"little endian\") compared to what you'd normally expect. The ", " function converts between this representation and the one you'd want to print. For example ", " will return ", ".", "The multiply function does simple long form multiplication just like you would have learned in elementary school. It allocates a new string for its return. The ", " function does ", " recursively, destroying its input and returning a newly-allocated string.", "As a hack, to duplicate a number, I use ", ". That sort of thing might warrant a comment.", "Curious, is this philosophy, and the subsequent explanation, based on RCM's Clean Code?", "I'm aware of the book, but I've never actually read it, so any influence would have been indirect.", "(Mentally I've classified it as focused on OOP, which I really dislike, so that's why I haven't bothered reading it. That characterization of the book could very well be wrong, though.)", "I'm about a third of the way into it. The examples are all in Java, and there is a chapter titled \"Classes\" and one titled \"Objects\" (haven't gotten to either one) so I think it is fairly OOP focused. The thing is, the book covers everything: using variables, functions, and comments the \"clean\" way, formatting and naming, error handling and unit testing, etc, and it's meant to be used for any mainstream programming languages, so it may still be of use to you.", "In mathematics and computer programming, exponentiating by squaring is a general method for fast computation of large positive integer powers of a number, or more generally of an element of a semigroup, like a polynomial or a square matrix. Some variants are commonly referred to as square-and-multiply algorithms or binary exponentiation. These can be of quite general use, for example in modular arithmetic or powering of matrices. For semigroups for which additive notation is commonly used, like elliptic curves used in cryptography, this method is also referred to as double-and-add.", " ", " ", " ", " ", " ", " ", " ", " ", " ", "   ", "\n", " ", " ", " ", " ", "Awesome comment, take my upvote.", "Python (I'm sorry)", "Results:", "Sick, that was so short :O. You nailed it. ", "Thanks! Functional programming is pretty neat :). ", " Thanks to ", " for the inspiration for my answer", "This solution works well, except for ruby's frustratingly limitation for only being able to convert bases 2-36; the explanation for which would seem to be a lack of common naming convention beyond 36 digits (0-9 and a-z). I guess an additional 26 could be added using capital letters - once again only taking the solution to base 62... ", " easy solution:", "Still thinking about a solution that doesn't require calculating the answer.", "Nice work here, you inspired me ", "Python, but using the easy method. Still wrapping my brain around an alternative solution.", "In Python you never have to iterate with a running index. Use a for loop:", "In this case you can even do the whole thing as a one-liner:", "Cool, thanks for the tip! Just started with Python so still picking things up.", "What do you mean by \"running index\"? Thanks.", "I was going to give you a proper reply but I just found this link posted ", " that perfectly answers your question: ", "The short version: Don't do", "but instead do", "If you actually do need an index for something (which is quite rare) iterate over a ", " or use ", " on another iterable.", "Thank you, that helps bunches!", " ", "I didn't really know how to do this without calculating the power of the number, so I just didn't store it in a variable if that's what was meant by the creator.", "I am a beginner programmer, so let me know on how I could improve the solution.", "EDIT:", "[IMPROVED] ", "A few things:", "I hope that helps.", "Thanks!", "That\n    numbers.split(\" \")\nreally helped me a lot! I used to always do it my way.", "You could replace", "with", "It does the same thing as far as I can tell.", "Thanks!", "There's another improvement that you can make that has to do with how you actually do the processing:", "or one-liner:", "List comprehension is quite an important construct in python as it makes code quite a bit cleaner, and in my opinion more readable. The usage of ", " also removes the explicit summing of the terms", "Additonally, the digits of the power can also be calculated like this:", "The ", " function that I have used here applies the function ", " to each element in an iterable, which in this case is a string. This would completely replace the list comprehension mentioned above :)", "Thanks! I realized that like 5 seconds before you sent this, lol.", "Not sure I understand the question but is it this?", "My idea: consider x", " in base x, then it will appear as 10000... (with n zeroes). Convert this string from base x to base 10 (as a string) and sum the chars. Unfortunately I can't think of a way to convert arbitrary base to decimal in string format... So the problem becomes equivalent to convert a string representation of a large num in an arbitrary base x to a string representation in base 10. If we can do this one digit at a time we can just sum for each char.", "I assume you're referencing the idea of how to get the digits out of the number? If so, yes, you could convert to a string. You can also do what that string conversion is going to do, and use modulus and division to decompose the number.", "x mod 10 = digit", "x div 10 = next x", "I had to dig out my formulary again but I managed to solve it.", "The two big insights are:", "The math is probably correct, but have a look at what's going on, e.g., when ", " and ", ":", "is the same as:", "so you're still using ", " values to compute 2", "And I felt so clever. At least it's an improvement for ", " >> ", ". Now let's see if I can improve it further.", "Edit: It's getting late so I'll stop for now. I might come back to this in the next few days.", "So I've been doing this in JavaScript, and for some reason, when the source I've been using goes into scientific notation, it just adds in random numbers EVERYWHERE. Welp, here's my possible solution. ", "How about using substr() to find the digits?", "First digit would be input.substr(0,1)\nSecond digit would be input.substr(1,1)", "A Factor Solution", ": getPower ( x y -- power ) ^ ;", ": convertToString  ( n -- str )  number>string ;", ": extractDigits ( str -- seq ) \nstring>digits ;", ": sumTheDigits ( seq -- sum )\n0 [ + ] reduce ;", ": top ( x y -- )\ngetPower\nconvertToString\nextractDigits\nsumTheDigits .  ;", "Enter", "2 1234 top\n1636", "11 4000 top\n18313", "50 3000 top\n9208", "In Kotlin, though maybe cheating because I used java.math.BigInteger:", "Never calculates a", " Most of this was rewriting the mod function to work with a", " so the digit sum formula works. I dont think large values will ever break the spyder python console at least, but it starts to take a long time to process at around 2", "This is pretty good. ", "Thank you! As an novice programmer that honestly means so much to me.", "Haskell solution, probably not with best stylistic practices. Any suggestions for improvement are appreciated.", "Hmm. I don't know Haskell. ", "May you teach me what you've done (in pseudocode)? ", "Python, i'm noob, any remark is welcomed :     ", "Python", "x = int(input(\"x: \")) ; n = int(input(\"n: \")) ; xn = x", "while n > 1: xn *= x ; n -= 1", "print(sum(int (i) for i in str(xn)))", "Python:", "Can you explain your solution, I am trying to figure it out but it's a bit complicated?", "It's for this reason you should always name your variables as what they are instead of a, b, c, x, y, z. Anyways, it seems to me he's building the result of the power in a[] and then summing its elements. He's also building a[] by multiplying the base, exponent times where each iteration the array is updated by doing integer division (d) and carrying the remainder (c).", " is a list containing a single digit in each index. ", " is the ones' place, ", " is the tens' place, etc.. This is basically a re-implementation of Python's number type (which is already arbitrarily large), but supporting only multiplication.", "my attempt at clarification, tested in Python 3.5", "C#", "The solution is trivial", "Code:", "Output:", "Haskell ", " One-liner", "Python3:", "\ndef sode(num, exp):", "\n\u00a0\u00a0\u00a0\u00a0      val = 0", "\n \u00a0\u00a0\u00a0\u00a0   for i in str(num**exp):", "\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0    val += int(i)", "\n  \u00a0\u00a0\u00a0\u00a0  return val"]},
{"score": "105", "title": "[2017-09-29] Challenge #333 [Hard] Build a Web API-driven Data Site", "content": [" an API, today's challenge is to ", " one. Today's is relatively simple: a single CSV file as input that can probably be represented by a single database table. ", "Your solution may use whatever technologies you wish to build on:", "This challenge focuses less on the guts of the server and more on routing requests, transforming a request into a data extraction method, and returning those results. ", "Today's challenge will utilize the State of Iowa - Monthly Voter Registration Totals by County data set: ", "Download the JSON, CSV or other and use that as your input. It contains 19 columns and over 20,000 rows. Now expose the data via a web API. ", "Your solution ", " implement the following API behaviors:", "This challenge extends Wednesday's idea of practicality and real world scenarios. Wednesday was some basic data science, today is some basic application development. It's open ended.", "Ensure your API is immune to attack vectors like SQL injection. ", "Hacky-but-short Python code; I thought learning basics of Pandas would take a bit less time than setting up a database and/or a proper REST framework.", "Example URL and output:", "Very elegant solution. I've never used Flask before, so your solution taught me a little bit about how to use it. ", "Nice quick and dirty solution. For reference, pandas data frames have a ", " method that I've found very useful.", "I know, but I think that would make it a bit more weird to add ", " to the already generated JSON.", "That's short :D ", "Reading the JSON file and mapping it a bit.", " Liked adrian17's idea about a start parameter and a nextStart response. So I implemented it in my solution too.", "URL", "Response", ", so sorry for the long post...", "Depends on ", " and ", ". The solution is split into five classes/enums and files. It takes about 150-200 ms on my machine to build a JSON response for all voters, faster if some filtering is done.", " is called by the minimal server in ", " to respond to the ", " endpoint. ", " gets the voter information from a ", " and sends it back to the client.", " is responsible for keeping track of the voter information. I chose not to use a database but just keep the CSV records in memory, since there weren't very many.", " ties the above components together. I have tried to keep the components loosely coupled, though I didn't introduce any Java interfaces for them.", "Finally there are two enum types, ", " and ", ", because they wouldn't fit above:", "Goddamn", "Wanted to see if I could write something a bit shorter than my last attempt. Here it goes:", "URL", "Response", "I like this solution! I am newish to the node.js game and there were a couple of neat tricks in there that I was not aware were part of the language. Thanks for this, I feel like I learned a lot from analyzing your response!", "Glad you liked it.", "A bit late as well (just found out about this sub and wanted to try this one out). I'm using Java, libraries used are Spring boot (Spring Data and Spring web), Commons lang3, Commons IO, Commons CSV, HSQLDB and Lombok.", "To load the data I wrote this model:", "The following repository:", "And the data importer itself:", "Then the web part:", "To run it I configured an environment variable ", " referring to the location of the CSV file.", "Example output:", "Good ol' PHP with the Slim framework. I hope I understood the problem correctly.", "Database schema :", "PHP script to parse the CSV file and fill the database :", "Ugly API code :", "db.php only creates and returns an instance of PDO :", "FWIW you did. ", "That's good to know, thanks.", "beautify.php simply reads the response and prints it out in a nice format :", "Examples :", "$ curl \"http://localhost:10000/get_voters_where?limit=5&county=union&party=other&month=3\" | php beautify.php", "$ curl \"http://localhost:10000/get_voters_where?limit=5&party=republican&active_status=1\" | php beautify.php", "That's mostly fine except:", ":D", "Slim has got you covered. Returning $response->withJson() outputs JSON-formatted data and also sets the appropriate Content-Type header. That's why I'm able to pass that output to json_decode in beautify.php", "My Ruby solution (Rails), incomplete but somewhat working. Caching the data so it's super quick, but the initial load and parse is slow.", "I did this in PHP. It works if you have any number of columns. My professor always told me that I write inefficient code so I am trying to improve myself. ", "Example output:", "A little late to the party, but I saw ", "'s solution using Python so I thought I'd take a stab at it using sqlite. This was my first time using Flask so forgive me. I was able to grab one result but I'm having trouble pulling multiple rows from the database using SQL. I would appreciate any help because I'm pretty stuck.", "Example URL and output:", "look at ", ", that may be useful. ", "in your python webapp journey, the next step, by the way, would be to learn an object relation mapper (ORM) like SQLAlchemy.", "Yeah, I used fetchall() in another iteration but then ran into the problem of separating each query result into its own document. I will take a look at SQLAlchemy though and see if that may be a better option!"]},
{"score": "73", "title": "[2017-10-04] Challenge #334 [Intermediate] Carpet Fractals", "content": ["\nis a fractal generated by subdividing a shape into smaller copies of\nitself.", "For this challenge we will generalize the process to generate carpet\nfractals based on a set of rules. Each pixel expands to 9 other pixels\ndepending on its current color. There's a set of rules that defines\nthose 9 new pixels for each color. For example, the ruleset for the\nSierpinski carpet looks like this:", "The process starts with a single white pixel. After ", ". After four iterations it looks\nlike this:", "To define a ruleset for your program, each of the possible colors will have one line defining its 9 next\ncolors. Before listing these rules, there will be one line defining the\nnumber of colors and the number of iterations to produce:", "For example, the input to produce a Sierpinski carpet at 4 iterations\n(as in the image above):", "The number of colors may be greater than two.", "Your program should output the given fractal using whatever means is\nconvenient. You may want to consider using a ", " (P2/P5), with ", "\nset to the number of colors in the fractal.", "The bonus output will contain a secret message.", "This idea originated from ", "; more at ", ".", "Z80 assembly", "Sierpinski carpet rules are encoded into the program, and the number of iterations as well.\nYou can change the initial contents of the ", " variable to obtain a different number\nof iterations.", "It prints on the standard output using letters 0 and 1. Assembled program size is 126 bytes.", "Sample output from a CP/M system in an emulator - ", " ", "Source:", "You're the hero we deserve.", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I read input from stdin and dump output to stdout (P2 formatted) so you can pipe it into a file. Replacing ", " with an actual file is trivial (if anyone wants to see it let me know).", "Note that I do not magnify the result, so for the challenge input the resulting image is only 81x81 pixels in size.", "Bonus result (", "): ", "You'd make an excellent functional programmer.", "Thanks. I dunno about excellent but I do enjoy it. ^^", "Do you use know any functional languages?", "I learned Haskell at university. I haven't really found a good reason to use it since, though, which is a bit sad.", "Hah well incidentally, Haskell is my go-to. It's honestly a lot more practical for development than people think. I use open source software from multiple projects written in Haskell every day, including my window manager itself (XMonad, which actually lets you use the full language to control how everything with your desktop behaves). The language has a lot to offer for real development, but unfortunately does not have as much recognition as it ought to. (In my opinion, anyway)", "To be honest with you, what I like so much about your solution is that it looks a lot like Haskell hah.", "little off-topic but the last time I dabbled into haskell (also during uni) performing random operations due to the strict enforced purity was relatively cumbersome compared other languages. Do you know an article or a tutorial or something that gives a good overview over how to practically work with randomisation and haskell?", "To be honest with you, I have never had to use randomness in Haskell (and indeed, I think I have only ever used it in early programming courses). From my cursory research (reading ", " article), it seems that ", " is the primary means for getting random number generation, but there is also ", " and potentially others I don't know.", "I don't know exactly what you mean by cumbersome, but hopefully this will help. The most basic randomness (derived from hardware) can be done using ", " in the ", " module, which can be used in the IO Monad (so in main or whatever you like). Note that this is polymorphic, so it can generate a random number just as easily as a random character, double, or whatever else. You can even use it to randomly generate an instance of a custom data type by creating an instance of the ", " typeclass (this can be done automatically using deriving with Template Haskell, if you so wish) for your data type.", "If you dislike having to use Monads all the time, the article linked above shows how you can generate a sequence of random numbers once (in a Monad), which can then be used in any function, Monadic or not.", "One very cool feature you get for randomness in Haskell is that, since Haskell is lazily-evaluated by default, you can generate an infinite sequence of random numbers (as a list), which you can then use all kinds of powerful tools to work with. Want to get 10 random numbers? It's simply ", ". (If the generated list was called \"randomNums\") Folding, filtering, zipping, you can do it all. You can even create a new list containing all possible subsequences of the aforementioned (infinite) list (so you can have a pseudo-random number of random numbers). There's a lot you can do with it.", "hey, thanks for the write up!", "Here is your gist : ", "To download from your terminal simply run this command :", "Something you can run in your browser:", ". I wrote up this challenge, and the bonus input was creating using\nthe same generic algorithm described in Swadqq's article. That code ", ".", "Here's another interesting input:\n", "My actual solution for the challenge:", "Python3, numpy, and matplotlib solution. The data is given as a single string ", ".", "Results: ", ", ", ", ", "Edit: fixed colormap", "Reads from stdin and prints result to stdout. Pretty disappointed with how unreadable this ended up being. Too many maps within maps", " - canvas resizes depending on max number of iterations and every iteration is displayed", " ", " thanks to ", ".", "The imgur images have been enlarged by a factor of 10. Due to the example input only giving a 81 on 81 pixels size image.", "C wrapper that generates html page running the simulation (showing each iteration).", "Super sloppy, but it does the job. Takes the problem via stdin and writes the PGM to stdout. Unlike most of my other answers, this one doesn't loop indefinitely; it handles one problem and then exits. (Making it loop and handle EOF nicely is kind of a pain because of the large number of interdependent inputs.)", "Bonus output: ", "There is probably a lot that could have been done  better since this is my first time working with the numpy and PIL modules but the code seems to work. Any feedback would be highly appreciated.", "I think the picture you have for the fourth iteration in the example has the colours inverted. Going by the rules, a black square will always stay solid black, so the central but should remain black. The picture has this white though", "C", "Haskell", "I'm somewhat a beginner to programming and wanted to do this without relying on any external packages. The code is poorly written, so I apologize for that in advance. ", "If you have any suggestions on how I can improve the code, please do reply.", "Tested for both challenge and bonus input.  The output is correct.  I don't have a place to host images so not linking the plot outputs. ", "I think there are couple of things I can do to tighten the code up.  Will ponder it over the weekend when I have some more time.", "Feedback is welcome.", "In-place rendering of each iteration. Prefers multiply over divide and modulo, using only a single divide per iteration.", "In-place rendering, nice.  I went with my first thought which was start with a 1x1 and expand outwards.  My approach has the disadvantage of requiring multiple mallocs which is why I like your approach better.", "I coded my solution up in ", ".  I used \"flat\" 2-D arrays.  Tweaking the following line gave me more trouble than it should have:", "As for the secret message, can somebody explain to me what it is?  ", "Here's the solution:", "Very late to the party but this was a very fun challenge :)", "Scala. I just have started learning it, so I feel like there is a lot to be improved.\nIt takes output from the stdin and prints the output to stdout using console escape sequences for coloring.", "I don't understand how you get colors after the first line"]},
{"score": "96", "title": "[2017-09-11] Challenge #331 [Easy] The Adding Calculator", "content": ["Basically, the programmer is not allowed to multiply, divide and subtract using the operations provided by a programming language. To the programmer, the only accessible ", " operation is addition.", "Your calculator should be able to handle addition, subtraction, division, multiplication and exponents. No modulo operation (to obtain the remainder for two given operands) too. ", "Please note that", "Allow the user to enter two integers and the operation symbol.", "Let's use ^ for exponents i.e. 2^3 = 2", " = 8", "If the answer is an integer, display the answer. If the answer is not an integer, display a warning message. Handle errors like 1/0 appropriately.", "Modify your program such that it works with decimals (except for ^ operation) with a minimum precision of 1 decimal place. ", "Submit to ", " if you have any cool ideas!", "Only works with shorts, however it would work the same with integers (just by replacing short with int and USHRT_MAX with UINT_MAX), it just takes too long to run. Makes use of overflow for subtraction.", "i can't get it, how subtraction will work if you use 65535 as initial value and increment it in a loop ?  ", "The value overflows in the loop", "Why don't you negate and add 1 (2s complement)? And what kind of sorcery are you using to omit types on function arguments :o?", "Using bitwise operators isn't allowed... and I didn't even realise I did that, I just forgot to put them in I guess, still works though!", "Oh, ok. You're correct, when I first read that logical operators were allowed, I thought we could use ands, nots, etc., but I think I misinterpret the challenge", "The only unary operator allowed is ++, so no negation also", "Ok. I knew about old-style C. Didn't know it defaulted to int if not specified", "cool", "Which invokes undefined behaviour; ", " should be unsigned.", "Also, ", " is the same as ", ". What was the intent here?", " You'd also need ", " in the event that sizeof(short) \u2260 sizeof(int).", "\u00a0", "When x is incremented, it overflows and becomes negative (USHRT_MIN), then I can subtract using that negative value. I could have just used the USHRT_MIN constant but I felt that that was kind of cheating. It is technically undefined behaviour, but I'd challenge you to find me a scenario where signed integer overflow doesn't happen", " would be cheating but ", " isn't?", " doesn't overflow on the initial increment. ", " is initialised with the value -1 and is then incremented by 1 to 0. ", "Also, ", " doesn't exist. If it did, it would be 0. Are you confusing USHRT_MAX with ", "?", "\u00a0", "Signed overflow behaviour may be predictable (and upon further thought may actually be well-defined in this case) but I still don't like idea of relying on it.", "It's probably OK the above code but can easily cause problems depending on compiler options. For a contrived example, try ", " with and without ", " and/or ", ".", "Yes. The reason I say this is because the unary operator ", " is banned, and SHRT_MIN is effectively the same as typing ", ". I think my use of USHRT_MAX could have been SHRT_MAX instead, but it still works. \u00af\\_(\u30c4)_/\u00af", "It's prohibited. But it's kind of hard to correct the dude to say that it's prohibited because of how simple it is. ", "Yeah, that's more or less how I felt. I was mostly curious. Thanks for answering. ", "replaced the Math.abs with my own abs", "You're a cool person. ", "You bet!", "I handled the abs with the python version of the ternary operator. In Java, I think it would be \"return (x > 0 ? x : subtract(0, x));\" ", "The same. Is that not forbidden to use \"-1\" ? I wanted to use it like you did, but doubted if i can use minus sign at all.", "I don't know what OP had in mind. For mine, I used subtract(0, x) when it was a variable and -1 for constants. I figured negating an unknown was a stealth form of subtraction, but -1 is just an integer and doesn't imply subtraction. ", "I assume you can use '-1', but only as an explicit value.", "Does not break any rules imo: you're not using any prohibited operators: the minus is not an operator, it's the sign for a fixed value. Using Integer.MIN_VALUE is basically the same: you're using a static negative number.", "I'm a total coding noob. Started studying no less than a few weeks ago and so far I've only worked with joptionpane and scanner class. How exactly do I get this program to read my input? When I hit run project on an IDE it says 0 then process completed. I probably sound like an idiot to you guys but I really have been wanting to try out your guys' programs.", "Fully supports negative numbers.", "That'd be using the unary ", " sign, which isn't allowed AFAIK.  The only unary operator is ", ".", "Is it a unary operator, or a negative literal? Pretty sure it's the latter, but if you can think of a better way to construct negative numbers in Python 3 when your inputs are, for example, \"1 - 3\", then I'd gladly take it. Overflow isn't an option, since Python 3 automatically starts using BigInts, so the negative numbers have to come from somewhere.", "In python? It's the unary operator. It'll vary based on language whether it's a single literal or not, but in python something like ", " is a unary ", " operator and a ", " literal. ", ".", "This leaves a problem still of how do you get a negative number? This can be done in a few ways, but there's one sneaky one. ", " will always return ", " due to ", " not being in ", ". There's a few other methods depending on what you allow, for example the ", " module in python allows use of numbers that behave like ones in c, complete with the ability to overflow into negatives.", "Another sneaky trick would be to split before the operator on subtraction and include it as part of the value you convert to an int.", "But another rule is you cant use builtins.", "Only for dealing with exponents, the rules don't universally ban the use of built in functions.", "Bah so it is. But whats the fun in that ?!", "A lot of it would be an issue depending on how you define what a built in is, as you could easily reach a lot of points where it's impossible. 'int' is a built in function for instance, but it'd be hellish to have to avoid that.", "Hmm, maybe you're right that it's a literal.  But still, defining and adding a negative is kind of cheaty, eh?  ", "I believe you can calculate complements without any subtraction, so you can do subtraction via addition that way.  ", "Python learner here. I didn't know you could call a function like that. Neat!", "Yeah, Python has first-class functions, which means that they're treated no differently than any other value. Calling a function (", ") is an operation like any other, and both ", " and ", " can be variables.", "JavaScript solution. Just for fun I refrained from using bitwise operators or the Math-object.", "Output:", " 485 characters, ", " 477 deleting unnecessary newline. It requires ", " as command line option for gcc, since it assumes that ", "s are not pretty, but it does whatevere is needed.", "EDIT: I spared 54 characters deleting the ", " and using a fancy array of function pointers. Other 7 character could be spared using ", " or ", " instead of ", "...but rules are rules!", "EDIT2: Other 16 characters spared! I got rid of the subtraction function, it wasn't necessary. Now the inversion function is actually a ", " inversion function, and it can work as absolute value too.", "Here's the code", "Question:", "May I access individual digits? ", "Sure. I wonder how you'd do that by using addition. The remainder operation is prohibited too. ", "well that's what I am saying. If the input is a string, I can access every individual character by accessing the specific character in the array. Is that allowed?", "I don't seem the harm in that. Feel free to do so. ", "In fact, my first ever Haskell program so go easy :) Cheated a bit with division... ", "Haskell solution. Slightly based on ", "'s (incorrect) solution.", "Nice work, this is where I was going after better reading the challenge", "It still seems this solution doesn't conform to the challenge, since bitwise operators are not allowed :(. Oh well", "You tried", " no bonus but I wrote a compiler", "Examples:", " changed the parsing method to the shunting-yard algorithm (", ") before converting to Lisp expressions (", "). Now correctly (I hope) handle long expressions, though I lost the ability to refer to variables and arbitrary Lisp functions.", "I use INT_MIN + 2147483647 (which equals -1) along with my multiply function to change case when needed without using the - unary or binary operator anywhere. This is a port of my rubinius code elsewhere in here. Feedback is welcome! I'm learning C, and new to programming. ", "I think I have avoided using any illegal operators. I have even made rewritten replicates and list definitions to only increment and not decrement.", "The minuses I use in various places are not an illegal unary operator (-), but rather the number literal (-2) for instance. I have tried to avoid this with variables.", "Returns the right answers for all test input. I return a list of answers, so my \"warnings\" are just an empty list. This is not very elegant, but it plays nicely with the loop/list based solutions to division and subtraction.", "There are some comments in the code when I redefine stuff so it's legal.", "code:", "Including bonus. It even deals with nested expressions and operator precedence!", "\u00a0", " ", " ", " ", " ", " ", " ", " ", " ", " ", "Breaks a rule there, no unary operators allowed....", "Fine, replaced by ", ".", "Edit: It took me three hours to realize I could just write ", ".", "You're technically correct since you did not use '-' but it kinda spoils the spirit of the challenge ", "The bitfiddling is the problem? Not the part where I just ", " the user input? :D", "Where did you that?", "I'm not familiar with python so idk. ", "It's Lua, not Python.", "The code reads a line from input and replaces all occurrences of ", " by ", ". The result is then passed to ", " which returns a function that executes the string as code and returns the result.", "Technically I didn't use any in-built math operators myself.", "Unless you've not created * operator, I don't see a problem. ", "Have a nice day! And apologies for thinking it was python. ", "Python 2.6:", " This one works with the spirit of the problem. no sneaky parsing trickery to get subtraction, and as a show of good faith, the hyphen does not even appear in the source code (not even in the comments!). We get negative one by ", " and go from there. We can multiply by two by adding a number to itself, and use that repeatedly to generate a list of positive and negative powers of 2. We can negate a number by adding negative powers of two to it, Multiplication/division of is by repeated addition/subtraction of terms of the form ", " (since we can multiply a by 2 repeatedly) and powers by repeated addition of ", " by squaring a repeatedly. The safe bounds of arithmetic are essentially the safe bounds of integers, and the algorithms are efficient.\n", " ", "Allowing math down to 6 decimals", "Using BigDecimal since I got tired of double/float inprecision (0.1 + 0.2 ~= 0.300000000004)", "Minimum possible negative is -2", " (Integer.MIN_VALUE)", "Maximum possible positive number is where ever your memory runs out", "a = a.add(b) is the BigDecimal way of doing a += b", "Input:", "Take a piece of paper and divide two numbers that have no common factors. Consider every little step. Ask yourself why you're doing that step. ", "You'll get your answer. ", "That's quite useless when I do exactly that when dividing/multiplying in my head :P I just multiply/divide by 10 whenever necessary to keep it in integers and remember what decimal point it was supposed to go at", "Can't get your solution but it seems you found the solution. That's cool. ", "Its really spaghetti code atm :p the div/mul 10 basically just goes for every 1 add 10 to result and for every 0.1 add 1 using 'double - (int) double' to cut anything above 1 out", " without bonus: I would love to hear any feedback on this.", "these binary operations behave like modular arithmetic operations(minus the overflow):", "I've posted here only the logic.", "  No Bonus", "I couldn't figure out how to do multiplication of 2 negative numbers without using an absolute value, so any advice would be appreciated!  I'm also trying to pick up my \"pythony\" type syntax so I'd welcome any pointers on better python syntax as well!", "I created an absolute value function for my solution:", "This requires some conditional logic based upon the sign of x.  The sign of y only really matters in terms of using range(y).  You want to assign x to be x if y > 0 else -x.  If I read the rules correctly, this is perfectly valid.", "I haven't finished the bonus yet for division (finished the multiplication), but here is the logic I used for integer multiplication:", "Great, thanks for the info.  Reading through some of the initial questions made it seem to me that the \"-\" was off limits completely, but it made things a little more difficult than I was expecting for the \"easy\" challenge.", " ", "I can re-do the subtract if it's not allowed. Not sure if something like ", " is allowed either. Division acts as integer division would instead of saying \"Non-integral answer\"", "Code:", "Output:", "You're using the negation unary operator here!", "Hmm, I use that in several places :/ subtract, multiply, divide, and getting the absolute number. If I can't use it anywhere then I'll need to rethink all of it. Will update shortly.", "I had to abuse ", " for the Division function... if anyone has a better way of doing it, I'm all ears. Also I copied the whole \"use short overflow to simulate subtraction\" idea from ", " who gets credit for the idea.", " ", "Solution only works in Rubinius as it's the only Ruby with a Fixnum::MIN implementation or equivalent (to get a negative value without using the subtraction operator). ", "Python 3.6, no bonus", "Its a bit messy, but it works", "\nDone in a functional style, at the moment it doesn't detect non-integer results.", ", no bonus", "It's hard to say what constitutes an \"arithmetic operator\" in J; for instance, ", " is logical negation, but more generally it's probability complement. Furthermore, J supports negative numbers in the syntax for integer literals (", " is unary minus applied to 1, but ", " is an integer constant representing negative one). Fuzzying the rules even more, ", " is the name of a function that takes any argument and returns negative one.", "I went with a pretty morally conservative solution, using things that wouldn't require arithmetic in a C-like language. This also doesn't do any eval-ing of the input except to parse integers. Grabs input from input.txt and doesn't love big numbers", "This implementation doesn't use any arithmetic or logical operators in its core calculation code; instead, it produces results by simulating the ", ", which is something I've always wanted to do for one of these challenges.", "Sufficiently large numbers are unrepresentable because the very act of representing them is a stack overflow, and you might run out of heap space if you do too many problems in a single session. (It turns out that Common Lisp implementations don't really ", " the idea of creating thousands of lambdas at a time.)", "Works without bonus, and handles the acceptable ", " operations. Subtraction is handled via Integer.MIN_VALUE + Integer.MAX_VALUE = -1, on the advice (and surprise) of a friend or two.", "}", "\nMy solution. I'm new to this so i'm looking forward for sam feedback.", " without Bonus", "With Bonus (only for multiplication and division - forgot subtraction)", "Output:", "Bonus:", "+", " Java", "Input", "Output:", " ", "\n", " ", "\n", " ", "\n", " I appreciate your feedback ;)", "Well I might have gone overboard and wrote an entire calc. interpreter. Though it does not work on order of operations yet. ", "In Java, because I'm working on a class using it.  ", "Extension!  I can now do modulus.  I don't like the code duplication with the division function, but it works.", "And I realized I used unary - out of habit.  Fixed here.  And this didn't even require any substantial change to the algorithms for the rest of it.", "Can someone help me on the subtraction? If only + is allowed and - isn't, how can i do a subtraction? I can't use <   !=  etc. either, since those are forbidden as well.", "You can use logical operators. They aren't forbidden. ", "\nI'm beginner in Java. If You see sth wrong or sth what can improve my code or just want to write sth - feel free to comment.", "Here I treat inputs as strings and only convert to integer when necessary. This allows me to check if the first character contains a '-' or not easily and also allows me to put a '-' sign at the front when needed. It also means that the functions only ever return strings, (as opposed to strings and integers) which works well because we have other English outputs such as \"Non integral answer\". The rest is just a bunch of if and else statements.", "The main thing I'm proud of is the input regex to parse the input binary operation into 3 tokens, taking into account the minus unary operator, regardless of how many whitespaces are in between.", "\u00a0", "This is just the unit tests file. Might be useful for other people trying to do the challenge to copy this and use it for testing.", "\u00a0", "this is my first submission. hope i did well", "written in C, compiled with", "operations.c", "operations.h", "main.c", "You wrote b-1 in your exponent function. That breaks the rules of this challenge. ", "I'm sure it's just a light mistake because you do have a subtraction function. ", "Shoot! I totally missed that. Fixed it now by making i start from 1.", "It was a minor error. Other than that, great code! ", "Python3\nDoes not work with floating point. but passes all integer tests(supplied in problem)", "was unsure if abs was allowed so wrote my own.\nalso unsure if -1 was allowed so used ctypes to create a true 32bit int so i could overflow the int to get my -1", "also may notice returns that never get called because of an exception raise.\nthis was in case i wanted to go for the bonus. the logic may not work as i decided not to go for bonus.", "package theAddingCalculator;", "I used abs function because fuck this, it's impossible not to.", "Can i use the abs() functionality?", "No. It's not hard to implement. ", "Okay, fair enough. ", "C# ", "Feedback is much appreciated.", "Edit: Just realized that a negative exponent doesn't imply a non-integral answer when the base is 1.", "I went totally over the top with this one because I wanted to see how far I could push template meta programming. I wrote a set of compile time templates that calculate the powers of 10 using only +. I do use a single '-1'  constant, but I don't think that is against the spirit of challenge and I could remove it if I really wanted to.", "Full work in the ", "After this I was able to write a speedy negate function which the entire class below works on. Supporting loads of standard ops and hiding the magic.", "Totally over the top, but was fun.", "Java. A little simple. Feedback Welcome.", "You've performed direct operations in all three functions. You're not supposed to directly access operators using '*' and '-'. That breaks the challenge.", "Remember, no operators. Good luck.", "I just realized how tired I was when making this. edited.", "Is minus as a mathematical sign allowed?", "You, as a programmer,  are not allowed to use it to subtract two numbers.", "For display purposes, the user can enter the minus sign just to tell your program that you have to subtract. Your code cannot use that sign for actual subtraction purposes. ", "Thanks for the quick answer. So the minus sign is fine as part of the input like in the following Python code? ", "That's how I read it -- negative numbers can exist, the - sign can exist, but you aren't allowed to negate a number (the unary - operator) or subtract (the binary - operator).", "Absolutely correct. You got it. ", "Yes. It's correct. ", " got it right. ", "But you would at least need the unary minus operator to express a negative number.", "+", " Haskell", "Input:", "You missed the major rule of the problem: you cannot use the given arithmetic operations for substraction, multiplication, division, or exponentiation.", "Good news are that you are using Haskell, so redefining those operators is actually the easy part.", "Don't think I've ever seen that sentence before ...", "It seems that you are right.", "I'll fix it later on", "I don't know Haskell. ", "May you explain what you've done? ", "I see to I have the assigment wrong. I'll fix it :) and add comments"]},
{"score": "66", "title": "[2017-09-20] Challenge #332 [Intermediate] Training for Summiting Everest", "content": ["You and your friend gather a list of mountain peaks that you'd like to visit on your way there. You can't deviate from your path but you can choose to go up the mountain or not. But you have to pick ones that go higher than the previous one. If you go ", " your body will suffer and your trip to the summit of Everest will be in peril.", "Your friend has done the job of lining up the route to get you from home to basecamp. She looks to you to devise an algorithm to pick the peaks to summit along the way maximizing your summits but always going higher and higher never lower than you did before. ", "Can you devise such an algorithm such that you find the list of peaks to summit along the way? Remember - each has to be higher than the last you want to hit as many such peaks as possible and there's no turning back to visit a previously passed peak.", "You'll be given a series of integers on a line representing the peak height (in thousands of feet) that you'll pass on your way to Everest. Example:", "Your program should emit the peak heights you should summit in order that are always higher than the previous peak. In some cases multiple solutions of the same length may be possible. Example:", " using dynamic programming. It starts searching from the end,\nsolving the short problem, then building on it as it works backwards.\nThere's no backtracking.", "Why do you start solving from the end instead of from the beginning?", "This problem is ", ". Solving from the end eliminates the guesswork because we've already computed all the required information to make an informed decision.", "If you start from the front, you have a number of choices available. Are you greedy, selecting the shortest available peak? This might eliminate a better path. So to figure out which one is optimal, you have to try them all. Each of those choices is followed by another decision, which each have to be tried, and so on. There's a lot of backtracking and re-solving the same problem again and again.", "There are two ways to deal with this:", "I think both approaches have the same time complexity. The first requires a stack for backtracking, though, which is why I prefer the second.", "Can't this also be said for solving it from beginning to end though? My solution (below) is almost identical to yours, but I start from the beginning. I also don't backtrack.", "While your ", " loop is working front to back, your inner ", " loop is only looking backwards, which is essentially what I mean about \"from the end,\" though that's definitely not accurate phrasing in describing your solution (maybe \"working backwards\"?). I guess the real reason my solution literally starts at then end is because of how I represent the solutions in ", ", as opposed to your appending to lists.", "I see. Thanks for your responses.", "Thanks for making me look at the problem differently!", "What is the time complexity of this- O(n", "I think so. There's probably an O(n log n) solution by making the inner loop smarter.", "Beginner here:", "\nWhy are the arrays 4096 in size?", "\nThe inner for loop uses ", " but ", ", so basically the loop starts as ", ", and the condition ", " would never be true.", "\nAnd if you filled ", " up to the n-1", " spot, how can there be relevant numbers in peaks[j] and forward?", "\nAm I missing something?", "The 4,096 is just an arbitrary maximum number of peaks. There's nothing\nspecial about it except that it's larger than any input I expect this\nprogram to ever see. A real solution would ensure there's enough memory\nby using a dynamically-allocated array, or perhaps would just refuse to\nprocess large inputs (to prevent DOS attacks). One of the things I like\nabout ", " challenges is that shortcuts just like this are\nexpected and normal \u2014 no error checking, no validation \u2014 with the focus\non computing against a well-formed input.", "I'm not sure if I understand your other questions, but I'll give it a\nshot.", " only initially equals ", ". The inner loop compares the current\npeak to every peak following it. The last peak has no peaks following\nit, so the inner loop is skipped that first time, just as you noticed.", " doesn't exceed ", ", so ", " is always valid. ", " iterates\nfrom the end backwards and ", " iterates forwards from ", " to the end, so\n", " has always been previously visited in the ", " loop.", "I see now. I misinterpreted the outer for loop.", "\nI ran you code to compare answers, and it gives me a weird result for the last peak sequence. It outputs \"1 10 13 14 15 16 18 21 43 45 49\". I can't figure out where it's getting the numbers from.", "Oops, it's printing the wrong thing at the end. It should be printing\nthe peaks themselves, but as written it's printing their indexes. I\nthink I had it printing both when I wrote it, then removed one \u2014 the wrong one \u2014 for the\nsubmission. At then end it should be this:", "Nice catch!", " New to python so any critique/suggestions are helpful.", "I really like that first line.", "functional python is the best", "edit: and most of the time it's been optimized to be faster than cheaper on memory than other methods", "I tried working through that, and I am really unsure of how it's working. I get that ", " keeps track of how many prior elements are less than ", ", but from ", " down is quite difficult to follow. ", "Make sure you understand what the tra array keeps track of.", "In case you wanted to figure it out yourself I'll hide the answer:", "Not used to reddit formatting so things might seem a bit wonky but hopefully my hint/explanation helps/is clear enough to understand.", " solution with a dynamic programming approach", "Edit: Added input and output since my outputs differ from the given ones.", "Dynamic solution. Procedure probably best explained with this table:", ". Filter any peak that is less than the first peak, as it can't be visited. Start at the last peak and work backwards. Build a set of all possible paths while stepping back through the peaks. Return the longest path.", "Input:", "Output:", "Edit: Simplified solution to reduce repeated work.", " ", "New to the language and rusty at programming so any input is appreciated. ", "Edit: realized my mistake in not including all possible starting points, working on a fix.", "Edit2: fixed", "Edit3: came up with a cleaner ", " more efficient solution:", "Golfed ", " in O(n", ") time.", "Output:", "\"... Ye'll tak' the high road and I'll tak the low road", "And I'll be on Everest afore ye...\"", "Because I'll be better conditioned!", "i'm a bit tired and this is a bit rushed", "algorithm: the ratio of the current peak to the highest peak must be lower than the ratio of the current peak index to the length of peaks", "This doesn't give you the longest paths possible though...", "thanks for correcting me. to be completely honest, i misread exactly what they wanted at \"maximizing your summits.\"", "it wastes alot of memory, but i'm still new to the whole algorithm thing.", "Go... New to Go, so if I've done anything egregious, let me know :-)", "Output:  ", ", very, very naive solution", ".", "I don't understand the challenges output. Why is it not in increasing order? I though we didn't want to go down peaks?", "Which output is not in increasing order? They all seem to be.", "The challenge output. \"1 2 4 6 4...\"", "Ah. Each line is to be taken separately, so ", " is the expected output for ", ", while ", " is output for ", ", etc.. If you don't see the input and output split into lines, there may be something else going on.", "Maybe I'm confused because I'm using the mobile app?", "That could be it, I don't know how the app treats code blocks.", "I don't see any differentiating line separations between different inputs. Thanks for insight!", "Running the risk of asking a stupid question, here I come:", "How's this not a simple sort and eliminate duplicates problem? Could someone please clarify?", "You can't sort because you have to preserve order. You can knock out elements but not move them around. ", "A naive and inefficient solution is pretty easy. An efficient solution is harder. I was hoping to spur people into discussion efficient algorithms. ", "This is the longest increasing subsequence problem, is all. ", "I see. Thanks for the fast reply :)", "The naive version as", "with the standard list monad powerset implementation and quick increasing/longest function works fine for all but the long input. I replace this with a custom path creator, which works for all inputs even when just interpreted:", "Find all legal paths, sort for longest/best ones... Uses no recursion (but adds new paths based on old ones for every loop iteration). Probably faster than recursive calls, because of no call stack.", ": Made two optimizations:", "Apart from less loop iterations this also leads to faster sorting (since shorter array) and no need to filter out duplicates later.", "However: While the first optimization made the code twice at fast, the second one made it three times as slow - continuously checking for duplicates is expensive using JS indexOf. : (We're talking 360 ms instead of 120 ms...)", ": Turns out that using indexOf is much faster when looking for duplicate numbers than duplicate strings... So I now convert to numbers for better performance - although it will only work safely up to a certain sequence length. (Time taken went from 360 ms to 80 ms.)", ": The last optimization. Followed Holophonist idea - now only building new paths from paths that are the longest once for a certain peak height... Reduced  candidates found for the longest peak sequence from 8798 to 25. (Time taken went from 80 ms to 20 ms.)", ", keeping a parallel list of how many peaks are above a given peak. So when traversing the list of potential peaks, a peak is added to the path if it's higher than the last peak in the path and if it has the highest number of higher altitude peaks in front of it.", "C++ backtracker :", "Output :", "The algorithm is more or less the same as skeeto's, but I did throw in some macros to make it more Lispy.", "Do ", " use the ", " macro in your own code, it's really bad and basically only works in exactly this use case.", "in J, finds all valid longest, (though a bit hacky: requires knowing length as iteration parameter)", "1 2 4 6 7 8 10 14 15 17 19 20", "This uses a recursive depth-first search that explores every possible path (starting from the beginning), and it displays the longest one.", "Input:", "Output:", "I took a different, and more complicated approach. It doesn't take a nice input from ", " though.", ". I set out to see if I could brute-force it, and I can ... with the exception of the last set of peaks. Apparently Python can't handle a range from zero to 2", " It probably wouldn't be very efficient if it could.", "Anyway, I'm only posting this because I was curious to see how compact I could make the brute force algorithm. As it turns out, the logic only takes about four lines.", "If you've written an O(", " ) solution to this problem, you might be interested in looking up \"longest increasing subsequence\" to find an O(", " log ", ") algorithm.", "As an intermediate step, there is an O(", " ", " ) approach which embodies most of the ideas of the O(", " log ", " ) solution.", " back to C++ after months. I quickly implemented a dumb solution, that tries every possible path using a recursive function.", "Wouldn't the first challenge output be 1 2 5 9 instead of 1 2 4 6?", "They both work, as would ", " and ", ".  There is no requirement that it reaches the highest peak at the end.", "Python 3 solution with numpy and recursion.  I don't know the algorithmic complexity.  If anyone does please tell me.  I also would appreciate suggestions.  The code includes some tests for special cases that hopefully improve the performance but aren't strictly necessary.", "Here is the function doing the work:", "And the code to get inputs and produce outputs:", "And the results:", "Edit: added inputs and output code", "Ruby.", "Psuedocode:", "Actual code:", "\nI'm learning Haskell to broaden my programming knowledge, My god, every time I write something in it, once I have got past the compiler errors, my program seems to be correct every single time. This is the least error prone programming language I have ever encountered. O(n", " ) running time:", "I tried doing it in c#. Just made simple recursion.", "I coded my solution in ", " using a dynamic programming approach.  After looking at some of the solutions below, my approach is very similar to Skeeto's.  I work my way from the back of the array of heights to the front so when I'm done, I can traverse forward printing out the peaks in the proper order.", "Solved this as a longest common sub-string problem - O(n", "Output:", "Note:  Edit to remove duplicate \"list of\" from comment for ordered_list", "In Scala:", "Python3", "This took me 12 days but I finally got it!!! First Intermediate challenge!", "Comments welcome: Made in Clojure"]},
{"score": "54", "title": "[2017-10-20] Challenge #336 [Hard] Van der Waerden numbers", "content": [". ", "Van der Waerden's theorem relates to ways that collections can be colored, in order, avoiding spacing of colors that are a defined length arithmetic progression apart. They are named after the Dutch mathematician B. L. van der Waerden. ", " can be defined as the smallest value where c represents the number of colors in the sequence, and k represents the number of elements in the arithmetic progression.", "In mathematics, an arithmetic progression is a sequence of numbers such that the difference between the consecutive terms is constant. For instance, the sequence 5, 7, 9, 11, 13, 15, ... is an arithmetic progression with common difference of 2.", " (W) are defined as the smallest arrangement of ", " different colors such that there exists an arithmetic sequence of length ", ". The simplest non-trivial example is ", ". Consider two colors, ", " and ", ":", "If we add a ", " to the sequence, we already have ", " at positions 1, 5 and 9 - a difference of 4. If we add an ", " to the sequence, we have an ", " at positions 3, 6 and 9 - a difference of 3. There is no way of coloring 1 through 9 without creating a three step progression of one color or another, so ", ". ", "Adding a color - ", " - causes the value to jump to 27; adding a length requirement to the arithmetic sequence - ", " - causes the value to increase to 35. ", "Van der Waerden numbers are an open area of research, with exact values known for only a limited number of combinations. ", "Your challenge today is to write a program that can calculate the Van der Waerden number for some small values.", "You'll be given two integers per line indicating ", " and ", ". Example:", "Your program should emit the Van der Waerden number ", " for that input. Example:", "I had a little trouble understanding Van der Waerden numbers. I think it's clearer to say that ", " is the smallest number ", " so that if you color the numbers 1 to ", " with ", " colors, no matter how you color them, there will always be at least ", " numbers of the same color in any sort of arithmetic progression.", "Well, a little googling revealed that this is definitely a hard problem. There are only ", ", and every one of them was worthy of an academic publication. Indeed, the ", " involved some serious compute power. From the abstract:", "There was even a ", " to work on the problem. It improved the lower bounds on many of the numbers, but hasn't found any new ones.", "I'll probably be giving this one some thought this weekend. Will be interesting to see if people come up with some clever methods.", "7 known values excluding W(1,k) and W(r,2), which are quite simple. I was surprised to read that this was such a hard problem.", "This one would deserve a fourth challenge category to be created ;)", "A simple backtracker that searches for a Van der Waerden number lower bound.", "If the program exhausts the search space then we can say that W(c, k) = lower bound+1.", "Can complete the search for 3 values of W only (almost instantly):", "Finds the optimal lower bound for W(2, 5) = 177 after a few seconds.", " Search completes in 7m40s for W(2, 5).", "But the challenge input is out of reach for this program.", "Avoids to test similar patterns, for example (0100 and 1011), but crashes at high level of recursions (due to stack overflow, maybe I will implement an iterative version later).", "Nice job! :-)  My solution hits the same wall, and it's about 67% slower than  yours.", "Thanks, I checked your solution and we have very similar algorithm and search space reduction technique.", "I posted a slightly enhanced version that checks arithmetic progressions for all possible colors at once, but no major breakthrough, still takes 6 minutes to compute W(2, 5).", "W(2,5) is 178 not 177...", "W(c, k) = lowerbound + 1", "Ok, in reading the ", " referenced in the challenge, perhaps a better and more tractable problem is for each value of ", " and ", " to find a longest sequence which does not have any prohibited subsequences.", "For example, for ", " find a sequence of length 1131 consisting of two colors which does not have any mono-chromatic arithmetic progression of length 6. This would prove that ", " >= 1132. However, proving that ", " is entirely a whole other problem.", "Rather mean challenge. W(2,5) already takes some time to calculate and a non-trivial amount of memory ;)", "I'm super late to the party but this seemed like a fun one so I had to give it a go. While I don't think I'll wait the hours needed to validate the challenge results I'm still pretty happy with my performance (2.5min for W(2,5)) even if it's not pretty. EDIT: Apparently swapping list to vector in the nodes for storing progression ends reduced the time for finding W(2,5) to about 1:55. Using the more apt data structure is apparently beneficial, who knew?", "Code is available ", ". Description:", "Some results (minus times for all partial results):", "Yeah the data structure used for the sequence collection is very important.  So is DFS and (for 4+ color problems) search space limiting.", "I am surprised that your 3,3 time is as big as it is, but it looks like your program has an initialization cost that is very significant. I'd expect this program to find 4,3 in 12-16 hours if you let it run and 3,4 eventually. ", "2,6 is a different beast though and requires far better search space restrictions (counting to 2", " is not going to happen). I have a few (not implemented in my version here) which remove the vast majority of the search space but still I'd estimate the runtime in the order of several millennia. I don't have access to the paper describing the hardware used or the various optimizations but that feat is more and more impressive the more I look at the problem.", "I think the reason it was so slow for the smaller ones is that the version timed printed the time and iteration it reached a new best depth. Without that the ", " performs like so:", "I've been toying with the idea of using dynamic programming to try to re-use the ends of the sequences, but I'm starting to think that's not feasible/useful. Other than that I'm having a hard time finding ideas that might decrease computation time without exploding memory usage.", "for 2,6 so far I've:", "Number 2 reduces the search space to about 2", " and the others should limit it significantly more, but the search space is still too large to search without an HPC.", "I'll admit that I'm unsure as to how most of that would work/help at the moment, I'll have to think on that some more to see if I can figure it out :)", "Anyway, I think that one of the grid-computing projects has a bit of info available ", ", it seems like a radically different approach.", "I also got around to running W(4,3), it was actually quicker than I'd expected.", "Congrats on the 6:40 time. That is twice as fast as what I was thinking.", "The vdwnumbers.org project was searching for lower bounds but not attempting to prove any exact numbers. That is a much simpler problem because you need only to find a sequence of a given length to demonstrate that the lower bound is that length.", "For example the 2,13 number could be exactly 1,642,310, but we can only demonstrate that it is at least that large. We can show this because powers of 2 mod 136,859 can be used to generate a sequence that is 1,642,309 units and doesn't have a progression (I think ", " paper is the exact mechanism they were using in the grid project).", "Go, simple iterative deepening recursive search.  Solves W(2,3), W(2,4), W(3,3) very quickly, and W(2,5) very slowly (14 minutes)... Could theoretically could solve the challenge ones in obscene amounts of time.  Prints partial results thanks to iterative deepening.", "Some results:  ", "Whenever I think of Go I think of goroutines and channels. I noticed you didn't use them. It would be a useful optimization (greatly reduce runtime) if you considered having 2 goroutine types: sequence generator, validator workers.", "With little alteration to your algorithm, have your generator pass the sequences generated to the validator and aggregate the results. You can then validate #cores sequences simultaneously.", "However, this is not what dominates the time in your solution. If I understand your algorithm correctly, in generating sequences to test for depth 9, you also generate all the sequences of depth 8. You've done that once before, why do it again?", "An optimization is to take the results of your efforts on early depths and store them in a queue. This queue is then used to seed your sequences of the new depth. As an example, if ", " passes through your validator at depth 8, it goes into this queue. At depth 9 you pull it out and generate 4 new sequences: ", " at the start, ", " at the end, ", " at the start, ", " at the end. If any of these pass, great, they go back to the queue. If they fail, then you discard them.", "If, at the start of a depth, your queue is empty then you have your answer (that depth).", "This is a two core CPU, so I imagine I could get about double the speed, yeah.  The problem's difficulty scales so much worse though, that it doesn't make a whole lot of difference... I still wouldn't be able to solve the challenge problems in a reasonable amount of time.", "Two thoughts.  ", "I don't need to generate a complete list of valid no-arithmetic-sequence-sequences in order to discount a length -- I just need to generate one.  That's true all the way up until the actual number, at which point I need to test ", " the sequences to prove there isn't one without an arithmetic sequence.  ", "Take W(2,5) as an example.  ", "If I were keeping a list of all valid sequences of length n-1, it's just moving the time consumption earlier in the problem because I'd have to fully search every depth to generate that list.  I could probably find W(2,5) > 177 faster though with smarter ordering of the values to try.", "The other thing is I don't know how many sequences of length 100 there are in W(2,5), but it's a lot... you'd probably become memory-bound very quickly.  Since this is depth first and doesn't rely on caching, memory usage is proportional to the depth of the search, not the breadth. I just let it start on W(6,6) and it's already chewing on sequences several thousand long.", "EDIT: further thoughts --", "I don't see why you'd have to add to the front or end of a sequence from the previous length -- to the end should be sufficient", "Probably answers are going to have roughly equal count of colors, so trying least-used colors first might push more likely candidates to the top.  I might have to try that.  Or trying the last-used color first.  It won't help at all with finding the final answer though, as AFAIK, it still requires an ehxaustive search.  But it could get to the vicinity of the answer much faster though...", "Edit #2:", "Tried a few simple move ordering techniques, and none of them were particularly effective.  I can think of a couple more involved heuristics that could potentially help, may investigate them later.  A best-first approach might get to the lower bound faster... if I had a better understanding of what makes sequences good or bad.  Logically you could base best on the lack of unterminated n-1 length sequences at the leaf, but it's entirely possible that to get to the lower bound, you want to do the opposite, pack in as many unterminated n-1 sequences as possible.  I just don't have a good enough feel for it.", "Unless the sequence is a palindrome, you will get a different effect when adding to the front and end. Suppose at depth four you've got ", ", you want to add a ", " to it. ", " and ", " are two different sequences. In this case, though, you don't need to add ", " to either end. Since the sequence ", " and ", " are the \"same\" when you compute the inverse (", " -> ", ") and reverse (", " -> ", ").", "Ah, I see.  I'm not considering reversing a sequence in my code, so I'd simply be examining two separate sequences that happen to be reversed, in which case I don't need to add to both ends. I'm not sure checking for all transpositions is faster than simply generating them separately.  When c > 2, transposition checking would get ugly.", "\nI am removing some transpositions by forcing the first color to be 0, the second color introduced to be 1, etc.  Since all additions are on one side, that should remove the non-reversing transpositions.", "Aside from a few minor changes I had this all written 3 days ago... ", "OOM exceptions and reasonable considerations over the weekend that some solutions were going to take a ", " to find, I've come up with a few improvements.", "features:", "code: ", "output (now including first result from the actual challenge):", "I'm a bit confused by this so I'll try to clear things up.", "With the input W(2,3), we want a sequence of 2 colours where ", " colour has an arithmetic progression separated by ", " 3.", "B R R B B R R B is the longest sequence possible with 2 colours that ", " have a progression of 3.", "W is the smallest sequence of r colors where we are forced to have an arithmetic progression of length k of one color.", "In W(2,3) there are ways we can arrange a sequence of 8 colors to avoid having any arithmetic sequence of length 3. In 9 colors this is impossible so W = 9.", "I think the result is the smallest length you are forced to have a sequence of 3."]},
{"score": "61", "title": "[2017-10-18] Challenge #336 [Intermediate] Repetitive Rubik's Cube", "content": ["Write a program which, given a series of moves, outputs the number of times that sequence must be executed to reach the original state again.", "A space separated series of movies in the official ", " will be given.", "Summary (from ", ")\n* There are 6 faces. U (up, the top face). D (down, the bottom face). L (left). R (right). F (front). B (back).\n* Each face is turned like you were looking at it from the front.\n* A notation such as X means you turn the X face clockwise 90'. So R L means turn the right face clockwise 90' (from its perspective), then the left face clockwise 90' (from its perspective).\n* A notation such as X' (pronounced prime) means you turn the X face anticlockwise 90'. So R U' means turn the right face clockwise 90', then the top face anticlockwise 90'.\n* notation such as X2 means you turn the X face 180'.", "Example (each line is a separate challenge):", "The output should be the number of times you have to execute the input sequence to arrive at the original state.", "This challenge was suggested by user ", ", many thanks! If you have an idea for a challenge please share it on ", " and there's a good chance we'll use it. ", "Solved by computing the cycle decomposition.", "Code available in ", " and ", ".", "(Haskellers note... I found a cool use of ViewPatterns to simplify the parsing logic.)", "The source also contains solutions for the other other two Rubik's Cube related challenges that have appeared here on ", " -- ", " and ", ".", "Combined output of all the challenges:", "Your Haskell/JavaScript solution in Rust:", "Only one mut in the whole program. It isn't optimized for performance, it's two times faster the Haskell version. Doing functional programming in Rust is a bit painful.", "Nice! I should give Rust a try.", " using permutation tables I stole from ", " in a ", ".", "This is basically cheating, but I wanted to highlight a great little python library: ", ".", "Not sure if you\u2019ve looked into the new string formatting, but it\u2019s worth checking out if you haven\u2019t. The \u2018%\u2019 placeholder notation will probably end up deprecated at some point soon, and the new .format() method is pretty powerful.", "Also, stuff like this makes me simultaneously love python and find it to be almost annoying lol. It\u2019s just too easy sometimes.", "Thanks!  I've glanced at .format() but didn't realize that '%' was going to be deprecated, I'll have to go update some things.", "Yeah, like I said that solution is basically cheating, but as programmers a huge part of being efficient is utilizing preexisting tools, and python has SO MANY tools that can be implemented so easily, its nuts.", "Yeah there definitely are a lot of great ones. I feel like eventually we're just going to have the Problem library.", "And then we can just use that one every week!", "You joke, but...", "For testing, your edification or just curiosity, here is a sample list of short moves and their orders:", "Also... a fun quote:", "C, very inspired by ", "'s submission but stores the sequence in one transition instead of a sequence of faces.", "Brilliant! This is very much a \"Why didn't I think of that?\"", "Your nice C solution converted to Rust (about 20% faster?):", " \nThis uses a ", " that I have developed for researching permutation puzzles. It can also solve many simpler Rubik-like puzzles (not Rubik Cube though). ", "This challenge amounts to finding periods (orders) of the permutations given by a sequence of Rubik moves. The algorithm to find permutation order is quite efficient: when the resulting permutation is expressed in cyclic notation, it's order can be calculated as the ", ".", " \nSlightly simplified version:", "C", "Brute force. Do each move from sequence on cube. check if cube is back to original or not. Not the most efficient way, but it works. If performance was an issue, then after going through the sequence once, you could construct a map that composes the entire sequence into one move, and then iterate over that. ", "Not the prettiest, and probably not super efficient, but it seems to work.", "Python 3.6, brute force method", "I used the brute force approach and represented the cube as small cubes of origin and orientation. Lots of code because I made a whole class out of it.", "Using an permutation array for each face/move type.", "Implements the combined move idea from ", ", what is called \"super move\" in my program.", " ", "\nNothing pretty, but it works!", "Looks similar to some other solutions already posted, but uses ", " to do all the heavy lifting ... pre-computes the translations once for each face, then combines the given sequence of moves into a single translation, then repeatedly applies it until we're back to a \"clean cube\" ...", " Danger, linear algebra hazard.", "You might want to up the limit here:", "An element in the Rubik's cube group can have an order as high as  1260, e.g. for ", ".", "Java", "Output", "I coded my solution up in ", " also using the permutation arrays from ", " as others on the thread did.", "I have an idea for a composite or so-called \"super\" move that I'd like to implement if I have the time.", "Here's the solution:", "OK, I made a small tweak to the code to create a composite move after applying all of the moves one time.  I continue making the composite move until I reach the initial cube state.  Fun challenge!"]},
{"score": "73", "title": "[2017-10-11] Challenge #335 [Intermediate] Scoring a Cribbage Hand", "content": [" phase of gameplay only. Each player's hand consists of 4 cards and an additional face up card. During the show round, each player scores points based on the content in their hand (plus the face up card). Points are awarded for the following:", "Note: cards can be used more than once, for each combo", "Your program should take an array of 5 cards, each card will be designated by a rank: 1 (Ace) \u2013 10 and Q-K as well as a suit: Hearts, Clubs, Spades and Diamonds. The first 4 cards are the cards in your hand and the final card is the additional face up card.", "Your program should output the score of the hand", "This challenge was suggested by user ", ", many thanks! If you have a challenge idea, please share it in ", " and there's a good chance we'll use it", "Does an ace count as 1 (lowest) as well as highest?", "Ace in cribbage is only 1", "Similarly, can a run \"wrap around\"? For example: Q-K-A?", "No", "Edited to add test results for a bunch of hands from this thread:", "Your Haskell code in Rust with few changes:", "A little faster than the Haskell version, but it's not designed for performance. Beside two new or different functions (are_consecutive, subsequences) that needed some testing, the rest of the code run correctly at the first successful compilation.", "Edit1: I've modified the parsing parts, now this code is less sloppy compared to the Haskell code. All unwraps are in the main function.", "Edit2: added a Gray Code iterator to create a much faster score_fifteen_twos() function. Now it's more than twice faster the Haskell code.", "I thought it made things easier to make real card objects and calculate all combos... After that the rules for scoring points were rather easy to implement.", ": After reading the challenge instructions I understand \"cards can be used more than once, for each combo\" as \"if you have a run of 4 you automatically have two runs of 3 as well\" etc. But ", " according to the rules - only the longest possible run counts... So I changed that.", ": Now handles double runs, triple runs and double double runs. This page explains it nicely: ", "Here are som interesting test cases for double runs etc. Also see:\n", "These cases are calculated correctly.", "Ran it against gabyjuniors test cases as well, my result differed on ONE of the cases...\n", ": read the rules and changed my code, now we have the same results...", "Quick notes: in fifteenScorer, the parameter s seems to be always 0 at any call. Maybe it's unnecessary? Also, the arr param will copy that vector with every call. It would be better to use a const ref instead of passing by value.", "The name \"faces\" for one of the vectors was confusing, since every other vector (\"values\", \"suits\") was named after the Card field they were accumulating. Why did you break out each field into its own separate vector? It seems you could have just as easily iterated over the Cards themselves, accessing each field when necessary.", "The raw array as argument to cribbageScorer is probably not the best idea, because of the legacy C decay-to-pointer behavior. Typically std::array is the drop-in replacement for C arrays whose length is known at compile time (here, 5).", "Finally, in the Card constructor, I believe it's ", " more efficient to use initializer lists when you can instead of explicitly setting suit and name inside the function body. Also, everything's public; it may as well be a struct.", "Overall, though, it's pretty clear and readable. Nice!", "Thank you so much for your feedback! The reason I broke up each field into a separate vector was because I figured out how to determine the count of each attribute through accessing only the Card objects. With the vectors it makes it a one-liner otherwise I'd have to through in something like:", "I was unsure which would be more efficient so I just opted for the one-liner instead. ", "For orders I couldn't figure out a clean way to do it without sorting them first. ", "Good point with orders. Did you know pointers are iterators (if they point to a contiguously allocated array of objects)? So you could do", "(note \"hand\" the array decays into a pointer)", "Note: I'm in love with <algorithm>, so ...", "I thought this too initially. For some reason (I\u2019m not sure exactly) it was adding the 2 twice for every 15. I just wanted to finish so I changed the += 2 to += 1. But I\u2019ll check exactly why that is happening. ", "Doesn't this have a bug when checking runs? I admit I haven't run the code, but it looks like ", " (after the sort) will return a single run of 3 rather than 3 runs of 3.", "Also it looks like ", " won't score a run at all, where my understanding is that would be 4 runs of 3.", "Maybe I missed something. ", "I really like your nice and clean 15 counter, and frankly I think that trick is something I shall add to my toolbox of tricks.", "Ohhhh I didn't realize that was the rules. I figured that a ", " would be a single run not 3 runs. I'll fix that now", "Ended up adding this function to program to accommodate this set of rules:", "EDIT: The reason this looks sort of weird is because I tried to make this function recursive but then just decided to do it how I originally did. ", "This doesn't work for my other example of 3 3 3 4 5, which you will score as 4 x 3 for 12 points. Funny thing is that I had made the same mistake in my submission, which ", " helpfully pointed out for me.", "So my own code didn't work with the example I gave you. That's embarrassing!", "It worked for your example when I ran it. It scores it a 21. ", "Sorry, I meant my other example of 3 4 4 5 5. I'm too tired and was busy kicking myself for stuffing up 3 3 3 4 5 in my own submission. Looking at the code again though, it might actually work, but in a convoluted way as you would add to the score twice.", "However, I don't think 3 3 4 4 5 would work out as 4 * 3.", "Code:", "Output:", "You mistake the values of face cards.  They are all 10, except aces which are 1.  Pairing the 5 with each face card gets you three sets of 15.", "Oh, did not catch that, used to them being 11,12,13 :p ", "edit: fixed now", "Why import note instead of using Arrays.toString? You already had arrays imported.", "Note is just my own little library that handles array printing & normal printing in one go, I just hate writing Arrays.toString(arr) :P", "Can your ", " function return 6, 9 or 12? It should be able to.", "Guessing you mean duplicate number-cards, like 1,2,3,3 which should return 6?", "Yeah I didnt think of that edge case", "Would you explain how you calculate runs please?  Can we be sure this function calculates it properly?", "We can be sure it does not do so.", "It does do the fundamental thing (mostly) correct", "It goes through the sorted list of cards (sorted by card type, so A(1),2..10,J(11),Q(12),K(13))", "And simply finds the longest unbroken chain where the current card is equal the previous card + 1", "but as ", " has pointed out, it does not take into accounts having multiple of same value (fx 1,2,3,3 would be 6 runs points)", "It would also fail on 1,2,2,3 as it would think the streak has broken on the 2's", "Would you explain how", "your haikus are created?", "Because they are wrong.", "Write a proper Haiku bot.", "Looks like it's just counting the number of words.", "Bad bot", "Thank you i3aizey for voting on I_am_a_haiku_bot.  ", "This bot wants to find the best and worst bots on Reddit. ", ".  ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "We must think alike, I wrote almost the exact same program, followed the exact same logic for each method and had the exact same error for finding runs. Only difference, I didn't use streams for handling input, do you find using streams better?", "I find streams really useful for parsing simple input strings, can recommend :) ", " using standard input/output", "I mostly went for brevity over readability but I wanted to at least split it into functions.", "Can your ", " function return 4 or 8? It should be able to.", "Also, ", " should be able to return 6, 9 and 12.", "Edit: removed 8 from possible values of runs.", "Let's see.", "About pairs, I think I overlooked the possibility of having multiple separate pairs. That is, you could have two pairs or a full house (a pair and a triplet). I assume those would be worth the 4 and 8 points respectively that you mentioned.", "Though I'm not seeing how ", " could return more than 5. If your hand already contains a run of 3 or more there is no way for the remaining cards to form another run of sufficient length. Unless runs that are part of a bigger run are counted separately, in which case the only possible returns would be 3, 10 and 22, which seems unreasonable. Where do you get 6, 8, 9, and 12?", "See ", " -- search down to \"Scoring runs in hand\".", "I see, so different cards of the same kind can be counted separately in the same run. That's a bit obscure but I guess it makes sense if you know it.", "Shouldn't a hand such as [2, 2, 3, 4, 5] return a score of 8 for runs()? As you'd be doubling two runs of 4... Or am I misinterpreting the rules?", "You're right. I confused myself on the case of 8 points.", "Python 3.5", "Your ", " function returns too many runs for ", ".", "Also, you should return either 4 or 5 points for a flush.", "Ok thanks! I've fixed them both so they only return 1 value.", "Ok - now the problem with ", " is that it can't return 6, 9 or 12. See ", " for scoring runs - search down to \"Scoring runs in hand\".", "So ", " returns 6 and ", " returns 5? Should I be counting sub-runs inside bigger runs so that a run of 5 counts as 25 (1 run of 5 + 2 runs of 4 + 3 runs of 3)?", "Yes.", "No.", "Alright, I've finally done it. A run function that returns the right values.", "I'm a noob and couldn't figure out how to check combinations for 15's so I used ", " 's solution; very slick, many thanks!", "Code:", "Output:", "Note that in real cribbage the point values of runs can be 3, 6, 9 and 12.", "Okay, I think I understand what you mean.  I've updated the runs function and added some extra test cases.  You mentioned 3, 6, 9, 12; but can runs be worth 8 if there are two sets of four, as in my 5th example?  Good catch, thanks!", "Yeah - I was being too cautious on the 8 case -- a double run of 4 would yield 8 points.", "C++17. Since cribbage hands are 5 cards, I figured it was easiest to enumerate the 32 possible sub-hands, calculate the points for each, and add them up. There's a subtlety in that some runs and flushes get double-counted that way, which explains the somewhat strange choices for values in the score function.", "The power set implementation is the classic recursive style. Also, there's like zero error-checking throughout, especially on inputs, and to make card representations uniformly two characters, I subbed 'T' for \"10\" as the shorthand for ten.", "Feedback always appreciated. Creating a Cribbage object starts an input loop which will accept new cribbage hands until return is pressed on an empty line.", ": Fixed an issue where runs where not being calculated correctly. Now handles all runs (doubles etc.) according to the rules ", " (runs can be 3,4,5,6,8,9 or 12 points)", "Output (from irb)", "The points for runs can be 3,4,5,6,8,9 or 12 points. See ", " -- scroll down to \"Scoring runs in hand\".", "Fixed! Thanks for the comment. ", "Gives the expected result for this post samples and the ", ".", "Fixed issue computing adds up, detected checking the hand that gives the highest score possible, which is an interesting test case:", "5H,5C,5S,JD,5D (29 points)", "Results", "Thanks for the test cases above... I ran them and got the same results as you except for one case:", "As I (and my program see it):", "I guess the difference is that you don't count runs of 3:s if they are part of runs of 4:s? I do because that's how I interpreted the \"\"cards can be used more than once, for each combo\" instruction... ", ": Read the rules and changed my code you were right according to the rules... (The instructions for the challenge are unclear here...)", "Thanks for the feedback, I am glad our results match :)", "A program which announces the score the way I do... if pairs are part of a double or triple run they are included in the points for the run and not announced separately as pairs.", "E.g., for the card ranks: ", " you would simply announce a double-double run and peg 16 points since a double-double run implies there are (exactly) two pair. Likewise a triple run is automatically 15 points (3x 3 for the runs + 6 for the three of a kind.)", "The guts of the logic is in the ", " function.", "Sample output:", "Code:", " This is my first time submitting.  I need to work on my problem solving so any feedback is very welcome!", "Here's a Javascript solution:", "Output:", ":D Amazing how two solutions in the same language can be so different (mine and yours). I haven't checked your results in detail, but it's just fun to see two different approaches and styles. :D", "One question - why \"var\" sometimes and \"let\" sometimes?", "Ah - the first ", " was just habit. I'm trying to use ", " exclusively now.", ":) Same here.", "Card hands from lgastako's Haskell program using command line: crib\n<crib.dat There are two discrepancies in the results. Some minor changes\nwere made to XPL0 to accommodate this challenge (which are available upon\nrequest).", "Example output:", "I've been looking for a place to use itertools.chain, so this was a pretty fun challenge.", " ", " ", "Firstly I just wanted to say a big hello to everyone on ", ". I've only just become aware of this subs existence and wanted to jump straight in. So congratulations challenge #335 you're my first challenge!", "Oh also TIL the array functions map, reduce, filter... and thoroughly abused them :)", "I also ran ", "'s inputs as I note a few others have (", ").", "Feedback is welcome.", " Thanks to ", " who picked up a scoring issue. Now corrected.", "A double-double run is worth 12; a triple run is worth 9.", "If you include the points for the pairs you get 16 and 15 respectively. Experienced cribbage players will announce a \"double-double run for 16\" because a double-double run implies two-pair, and similarly a triple run implies there must be a 3 of a kind.", "Thanks for that ", ". I've adjusted the points accordingly. Don't think I'll bother folding up implied scoring in the summary. Interesting problem in itself I guess. ", "How about some ", "  ", " it comes to my attention that double and triple runs are a thing, thanks to ", ". Hence, my use of ", " to set-ify the hand leads to missing those extra potential runs. I'll try to fix it when I get around to it.", "Python 3.6, everything seems to be working except for runs as I dont really understand how they work. I'll look into it when I have some more time.", "To count runs...", "Example: if you have 2 2 3 4 5, then the longest run is 2 3 4 5 and there are two ways of making that run since there are two 2's. Total run points = 8.", "My solution. I chose to break the scoring out into individual functions, this means that the hand must get read multiple times and the code is ", " longer. I did this because I think it is more readable and frankly don't care about reading 5 cards multiple times.", "Feedback welcome!", "In ", " the ", " can be 3 in certain cases. That is, it is possible for the run points to be 3, 4, 5, 6, 8, 9, or 12 points.", "Ooh, good catch. For those following along at home, the multiplier is the case of double runs. 3H 3D 4C 5C KC for instance will have 2 runs of three (3H 4C 5C and 3D 4C 5C). So the count is 3, with a multiplier of 2, for a score of 6. \n3H 3D 4C 4S 5C would have a multiplier of 4, so 4 * 3 for 12 points. However, if the hand was 3H 3D 3C 4C 5C, it would be a multiplier of 3 not 4, for a score 9.", "Just learning Ruby.", "Does the sample output data correspond to the sample input data? Because I can only see one fifteen and no runs in the first example, but apparently there are three of each.", "Also, which card is the face up card for nobs?", "Edit: If the face-up card is a jack, does that make it a nob?", "Thank you! That explains everything :)", "Java", "Output", "Real cribbage allows counting of the longest run multiple times if there are multiple ways of forming it. E.g. 3 4 4 5 9 is a double run of 3-4-5 since there are two 3's. See ", " at the section \"Scoring runs in hand\".", "Didn't realise there were double, triple and double-double runs. Will update. Thanks", "Updated : double, double-double and triple runs now catered for.  ", "In ", " note that ", " is the same as the function c -> c*(c-1).", "Also, although not explained very well,", " should be able to return 3, 4, 5, 6, 8, 9 or 12. See any of my other numerous comments here for details.", "Thanks for the clarification on scoring runs! Should be fixed now", "Scala.", "Edit: updated to match the rules explained by mn-haskell-guy below. ", "The rules for runs wasn't very well explained, but cribbage allows you to score for each way of making the longest possible run. Thus, the score for ", " should be 15 -- 9 for 3 ways of making the A-2-3 run and 6 for the three of a kind.", "Thanks, that makes sense. I've updated the code. ", "Rust - new to the language, would love some advice :)", "Edit 1: ran against gabyjunior's input - fixed small thing - added output as total score", "Kotlin:", "Reworked my submission to ", "Live link on ", "For ", " the points for runs should be 12.", "Fixed!  Thanks for finding that bug.", "Well, for ", " the run points should be 9 (three ways of making A-2-3, so three runs of 3 = 9 points.)", "Dang it, stop that!  Just kidding, I ", " I've got all of the situations accounted for now.  Its a pretty quick band-aid but it gets the job done... ", ".", "For 5-card hands I think your code will work.", "Tried a different spin on the solution design :)", "Unfortunately the rules for scoring runs was not explained very well.", "In cribbage you can score for every possible way of making the longest possible run. For instance, for ", " the longest run is 9-10-J-Q and it can made twice since there are two jacks so you score 8 points.", "Another problem is that for cards ", " the cons rule evaluates  to 4, but the longest run is only 3 cards.", "oh didnt notice, ill fix it up..and read up the cribbage rules too", "Python 3.6, using classes. ", "Hm, after reading the rules I think the challenge is down right wrong and lacking in its description \"cards can be used more than once, for each combo\" (they can't for runs - only for 15:ths according to the rules). Also the rules have different scoring for \"double runs\" which aren't mentioned at all in the challenge.", "What is the exact wording of the rules you are referring to?", "I think the scoring for double and triple runs is compatible with \"cards can be used more than once, for each combo\" idea.", "For example, with the cards 10S 10C 10D 10H 5S, the 5S may be used in each of the combos for 15: 5S + 10S, 5S + 10C, etc. and hence is used \"more than once.\" Of course, the 5S may only appear once in each combo.", "With the cards: 2C 3C 4C 5D 5H, there are two 4-card runs:\n", " and ", ", and the club cards are \"used more than once\", but only once within each run.", "Well I don't understand why you shouldn't be able to automatically break down any 4-card run into 2 3-card runs if the cards may be used more than once. And on som Cribbage site I read \"that would be reasonable in a way, but 'you just don't'\".", "The rules are fine, the challenge description a bit more muddy."]},
{"score": "63", "title": "[2017-10-23] Challenge #337 [Easy] Minimize & Maximize", "content": ["To make this more of a programming challenge rather than using programming as a calculator, I encourage you to try to find a generic minimize/maximize function rather than just calculating the answer directly.", "The accuracy of these answers will depending how much precision you use when calculating them.", "This challenge was adapted from ", ". If you have an idea for a challenge please share it on ", " and there's a good chance we'll use it. ", "How can I get good at these.....", "So the problems here are listed as \"easy\" but if you have no programming background they are still going to be way above your level, at least to start. The challenges here are also more self directed / about process rather than result.", "To git gud, I would recommend getting programming experience if you don't have it already - there are numerous online courses or curriculums to follow, but if you're lost, this may not be a bad place to start ", "Then try some challenges on leetcode or hanker rank - they are generally easier to understand, have rigorous test cases, and are small in scope. Good luck!", "On the contrary - it isn't a question of your programming background.  It is more of a question of your math background.  If you know the math, you can do the programming regardless of your level.  If you do not know the math, knowing where to start becomes difficult.", "This doesn't seem like a programming challenge at all to me, unless you write a general purpose math engine to solve it or something", "You don't need a general purpose math engine to do these problems.  Ideally, when you do min/max problems it involved taking derivatives, finding the zeroes, etc, etc...", "You are not being asked to do this for this challenge.  It is a lot simpler than you think.  I am sure you are familiar with pythagorean's theorem.  You can just loop over calculations and when the numbers start getting bigger, you have approximated your minimum.  ", "All that is needed is basic algebra, basic geometry/trig, and a little bit of thought in order to create a general solution to generate either the max or the min values.  That is where the programming challenge is - in creating the general solution.", "Yeah, I guess that looking over the answers now, I can see how this is sort of programming-related.  I looked at the problem and saw that there'd be some reasonably doable way to solve it entirely with algebra, then decided not to bother.", "It looks like the algebraic method is a huge pain if you don't use a graphing calculator or Wolfram Alpha or whatever, so I guess the intention was to get people to find an answer using Newton's Method or something.", "True, for this particular problem. He said \"these\" though, so I generalized my answer for all of the programming challenges that get posted here, and most aren't this mathematical in nature and have more of the programming focus.", "Lately, so many of these challenges have been either math-oriented or just plain annoying that it's been months since I even did one. I actually like my project manager's tickets better. :|", "There has been some definite difficulty-creep over the years. It wasn't so long ago you could count on the easy problem to use an unfamiliar or esoteric language. Participation and language diversity has been in decline and in my opinion, it's largely because of the difficulty of the easy problems.", "What sort of problems would you like to see? It's been a long time since I came here regularly (and I've never posted my solutions on a regular basis) so I'm not sure what changes in particular may have happened.", "In my mind, what makes a good \"beginner\" level problem (which, in my opinion, is what used to pass for an \"easy\" problem here--and I hold that this was the ", " intent of the part of the description that says, \"For learning, refreshing,\" etc... Although the last time I brought this up someone said, \"No, no, this is for learning ", " programming, not just learning programming...\" Whatever.)...", "...A programming problem at this level should be a ", " that can be understood without specialized background knowledge, but also one with a ", " that may require significant effort, particularly on the part of a beginner.", "What I usually see here is what I have repeatedly called a \"math riddle.\" I'm not paid to do math riddles; I'm paid to write financial software. You (well... \"you\" being the imaginary person who thinks that a math riddle is a good programming puzzle?) would be fucking astonished how little math is actually involved.", "I didn't realize the posts like today's were becoming more common. This one could've been a more useful ", " problem if it had laid out a particular optimization or solving routine. Like Newton's method paired with some input format like: solve a polynomial using Newton's Method (described here). The input will be:", "Example:", "Where the polynomial expression is equivalent to: ", ".", "It's still a math problem, but it's not so open ended as today's. And by giving a particular method to use it helps programmers without the math background to have something they can immediately grab hold of. As a challenge you could have them use other solvers or accept more complex equations.", "I guess I should dig up my old list of problems I wanted to submit. I had written them up to be a series that could run MWF, progressing from the solutions to the earlier ones. Those, I think, are a good format for this group. I may have it on a backup disk at home.", "Thanks for the feedback, I'm new to submitting dailyprogrammer problems.  I misjudged the difficultly level / math required here, that's my bad.", "Here are my thoughts (for clarification, not argument):  My aim for this challenge was to have the submitter write some kind of optimization routine, given a function input.  ", " is a good example.  That way, there is more of a programming approach rather than getting a single answer for each problem.  I understand these two in particular have closed-form solutions, but there's not really a way around that.  I also felt like having them as a word problems instead of find the minimum of ", " would make them more accessible, more like requirements a programmer might actually get.", "That being said, I totally understand frustration with mathy type problems, I'll try to stay away from those going forward.  I'm always looking for new ideas, especially beginner ones because those are tougher to gauge difficulty for.  Please do submit any ideas you come up with to ", "!", "Again, thanks for the feedback.", "I'm writing up a few potential submissions. I couldn't find my old ones. I suspect they were on a laptop that died and I never bothered to recover.", "Overall I think this submission makes a good kernel for a series of problems for this subreddit. But the problem (for me) is that it's not ", ". An easy task should walk the reader through a large part of the problem. Not necessarily handholding, don't tell them precise data structures or anything. But a high level overview of the algorithms involved. So my take on today's problem would be to make it into 3 problems (I'm writing this up now).", "1) Have the submitters compute the derivative of a polynomial (with non-negative, integer powers). It's a straightforward math problem, but we'll walk them through the algorithm in case they haven't had calculus. They'll have to handle input/output, and decide how they want to store and process polynomial equations.", "2) Have the submitters implement  Newton's Method, and use it with (1) for the purpose of finding the roots of the polynomials (Newton's method requires having the derivative). Challenge: It turns out we can approximate the derivative using the initial function and computing ", " and ", " where ", " is small. Use Newton's method with an arbitrary (non-polynomial) function such as ", " and see if it's reasonably close to your solution with the actual derivative (", ").", "3) Optimization. Given an arbitrary, differentiable mathematical function on one variable, find the value which maximizes the function's output. Any optimization method is appropriate. If you've implemented Newton's method and the derivative method from (2), they can be used to solve this. (Here we'd present the particular examples that you provided as specific problems for them to solve, but leave it open for them to add their own.)", "And of course with (3) we'd expect people to make use of automatic differentiation libraries and symbolic differentiation libraries in some solutions. Others may use brute force if they don't know the calculus or libraries, or they may implement their own derivative routines. And other algorithms besides Newton's method become fair game. The purpose of (1) and (2) is to build up to (3). But for people who don't have an understanding of the math's involved, (3) is just too much to jump to. It is, at best, an intermediate problem.", "I submitted one after I got done with my rant, because I felt guilty for not having submitted one in so long. I went with a real problem from my day job. Should be interesting to see how people react to what I get paid six figures for. :p", "inb4 \"omg easy\" :D", "Yeah, maybe it's the fact that English isn't my mother tongue but I definitely don't understand this one.", "Fantastic recommendation. Was starting to think maybe this wasn't for me, but I think I was trying to run before I learned to walk. Leetcode looks especially approachable. ", "Repeat ad nauseum.", "After a while, these become relatively simple because you're employing techniques you've used before.  ", "For me, the first thing I chose to write (back in the 90's) was a chess engine.  For ", ", I used basically the same sort of tree searching algorithm that I would use in a chess engine.  Different language, different requirement for short circuiting out of a search, but same basic scheme.  ", "Also FWIW, the difficulty on these aren't constant.  Some of these can be solved by literally one line of code, and some others are obnoxious.", "I also recommend starting at #1 on projecteuler.net, and working through a bunch.  Later ones tend to require a math background, but the early ones are more about logic.  I think they're good little exercises.", "I feel like this sub is like ", " but for coding", "heh, there's probably a lot of overlap.  People saying, \"but where do I start?\" and the answer is generally wherever you want, but dive in headfirst and spend a shitload of time on it.", "Yeah, i call bullshit. These are not programming challenges, these are mathematical questions. While most challenges require some/much math knowledge, this one specifically is all about math.", "Both these problems have closed-form Calc I solutions. It's a nice example where a little thinking ahead of time can save you a lot of computation. I gave the derivations in comments. Bonus: thanks to ", " constexpr, the results are allowed to be computed at compile time if the inputs are known. Disassembling my executable essentially gives (pseudocode) ", "\nRecursive golden-ratio-search implementation, minimize the calls to the function parameter in case it's long to compute", "Is there a mixup in the challenge outputs?", "I was wondering that too.  My initial results are ~114.6 and 40, though I haven't got far into testing/debugging yet.", "I think the first output is incorrect. I haven't written out a programming solution, but the area should be maximized when the angle is equal to 2 radians, or about 114.59 degrees after you work out the mathematics.", "Agreed.", "Yes, I looked back in the book I got this from and that's correct.  Apologies for all the mix-ups D:", "Yep, you're right!  Sorry, I'll fix.", "Recursive implementation of the Golden Section Search in Haskell, taking a generalized unimodal function be minimized. ", "Output: (114.59109737089062,39.999993127429065)", "More precise results can be obtained by lowering the tolerance parameter.", "There's an easy visualization for both problems. For the first, the solution is then the sum of the lengths of the radii is equal to the length of the arc, which then yields the answer of 2 radians. The second has a solution when the angle of incidence is equal to the angle of reflection. This is because the problem is still the same if we reflect B over the river, and in that case the solution is clearly a straight line, which then yields 40 as the answer.", " is recursive, but since the recursion calls appear in the tail position it's really the same as a while-loop (as far as GHC is concerned.)", "It bothers me that you wrote AP + PB", "They're both left to right, if that makes you feel better", "Python 3, #2. Using scipy as an import is kind of like cheating.", "Output: 40.0", "using scipy for this is like using a shotgun to kill a cockroach", "Using automatic differentiation and Newton's method:", " Updated to display the number of iterations.", "Output:", "On a similar note:", "Output: ", ".", "Using JavaScript:", "Challenge 1:", "Challenge 2:", "Output:", "Brute force solution for the second problem because I'm too much of a brainlet to understand the first. Wouldn't increasing the angle mean that the area increases as well ?", "Edit : updated the solution to include the first problem thanks to ", "'s explanation.", "For the first problem the copper wire has to be used for the radial lengths as well as the arc. So the constraint is 100 = 2\u00d7radius + arc and you want to maximize area = radius\u00d7arc/2.", "where I'm running into difficulty with the first problem is that if I'm iterating through progressively larger angles, I need to calculate the radius depending on the value of the arc length. but the calculation of the arc length is dependent on the radius:", "100 = 2 x radius + arc", "arc = 2 x pi x radius x angle / 360", "so: 100 = (2 x radius) + (2 x pi x radius x angle / 360)", "I know this is basic algebra, but I can't figure out how to isolate the radius variable in order to calculate it when given a value for the angle. can you help?", "Rearrange ", "  to  ", "Then:", "So", "oh man.. that seems terribly obvious now. Thank you so much!", "Thanks ! It makes sense now.", "To get the wire to increase the angle you'll have to take some from the radial sides.  In other words, you'd get a large sector of a smaller circle.", "Thanks for the explanation ! I failed to realize that the arc was part of the 100 cms, which left me confused for a while.", "protip: ", " is standardized as ", ".", "TIL ! Thanks.", "Well i super lazily converted a program i wrote years ago for class so that it could solve the second problem. It uses ", " and is probably one of the fastest numerical solutions available for 1D optimization problems (although you do waste time calculating the derivative....).", "Here is the output when run on my laptop compiled with ", ". ", "Output:", "Really really bad source code:", "I'm new to Python, so any feedback is appreciated.\nI've implemented the simplest Dichotomy method to find the minimum. I know that it can easily be done without recursion, but it is so much more fun with it.", "and the result (in Radian though)  ", "go... Implemented golden section search, which is passed a function.  Used that to answer both questions.", "Output:", "Done in Python 3.5. Tries to ensure the minimum is actually bracketed before beginning the golden section minimization, but is a little sloppy.", "Ruby. I'm sure there's a better way to pass these functions as blocks, but I couldn't figure it out.", "On passing functions as blocks: ", " Brand new to programming. Would love feedback. ", "Edit: I put in the second problem", "These are pretty easy to do by hand with a little calculus.", "Learning rust, my first program  ", "My quickly-coded Python solution:", "C = angle (degrees) (this is what we're looking for)", "\na = area (maximize this)", "\nr = radius of circle", "\nl = arc length", "\nL = total length (this is fixed at 100, but it actually drops out after differentiation, so any value of L will give the same result for C)  ", "l = 2*pi*r*C/360 // arc length formula", "\nL = 2*r+l // the total length is sum of arc length and two radii  ", "L = 2*p\\i", "C/360 + 2*r // Combine those last two, getting rid of l  ", "r = 180*L / (pi*C + 360) // Rearrange previous equation so we have r in terms of C  ", "a = pi*r*r*(C/360) // circle sector area formula", "a = 90*L", " *pi*C / ((pi*C + 360)", " ) // plug in r and simplify", "a' = -90*pi*L", " *(pi*C - 360) / ((pi*C + 360)", " ) // here's the calculus bit, if we're being honest, I plugged the last line into wolframalpha because I'm too lazy to do the differentiation myself", "0 = -90*pi*L", " *(pi*C - 360) / ((pi*C + 360)", " ) // set the derivative equal to zero to find the maximum", " // solve for C", "Notice that L totally dropped out of the math, so the angle 360/pi degrees will always maximize the area, no matter the length of wire", "A = distance from river to A", "\nB = distance from river to B", "\nR = length of river", "\nP = pumping station location along river", "\nAP = distance from A to P", "\nBP = distance from B to P", "\nL = total length of pipeline (minimize this)  ", "L = AP + PB // total pipeline is sum of two individual pipelines", "AP = sqrt(A*A + P*P) // pythagorean", "\nPB = sqrt(B*B + (R-P)", " // pythagorean  ", "L = sqrt(A*A + P*P) + sqrt(B*B + (R-P)", " // substitute", "L' = P / sqrt(A*A+P*P) + (P-R) / (B*B + (P-R)", " ) // Again, wolframalpha is my friend", "// After setting the above to zero, and another run through wolframalpha, we get", "\nP = (A*R) / (A + B)", "Plugging in, ", " ", "The result here depends on A, B, and R"]},
{"score": "79", "title": "[2017-10-26] Challenge #337 [Intermediate] Scrambled images", "content": ["To unscramble the images you will have to line up all non-gray scale pixels on each \"row\" of the image.", "You get a ", " image, which you will have to unscramble to get the ", " image.", "Challenge 1:  ", "  ", "Challenge 2: ", "  ", "Challenge 3: ", "You should post the correct images or words.", "The colored pixels are red (#FF0000, rgb(255, 0, 0)) ", "Bonus: ", "This image is scrambled both horizontally and vertically.", "\nThe colored pixels are a gradient from green to red ((255, 0, _), (254, 1, _), ..., (1, 254, _), (0, 255, _)).", "Have a good challenge idea?", "Consider submitting it to ", "It's terrible but I couldn't sleep and felt like doing something tinkery and I needed to convince myself my education accomplished something", "don't judge me", "EDIT: now with O(logs or something)% more Efficiency\u2122", "EDIT: I've been revisiting this over time and putting more thought and effort into it, and I think I'm satisfied that it's up to the best of my ability at this point.", "\u00a0", "I'm definitely judging your code. How dare you add that ", "... (I love how the \"\ud83c\udf46\" stands out even when the rest of the code is hidden!).", "Not putting a space behind //, what a savage.", "thats because the css mouse-over changes the font color and background color to the same thing. the \ud83c\udf46 is unaffected by color setting.", "\"EGGPLANT\" was the bonus solution, and that's the bit of code that handles the green-to-red gradient!", "Since arrays act as objects (i.e. they are references), why would you use arraycopy to swap?", "does the trick", "also Arrays.sort is your friend when you dont want to do stuff :P", "I'm kinda trying to scrape off the rust, heh. I'm still trying to nail down how arrays-as-references work. Good to know, though! I'm still glancing back at this now that I'm awake and trying to get the gears turning on how I ", " have done things.", "In Nigtly Rust, with bonus, using the image crate:", "The use of get_pixel/put_pixel is not efficient, but it runs in about 0.03-0.04 seconds on each image. The hidden words are APPLESAUCE, ZUCCHINI, DAILYPROGRAMMER and EGGPLANT.", "Edit: added bonus, removed bug.", "A lower-level Rust version that avoids some memory usage and data copy:", "I think the number of copies of image rows could be reduced.", "Third Rust version, low-level with minimized number of row copies:", "Uses only Pillow (PIL) as a dependency to read/write image files. Bonus takes only one line.", "This is pretty close to what I'd have done.  There's one thing I'd suggest though.  You can use ", " for \"pixels\" instead of a tuple of ints to save a lot of space.  It's basically the only memory-efficient built-in Python sequence.  Strings are almost the same thing.", "Sounds like a perfect example for premature optimization. I have no reason to assume that memory will ever be an issue with this challenge even if the images were to get a little larger.", "Also ", " already returns pixels as tuples so if anything I'd have to convert them to bytes one by one, which will waste time and add a lot of complexity.", "Oh.  This is just a misunderstanding about the library.  On the version I have installed, it just returns ints, period.  If it's a RGB file, it'd be R,G,B,R,G,B, etc.  I looked at the docs and they haven't been updated for this behavior of returning (R,G,B) tuples instead.  Now that I look at your script again, it wouldn't work if this wasn't the case.  I guess what I suggested could still be done but it'd be needlessly complicated.", "python + scipy/numpy solution... used a slightly different algorithm for the bonus image.", " Thanks for ", " for spotting edge case that should be accounted for (applied to the bonus image.)", "Can you upload somewhere the un-scrambled bonus image for your program? (I still have to install scipy).", "Unscrambled images uploaded here: ", "You'll also need to install pillow: ", "(Corrected imgur link in previous reply)", "If you look closely at your red-green line at the right in the last image, you see some pixels are off. I had a similar bug in my first version of the code.", "Ah ha -- very interesting!", " using ", " (PPM) as the\ninput and output format.", "Usage example:", "Code:", "A Netpbm format is any graphics format used and defined by the Netpbm project. The portable pixmap format (PPM), the portable graymap format (PGM) and the portable bitmap format (PBM) are image file formats designed to be easily exchanged between platforms. They are also sometimes referred to collectively as the portable anymap format (PNM), not to be confused with the related portable arbitrary map format.", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "   ", "\n", " ", " ", " ", " ", "In F#, without bonus", "Would have had this completed last night, but I completely misunderstood the nature of the scramble. I didn't realize it was each individual line, I thought they were spread across other lines. Thinking back on it, that was rather silly of me :)", "EDIT: With bonus (and active pattern matching :D)\nmodule Challenge337", "Cool challenge! ", "  ", "Output:  ", "C# no bonus.", "J (", ")", "Fun challenge! I learned how to use RMagick in order to solve it.", "Java, no bonus. I'm a Java noob coming from C++/D, so criticism is welcome.", "Output :", " in LinqPad, with bonus (auto detects if the image is scrambled both ways)", "A beginners C# solution:", ".  ", "  ", "  No bonus... yet.  Feedback always welcome.", "For some reason the output canvas doesn't auto update on Safari 10.1.2.", "I don't have Safari at work to test this out, sorry!", "Python 3.5 using PIL and bonus", "Basically finds where the colored pixels are for each row, splits the row into a left and right side and swaps them around.", "Output: \"EXAMPLE\", \"APPLESAUCE\", \"ZUCCHINI\", \"DAILYPROGRAMMER\", \"EGGPLANT\"", " ", "heavily inspired by ", "'s solution, just clean shaven and optimized :P (and then un-optimized by random use of streams)", "Code:", "It seems that you could ", " out of this loop if you decide to perform the ", " call:", "In other words, if you decide to rotate you shouldn't need to test other values of ", ". Indeed, after ", " is rotated, who knows what ", " now refers to.", "Python with pygame for visuals - please note that pygames performance is abysmal :( there is also an option to run it without rendering but you wont see the solution of course", "Cool solution", "thank you :)", "Comments welcome.", "Could you post imgur links to the outputs? Thanks!", "Didn't realise that the red pixels were not always together so my code sometimes messed up.", "\u00a0", "New code:", "I made the exact same assumption when I first completed the challenge. So many other people have too, so I don't feel too bad about it :)", "C++17. With bonus. The thing I don't like is that I abused the << and >> operators, which are supposed to be for formatted, not raw, input, just so I could use the ostream/istream iterator adapters. The actual unscrambling is easy thanks to the <algorithm> header.", "As somone who just took up Rust, I'd love to have feedback from more experienced Rust developers. ", "Anyway, had lots of fun doing this challenge :)", "Edit: Added bonus.", " ", ". ", "Edit2: Got it working! ", "\nI'm pretty new to Go so I'm sure this program can be improved. This should work out of the box, it downloads the images and then saves the results in the working directory under the filename output_x.png. Any advice would be much apreciated.", "Thanks! Got a working version now. I was in the process of working on the idea of using the Pix slice when I got this -- felt good to know that it could work. The circular shift is a bit of magic to me so I did a couple copies instead. Doing each row in parallel is a neat trick as well.", "Hey! Pretty new here. I've been seeing the blank statement a lot, but I don't quite get it.", "Why is it that you sometimes use it", "And other times you don't? ", "Also, bonus question: what's up with the ", " ?", "Thanks for writing this! :)", "Some functions/methods return more than one value. Using ", " instead of a variable name essentially throws the extra return value away. In this instance, the value I'm not checking for is a potential error. The ", " method doesn't return an error. ", " is a label. I use that to specify what block I'm exiting in the ", " line. ", "Oh nice! Thanks! :)", "Dude!!! You're the real MVP!", "I'm flattered, but what makes you say that?", "I came with the assumption that it would be easier for somebody that wrote another programming language that came with a library for this sort of things. Being a JavaScript dude, I didn't think this could be accomplished without node.js. The beauty of your submission (as far as I'm concerned) is the fact that this works well in the browser.", "Python3", "Python No Bonus"]},
{"score": "112", "title": "[2017-09-26] Challenge #333 [Easy] Packet Assembler", "content": ["The point of reading from stdin is to simulate incoming packets. For the purposes of this challenge, assume there is a potentially unlimited number of packets. Your program should not depend on knowing how many packets there are in total. Simply sorting the input in its entirety would technically work, but defeats the purpose of this exercise.", "Each line of input represents a single packet. Each line will be formatted as ", ", where X Y and Z are positive integer and some_text is an arbitrary string. X represents the message ID (ie which message this packet is a part of). Y represents the packet ID (ie the index of this packet in the message) (packets are zero-indexed, so the first packet in a message will have Y=0, the last packet in a message will have Y=Z-1). Z represents the total number of packets in the message. ", "It is guaranteed that there will be no duplicate packets or message IDs.", "Output each completed message, one line per packet. Messages should be outputted in the order in which they are completed.", "Have a good challenge idea?", "Consider submitting it to ", " indent to hide code", " Added sorting for different length IDs as suggested by ", "This will run into problems if the message IDs have different lengths, since 999 will sort ", " 1000. The numeric sort option, ", " solves this for message IDs but the packet IDs will have the same issue again. So a complete solution would be:", "Good catch! I've updated it", "Does this return the messages in the order they were completed?", "Also:", "It returns messages sorted based on the message id and packet id.", "It's true that it does pipe the whole input to ", " so it's kind of cheating I guess... ", "If you check the output description, it shouldn't be sorted by message id, it should be sorted by the message completion order", "Oh, you're right! I only skimmed through the problem and missed it. ", "And it looks like a lot of people did too!", "Output:", "C++ solution. I had to compile with -fpermissive because it complained about the const-correctness (or lack thereof) of set insertion, specifically in the parameter of the bool operator< overload of the Packet struct. Can any C++ gurus tell me what's wrong ?", "Output :", "It's because you didnt mark the ", "-function as ", " like this:", "This makes sure that the function does not modify the contents of the struct/class.", "Briliant ! Thanks !", "I can't believe I missed this. I normally make those const, not sure why I forgot to do it in this challenge.", "Clean solution. \ud83d\udc4d\ud83d\udc4c", "God ... now i feel terrible for how i solved it ( .___.)\n", "Here is my solution in Java:", " ", "I scan forever for new inputs and print when given message is complete. Maybe does't look great when inputs are given in stdin.", "Went for readability over conciseness. Packets will be emitted as an event upon completion.", "Ouput", "Challenge output:", ": I'm new to Python. Any tips would be highly appreciated.  ", "  ", "I've got a couple tips.  First, you might have a better time with fileinput instead of an explicit open.  This will let you not only specify the file you want on the command line, it will let you pipe input in if you wish.  It makes it much easier to test your program:", "It gives you more freedom and flexibility and saves you lines as a bonus.  Next:", "This is inefficient and redundant, repeating the split, you could assign to an intermediate variable:", "But for the best readability, you can also use multiple assignment:", "or, to avoid needing a dummy variable:", "maxsplit isn't technically necessary in this latter piece, but it will save some redundant processing.  It's not compatible with python2, so removing it would make the line work for py2 as well as py3 (whereas the top will not work for python2 with maxsplit removed, as your left-hand assignment has to match in count with the right-hand).", "Your logic here is a little redundant.  Note that the same line appears in both branches, and can therefore be dropped out of the branch entirely.  Also, look into how ", " works with dictionaries.  ", " already checks if a dictionary has the key, so you can drop your call to ", ":", "Your print loop is a bit wasteful.  Instead of iterating through the IDs and iterating through each message individually, printing as they match, it is much more efficient and readable to instead just sort the list (as list sort is lexicographic) and then print the entire list.  This also saves you the break.  You technically don't need to delete messages[messageID], because per the rules, you are guaranteed to not have redundant ids, so when its done and printed, you won't really need to worry about it.  Deleting it is good form and conserves memory, but isn't technically necessary and costs you an extra line.  So your check and loop can be shortened to:", "You could stick the ", " back on there if it makes you more comfortable.", "So your whole program could be simplified to this:", "First of all thanks a lot for writing up all these tips. They were more than useful. I really had a lot of unnecessary lines in my code. \nEspecially ", " seems very useful for future projects.  ", "I put the ", " in there because I thought the dictionary would become really big if you put a lot of lines through the program but I guess that level of optimization is not necessary for an exercise like this. :P  ", "Thanks again for the help. We need more people like you around here!", " is great.  I wouldn't recommend it for a production application or anything (", " or some other full-featured argument parser is better, and offers ", " types for this kind of functionality), but for little things like this, it usually does exactly what you want it to do for a quick code snippet or experiment.", "You're right about dictionaries becoming big, but it will also become big if you had lost packets or anything like that anyway, as you'd have a message that never gets completed, printed, or deleted.  Regardless, the ", " being in there could be good, especially if there was a bonus challenge that required parsing some multi-gigabyte file (otherwise your program memory would balloon insanely).", "And no problem.  Just pay it forward and become one of those helpful people.", "Avoid calling ", " multiple times:", "Better yet, use the ", " argument to the ", " method:", "Thanks a lot for the answer. I did not know about the maxsplit argument of the ", " method. Very useful.", "\nThat said I can not get it to work with my code since some of my lines only have three elements because they have no text in them. In that case I get this: ", "Ok - I made some assumptions about how Python's ", " method works.", "Using the first form (with ", ") should work:", "and it will be more efficient since ", " will stop after finding the first three fields.", "Yes, that solution works. Thanks again for the help.", "  ", "I map packets to a hash according to message ID, and print each message as soon as it's finished. Feedback always welcome.", "Edit: made some small improvements", "\nEdit2: simplified code thanks to feedback from ", ". Now I assign packets to an array hashed to the message ID, indexed according to their packet ID.", "code:  ", "output:", "How about making ", " an Array,  so that adding a packet becomes simply:", "Then there is no need to sort the packets for a message.", "Nice! Thanks for the feedback.", "Output:", "Reactive object-oriented approach.  It's over-engineered and tries to be a bit too cute, but I had fun writing it.", "Output", "I feel like I'm missing something", "Output:", "You could have sorted a 1D array as soon as you read the input then outputted that array using advanced for loop right after, eliminating the whole package class", "What's Note? Is it an external lib?", "It's something I made to pretty print arrays", "I figured :3 You should add it to the answer", "Your challenge output is not correct, the packets are supposed to be listed in the same order they were completed instead of the ID order (check other outputs to understand what I mean)", "Ah, somehow I missed that.", "Note - this is not the same output as what other solutions are producing.", "I aimed for an object-oriented solution.", "if anyone has any ideas how to improve my code go ahead and leave a comment.", "Output :", "I don't know C++, so I can't comment on the code itself, but I believe your messages are printing in the wrong order, as messages should be output as soon as all packets for that message have been received.", "Thanks for pointing that out. \nEDIT: I edited the code to print the message as soon as its completed", "Some small comments from glancing over code:", "for(auto&  packet : Info )", "instead of", "for (vector<PacketPack>::iterator it = Info.begin(); it != Info.end(); it++)", "\nFirst time doing one of these as well as being new to Perl!", "Output: ", "My Perl solution is similar to yours, with some changes to make it more idiomatic (in my opinion).", "My personal solution would look something like this:", "Output:", "My C# solution:", "Focus on keeping the solution short, but sorting messages in the right order (as well as parts of messages).", "Message 7469 should be emitted before 6450.", "Ok got it - edited my solution :D Thanks!", "You know how many packets there are in a message (third field), so it's easy to detect when a message is complete.", "Fixed my solution. Thanks!", "Here is my c++11 version", "any feed back ", "before i try to use some C++17 features ", "Forgive me, I'm just learning. My functional/recursive interpretation of ", " 's JavaScript version. Reads from stdin until EOF is reached. Also, prints the messages in order of completion unlike many of the answers in the comments.", "Very cool! This makes me want to do an Elixir version.", "challenge output: ", " in LinqPad", "I had the idea of using a dictionary of message IDs to build the messages as the packets come along... I thought using the new ValueTuples would be a cool way to store the message as it's being built. Of course, them being VALUEtuples, they have value semantics... had to make my counter an array[1] to force reference semantics and actually have my counter work.", "Output:", " solution in ", " time", ": The above solution is wrong. It outputs the messages in the wrong order.", " (same computational complexity)", "This doesn't produce the same output as other solutions.", "Thanks. I didn't read this sentence:", "I was outputting in order of message id.", "For what it's worth, the point was to assume that input is a stream, that is, you're processing things as soon as you receive them, as though you were processing a stream of packets. Reading everything then sorting is counter to the idea. Plus, you can do it in linear time.", "I know I don't ", " have to sort after reading everything. The other approach I thought of is to keep the packets sorted as they're read, but even then, I don't know of a data structure that maintains sorted order in linear time. Am I missing something?", "Edit: I fixed my solution. It still runs in ", " time though, albeit with a slight constant improvement because I only sort one collection.", "Python3 solution.  I avoided sorting as suggested.  Since the OP doesn't say what constitutes the end of the input stream, I stop reading inputs when all messages are complete.  It would be trivially easy to change so that it ends on a blank line or some other condition.  I went for clarity rather than compactness, so there are some areas where I could reduce the number of lines:", "And a version that is easier to test that uses a single long string called ", ":", "And the solution:", "Question about the challenge: What tells us that the input is finished?  A blank line, all messages printed, some other \"end\" signal?", "I suppose hitting EOF on the file/stdin would signal that all the packets have been received.", "However, you should be able to emit a complete message once all of the packets for that message have been received -- i.e. you shouldn't have to wait until you have read all of the challenge input before you start emitting completed messages.", "Output:", "EDIT:  cleaned up parse_packet as it contained a few lines of unnecessary code.\nOther Edit:  Didn't rstrip msg_id, so msg_log key had all of that padding.", "Note:  I shouldn't do this while I am at work.  It is making me write sloppy code as I am trying to do too many\nthings at once...", "Uses a linked list to keep track of pending messages and another nested linked list for each message to keep track of received packets.", "Instead of a nested linked list, how about just using an array for the packets belonging to the same message - since you know in advance how many packets there will be?", "Yes, good idea. An array of ", " would be simpler and avoid searching for the proper index on insertion.", "I saved the inputs as text files, and changed the format of the inputs to be tab delimited", "Doesn't look like this will produce the same output as other solutions.", "Also, having done TONS of perl programming in the 20th century, may I offer the following suggestions:", "This does provide the correct output on the regular/hard challenge.  Thanks for the suggestions 2 and 3 however, that is the much smarter way to do this type of a problem.", " ", ". Prints out finished messages once the last item is received. Can be modified to use stdin by changing the source of the ", ", but that doesn't work on the playground. Can also print out any unfinished packets", "See my comments ", " about better ways to call the ", " method.", "Also - your output doesn't match what other solutions are producing.", "Oh, I didn't know that my output isn't correct! I thought that the values should be sorted from min to max. How should they be sorted then?", "Each message should be output as soon as it's completed, so message ID's aren't sorted per se. i.e. If you were to input each packet one at a time, the program should output a message once all packets for a message ID are collected.", "Just found this subreddit, thought I'd give it a try. ", " is my solution in ", " using vectors. (You only need 1 space between X , Y , Z and Text to make it work in my case.)", "EDIT: ", " is a screenshot of the output.", "What happened to message id 6450???", "Wow I didn't even notice! Thanks for mentioning, I will go right ahead and fix this!", "Output:", "This is my first time using C#. I made some variants in the code, this can be done a lot faster.", "If someone has any comments, please post them. ", "I have changed my Program class. Using my own Dictionary extension loosely based on AddOrUpdate from ConcurrentDictionary.", "Go solution.\nPrints packets as they are completed", "Damn, I'm rather pleased with how this turned out.", " 'one liner':", "I haven't run this, but I'm pretty sure this doesn't produce the same output that other solutions are producing.", "It reads lines from stdin, splits them into 4 columns, sorts them by the first two columns, then prints them back out.", "...unless I've had a little much to drink, that should do it, no?", "Apparently I've had a little bit much to drink.", "I'm just suggesting to carefully compare your output with the other outputs which have been posted here.", "In particular, you are not using the third column.", "Here is my solution in Java:", "Output:", "I stored the input into a file called 'input.txt' because  copy pasting into git bash was messy.", " New to Python/dailyprogrammer.  Any tips appreciated.", "Two tips:", "Python 3.6,", "Not very pretty but it works", "Feel like my code might be \"over-optimised\" ", "Output:  ", "Wouldn't it be more efficient to store messages in the hash map, and the packets in an array? This way you can avoid iterating through all messages.", "Youre right yes, but wouldn't it make printing packets out in order a more difficult by forcing me to sort them before output ", "You don't need to sort the packets because you can put each packet directly in the array element it should occupy.", "Would I have to initialise the array with false values and then modify. I tried a similar thing with a Packet[] type, and I was getting Null pointer exceptions. If I try it with ArrayList<Packet> and I add elements at specific positions, how does it handle gaps?", "Sorry for all the questions, just trying to get a better understanding", "Instead of a Packet[] type, you could try using a String[] type, with length equal to the number of packets. When receiving a new packet, insert the message into the array using the packet's ID.", "A bit cleaner than mine: ", "\n - also detects for missing packets for each message", "A new message instance is created and stored in a hash table if it doesn't already exist. For each incoming packet, a method is called on the message instance corresponding to the  packet's message ID. When we have received all the messages, we format the string, and print out the entire message.", "Challenge output:  ", "This problem was a good excuse to finally learn Factor's object model. Thanks, OP!", "This program processes packets as they come and outputs messages in the order they are completed, rather than sorted by message id. I'm not sure why the special characters turned out like that. I copied the output from windows cmd. If anyone has any ideas let me know.", "OOP solution Java", "Javascript. MessageReader class takes a callback to fire when a message is completed, then is passed each new packet segment with \"processPacket\". It only holds messages in memory until they are completed.", "Javascript ES6", "Interesting solutions with the lower level languages!", "This looks like it just sorts the lines which does not produce the right message sequence.", "Wow you're too lazy to try it yourself huh?  Sorting the lines is a one liner. I know this answer is much shorter than your haskell answer but please don't let your feelings drive you to do such things in public, it's embarrassing.", "The correct message order is: 1938, 2997, 7469, 6450, 9949", "That's why it's the order of my output.", "Thanks for reading it", "Dude, message 7469 should be emitted before 6450.", "First time trying one from this sub. I still have lot to learn. I skimmed the string sections of PIL for a little and came up with this, but I'm sure there's a cleaner way to do it with pattern matching or some string functions I'm unaware of.", "I'm in the middle of working on the Sierpinski carpet challenge. I thought I had a novel solution, but it's kinda falling apart as I realize it's hard to draw from my representation. So I took a break and read the pattern matching section of PIL. Here is the above code quickly rewritten to use pattern matching instead of manually chopping up the input. I think it's a little more readable than my original submission, but could probably still be better.", "Same output on both. Messages emitted in the order 1938, 2997, 7469, 6450, 9949. The one quirk of this version is that any sequence of two or more space characters in the message will get reduced to just one space. I may come back and edit to correct that.", "you can run this script directly in your console - works with Chrome and Firefox", "All feedback welcome, thank you!", "The correct message order is: 1938, 2997, 7469, 6450, 9949", "I don't understand.  Why does 7469 come before 6450?", "\nI load the lines from a text file, There is an issue with some of the characters being shown correctly.", "Output:", "The correct message order is: 1938, 2997, 7469, 6450, 9949", "Right, I just skimmed the challenge's text and thought I just needed to sort.\nHere's a fixed version:\n", "I still wanted to just read it from a file but now I'm writing them on screen as the messages get done.", "Edit: There's probably a lot of code in the fixed version that can be removed, I just made it (as the challenge say) assuming there is an unlimited amount of packages and I haven't even done that 100%, as the list has a limited size I could remove all the finished messages from the list (possibly written them to disk), but I haven't done that.", "Message 7469 should be emitted before 6450.", "Why?", "Also:", "Since there are potentially an infinite number of packets, you should emit a completed message once all of its packets have arrived.", "Ah okay, I'll work on fixing my program, thanks!", " First submission (open to feedback), new to C++ as a language, and to be fair I took a lot of reference from ", " 's solution on ", "Output:", "  Here is my solution.   Feedback is welcome.", " Terribly written, and terribly inefficient... but technically works.", "Output:", "Does not format output like challenge's example output; does not retain whitespaces.", "I admit, I do not really understand what the challenge meant by 'message completion order'... Based on others' solutions, though, I think this abides by that rule.", "What 'message completion order' refers to when each message gets printed, based off when it has received all its packets.", "So say the message with ID 1938 had 0-15 packets right away, but the final 16(17) packet arrives at the very end of the input, that message would be printed last.", "My first programming challenge here! Easy one I think. Did so that it displays the whole message after it is delivered, then deletes it from the dictionary, so it won't overflow if there are a lot of packages. Though it is not necessary of course.\nPython3.", "My Java solution", "I did my solution in a very similar way but in Scala instead, ", " if you want to check it out :)", "Just started getting into solving problems using C++, so please, any advice / suggestion / anything is really welcome! I want to learn ways to improve :) I've mostly done Java before, especially for this kind of \"toy\" problems.", "Yes, I know this might have been overkill with the class and so on, but I am using these as ways of practicing and implementing concepts", "Your script does not sort correctly, as it thinks 10+ items are lower than 2~9 items.", "Based on that, it could be shortened to:", "However that is ", " the answer.", "An alternative take that does work correctly: ", "Python 2 (Edit to make code shorter and more concise)", "Can you explain to me how your sorting works? Im pretty new to python and dont fully understand why what you are doing works", "So one of the features of python is that you can pass functions around as arguments. Since I have created a matrix on the messages.append line and forced 4 elements in each row, I can give the first and second elements in my function to the sort arguments. This is definitely not one of the easiest solutions to understand in this thread.", "Thanks!", "Yes I complicate things a lot. :x", "Challenge output: ", "This is wrong, just only slightly, message ID 7469 should print before ID 6450.", "Output description", "Output each completed message, one line per packet. Messages should be outputted in the order in which they are completed.", "Yeah I realized that after I posted :( I'll try to fix it at some point. ", "Much more verbose version but it prints out correctly now:", "ayyyy i like how you kept on the same purpose you had. sorting by completed is neat", " I tried to keep it object oriented instead of just trying to solve it using as few lines as possible for reusability. Thoughts? Also my first time doing one of these projects and posting here. I want to start doing more of these to get some good practice outside of school. Thanks!", "Here is my ", " solution", "The solution printed out is", "\nMy first attempt needed to be fed line by line, so this solution seemed more reasonable for the setup.", "My golf-like python3 solution, got it down to 2 lines not including the shebang:\n", " using Comparable interface and TreeSet \u2014 not sure if it implicitly counts as sorting, but I thought it was a neat way.", "1 horrendous line of Python:", "Wow... I always admire these complicated incomprehensible designs and can't wait to reach the level in which I will be able to build one of these. It just seems so cool.", "There's a tutorial for those (", "). It's outdated (it was probably made when there weren't even 1-line if statements) but still awesome and presents the basics of the very cool challenge of making a python one-liner.", "I'm not sure ", " works the way you want it to here.", "Also, check if the output matches what other solutions are emitting.", "I've designed it so it works with the specification (space separated values) rather than whatever the example input uses", "in J, with input on clipboard", "Hi - I actually downloaded J and ran this program, and it's not producing the same output that other solutions are printing.", "double checked and its fine.  Does there have to be a line break between \"sections\"?", "is it possible you don't have full input on clipboard?", "if just using console, you'll need to input each line at a time.", "Check the order of the message ids.", "why should 7469 come before 6450? (saw in other solutions)", "Because after you have read the 61st line of the input, you have all 7 packets for that message. To reconstruct message 6450 you need to read 63 lines of the input.", "Can be run interactively or given a string where each line is a packet.", "Java has a really nice lambda based comparator ever since java 8. Even though an intermediate package class is not necessarily needed, I use it for readability.", "I think this just sorts the input. See if the output matches what other people are getting."]},
{"score": "76", "title": "[2017-10-09] Challenge #335 [Easy] Consecutive Distance Rating", "content": [". ", " and ", " are consecutive integers, but their distance apart in the sequence is 2. ", " and ", " are consecutive integers, and their distance is 4. The distance between ", " and ", " is 3. The sum of these distances is 9.", "Your task is to find and display the consecutive distance rating of a number of integer sequences.", "You'll be given two integers ", " and ", " on the first line denoting the number of sequences that follow and the length of those sequences, respectively. You'll then be given ", " integer sequences of length ", ", one per line. The integers will always be unique and range from 1 to 100 inclusive.", "Output each consecutive distance rating, one per line.  ", "Be careful that your program doesn't double up the distances. Consider the sequence ", ". An incorrect algorithm might see 1 -> 2 and 2 -> 1 as two separate distances, resulting in a (wrong) consecutive distance rating of 2. Visually, you should think of distances like ", " and not like ", ".", "Modify your program to work with any size gap between integers. For instance, we might want to find the distance rating of integers with a gap of 2, such as ", " and ", " or ", " and ", " rather than consecutive integers with a gap of 1.", "This challenge was authored by ", ", many thanks!", "Have a good challenge idea? Consider submitting it to ", ".", "Python 3.5 with Bonus", "Challenge output:\n31\n68\n67\n52\n107\n45", "I'm new here, but wouldn't replacing this", "for i, j in zip(s, s[1:]):", "with,", "for i, j in zip(s, s[i:]):", "work better?", " is the list sorted in numerical order and in the for loop, i want to check if each element has a consecutive integer as the next element. Where would the new ", " variable in ", " come from?", "I'm sorry, I hadn't understood your approach when i posted this. Thanks for the clarification, but I'd like to ask if this, i.e sorting and then looping, is more efficient than having a double loop like this: (which i have developed)", "My method is more efficient because I'm only looping over the list twice, once in the sort and once in the for loop so i have 2n iterations where n is the length of the list. In your nested for loop, you have n*(n+1)/2 iterations. This means the time is takes to run your code increases exponentially as the length of the list increases.", "Haha, I did it in a VERY similar fashion. I just made my own data.", "Yours is faster by a hair because you split the string and converted to a dict in the same step >:(", "But still, it is cool we had the same train of thought. :P", " +Bonus", "Nice! I wanted to do it with reduce, but couldn't figure it out.", " using only streams, because why not?", "I hate having to use collect, ugh!", "Sadly, you can't create sliding windows as easily as you can in Scala: ", "zipWithIndex would've also been nice: ", "Oops.  Good catch.", ", with an upper limit on the values themselves (255) as they're used as an index into another table.", "This is amazingly simple! It took me a while to decipher what was happening, so I have put my commented and variable name changed version here incase it helps anyone else.", "Good solution! Thanks ", " for the comments. The one thing I noticed is that you wrote table[input[j]] = j + 1, when since what you're doing is subtracting the differences you could just set it to j.", "(j + 1) - (k + 1) == j - k", "python3, 2 pass O(n) time, O(n) space", "looks like you're trying to find the index of a number ", " in the list ", ", but you're first enumerating then making that into a dict, then walking that again. call ", " on the list ", " for that value.", "can greatly simplify your code. ", "Making it into a dict takes O(n) time preprocessing, O(n) space, and O(1) average for every lookup. index() on a list takes O(n) worst case time for every call, so if I used that instead then it would be O(n", " time with O(1) space. Tradeoffs :)", "We could also use binary search to find the second number, for O(nlogn) time, and O(1) space. (edit: Making an auxiliary array to sort it could be counted as O(n) space I suppose)", "excellent points, and well made. thanks for the reminder.", "I don't think it's completely accurate to say that creating the dictionary is O(n) especially for large ", ". As you add elements, the dictionary has to resize its hash table, so it's more likely to be something like O(n log n). See, e.g. this ", ".", "When adding an item to our dict, the average time complexity is O(1), but if we need to resize, then its O(n). However, there will only be O(logn) resizes over the course of our n inserts. When adding up these resizes, the amortized cost of O(n) inserts is O(n).", "Assume that we start out with an empty dictionary, and do n inserts, rebuilding every 2", " insertion (i.e. everytime we double in size). n inserts will then cost O(1 + 2 + 4 + 8 + ... + n/4 + n/2 + n) = 2*n - 2 = O(n).", "So, the worst case for a single insertion is O(n), but the amortized cost is O(1). If you're worried about this, we could instead use a tree-based map for O(nlogn) worst case time and still O(n) space.", "If you're interested, theres a lot more online about amortized analysis, like this link: ", "Ok - I've just watched ", " and I guess I have to agree with you now!", "That link doesn't say anything about complexity, which is still O(n).", "Even if it wasn't, the dictionary could be initialized to the proper size instead of resized dynamically. Basically skeeto's answer.", "In computer science, amortized analysis is a method for analyzing a given algorithm's time complexity, or how much of a resource, especially time or memory, it takes to execute. The motivation for amortized analysis is that looking at the worst-case run time per operation can be too pessimistic.", "While certain operations for a given algorithm may have a significant cost in resources, other operations may not be as costly. Amortized analysis considers both the costly and less costly operations together over the whole series of operations of the algorithm.", " ", " ", " ", " ", " ", " ", " ", " ", " ", "   ", "\n", " ", " ", " ", " ", "Great answer, I was convinced there was a O(2n) solution but couldn't find it. ", "Python 2.7.10", "This doesn't work does it?", "The sample input (such as ", ") implies the abs(y - x). In otherwords the larger number can appear ", " the smaller number. 8 appears before 7 in this instance but counts for 1 (not -1).", "Is the example output wrong on the first case? I've counted it on a piece of paper twice and get the total distance to 16. Not 26", "Alright I figured it out. So it should work both ways eg (25 -> 26), (26 -> 25), perhaps that should be clarified in the description. ", "It doesn't work both ways. ", "Here are the consecutive pairs and their distances:  ", "53, 54  distance 6", "\n54, 55 distance 1", "\n55, 56 distance 6", "\n62, 63 distance 4", "\n63, 64 distance 9  ", "Hi, sorry I had trouble explaining myself, what I meant was pointed out by ", " below.", "I suppose the distance of ", " pair of consecutive integers is to be considered in the sum, even if they appear in the wrong order (like 63 and 62 in the first example). When you consider these distances as well, they add up to 26.", "Java", "Edit: Formatting", "  ", "Challenge output:  ", "My first ever Haskell program! Still learning the I/O bits and Monads and all that, and the concept of 'Maybe' is still tough for me to wrap around. That and all the various syntactical possibilities to accomplish something. I would appreciate any feedback from the masters here!", "This is very good for a first Haskell program.  There are a lot of minor things that can be automatically caught by linter like hlint.  See if your ide has a plugin for it.  ", "The first thing I noticed is your code does a lot of recursion manually.  This often leads to code doing too much in one place because you are handling the traversal, the recursion, and the core logic together in the same code.  This style is very common in imperative languages.  A functional language like Haskell will make that style very difficult for you to read and write.  You should instead try to break your algorithm into discrete pieces.  Look for common strucutures like folds, functors, and monads that you can use to help you split up your code.  This  will help you get organized and will probably make the algorithm clearer in the end.  Take this line:", "Before refactoring this, you have to try to understand the intent behind each variable between the recursive calls.  I'll try to explain how you approach the refactor.  ", "The ", " code just increments ", " without needing to do any complex calculation involving different variables, so your code will probably be clearer if you can have ", " do that work instead of ", ".  Maybe something like ", ", but that doesn't easily work with what's going on in ", ".", "The ", " is code concerned with the traversal/recursion.  This usually means we can use a functor.  Maybe something like ", ", but that doesn't work what's going on in ", "...  ", "Ohh I see, the ", " has to be incremented with each element; ", " does that pairing!  Maybe something like ", ", but that doesn't work with what's going on with ", ".", "I would then check hoogle to see if there is anything that gives me ", " and I would see ", " is what I want!  Maybe something like ", ".  Yes, I like that a lot better than the 3 lines before and would use this for code.  Note, you'll see the ", " pattern crop up a lot to do counting.", "It's possible you didn't think to check hoogle and didn't find that function, so here's how it would continue: From ", ", I can see you're just calling ", " successively on the same ", ".  This usually means we can use a fold.  Maybe something like ", ".  This would have still been a decent 1 liner.", "With experience, you also notice  a ", " followed by a ", " means you might be able to use a ", ", so now you may be looking to see if you have a ", ".  You want to get a ", " out of the final result, so check out what its ", " instance is to see that it can do the inserting for you.  Now you just have to create a ", " from a pair of values.  A hoogle search later and you have ", " would do it too!", "You should be spending most of your time figuring out how to glue parts of your code toegher which is why types are so important.  Take the following type signature for example:", "What this type signature communicates to me is: I give the function a ", " and it will give me a list of ints ", " and do some modifications to the input list I give it because where else is it getting that ", " portion of its output from?  This is the state monad that you will learn about later if you haven't already.  Now, your code obviously does not do any modifications to the input list because there are no ", " or ", "s.  You probably want the type signature to read ", ".  Heck you could just keep the same code and call ", " on the result.  However, the type signals you are not using the best function to do your work.  ", "You are using ", " to get access to the key and value of the entries to the map. I'd suggest rewriting it with ", " because the accumulator does not need any fancy logic.  Then finding the right folding function to do the job.  It seems like ", " would do that.  Again, folding after a map means you may be able to use a foldMap like ", " that would combine both steps if you can get a Monoid.  A list is a Monoid, but it's not very fast, so I'd leave it as ", ".", "Keep refining the  ", " code and you might have an even shorter / more readable code.  For example, hlint suggests ", " is equivilent to ", ".  However, know that ", " implements a large number of typeclasses.  Replacing the code with ", " might simplify the code locally, but leveraging the ", " or ", " instances on ", " and ", " might simplify stuff a great deal more from an architectural standpoint.  There are some other Haskell implementations you can checkout for ideas.", "Finally, it's awesome that you are able to use the function/reader monad in ", ":", "But I think using the reader monad is a little overkill; it adds cognitive overhead to each line while all it does for you is pass 1 parameter to 1 function in 1 line.  The reader monad really shines when you have to pass the same value to multiple functions across multiple lines to potentially nested functions -- think passing a program's configuration settings to everywhere that needs it automatically while guaranteeing it does not change.  I think the simpiler way to write this function would be:", "It's impressive that you were able to write code using the reader monad for your first program!  You'll do well in Haskell if you were able to do that.", "Thank you for detailed feedback - this is exactly what I was hoping for!", "To be honest though, I have  never picked up any book on Haskell; I am familiar with FP concepts so I just started looking at other Haskell programs and thought I should give it a shot. I admit, I had no clue I actually used the reader monad until after you bought it to my attention.", "I used Hoogle and Hackage pages extensively while writing this, but they are often confusing for a beginner like me - in fact I was constantly switching from my editor to the REPL because I wasn't entirely sure how this function I just found online would actually fit with what I have so far.", "But your feedback is really useful to me (and any Haskell beginner, I am sure) because it outlines the thought process that a functional programmer uses when they write code, and that is often what many programmers lack when they transition from imperative to functional programming.", "Thanks again, and I hope to use some of this knowledge soon enough in other challenges!", "This is very good for a first Haskell program.  There are a lot of minor things that can be automatically caught by linter like hlint.  See if your ide has a plugin for it.  ", "The first thing I noticed is your code does a lot of recursion manually.  This often leads to code doing too much in one place because you are handling the traversal, the recursion, and the core logic together in the same code.  This style is very common in imperative languages.  A functional language like Haskell will make that style very difficult for you to read and write.  You should instead try to break your algorithm into discrete pieces.  Look for common strucutures like folds, functors, and monads that you can use to help you split up your code.  This  will help you get organized and will probably make the algorithm clearer in the end.  Take this line:", "Before refactoring this, you have to try to understand the intent behind each variable between the recursive calls.  I'll try to explain how you approach the refactor.  ", "The ", " code just increments ", " without needing to do any complex calculation involving different variables, so your code will probably be clearer if you can have ", " do that work instead of ", ".  Maybe something like ", ", but that doesn't easily work with what's going on in ", ".", "The ", " is code concerned with the traversal/recursion.  This usually means we can use a functor.  Maybe something like ", ", but that doesn't work what's going on in ", "...  ", "Ohh I see, the ", " has to be incremented with each element; ", " does that pairing!  Maybe something like ", ", but that doesn't work with what's going on with ", ".", "I would then check hoogle to see if there is anything that gives me ", " and I would see ", " is what I want!  Maybe something like ", ".  Yes, I like that a lot better than the 3 lines before and would use this for code.  Note, you'll see the ", " pattern crop up a lot to do counting.", "It's possible you didn't think to check hoogle and didn't find that function, so here's how it would continue: From ", ", I can see you're just calling ", " successively on the same ", ".  This usually means we can use a fold.  Maybe something like ", ".  This would have still been a decent 1 liner.", "With experience, you also notice  a ", " followed by a ", " means you might be able to use a ", ", so now you may be looking to see if you have a ", ".  You want to get a ", " out of the final result, so check out what its ", " instance is to see that it can do the inserting for you.  Now you just have to create a ", " from a pair of values.  A hoogle search later and you have ", " would do it too!", "You should be spending most of your time figuring out how to glue parts of your code toegher which is why types are so important.  Take the following type signature for example:", "What this type signature communicates to me is: I give the function a ", " and it will give me a list of ints ", " and do some modifications to the input list I give it because where else is it getting that ", " portion of its output from?  This is the state monad that you will learn about later if you haven't already.  Now, your code obviously does not do any modifications to the input list because there are no ", " or ", "s.  You probably want the type signature to read ", ".  Heck you could just keep the same code and call ", " on the result.  However, the type signals you are not using the best function to do your work.  ", "You are using ", " to get access to the key and value of the entries to the map. I'd suggest rewriting it with ", " because the accumulator does not need any fancy logic.  Then finding the right folding function to do the job.  It seems like ", " would do that.  Again, folding after a map means you may be able to use a foldMap like ", " that would combine both steps if you can get a Monoid.  A list is a Monoid, but it's not very fast, so I'd leave it as ", ".", "Keep refining the  ", " code and you might have an even shorter / more readable code.  For example, hlint suggests ", " is equivilent to ", ".  However, know that ", " implements a large number of typeclasses.  Replacing the code with ", " might simplify the code locally, but leveraging the ", " or ", " instances on ", " and ", " might simplify stuff a great deal more from an architectural standpoint.  There are some other Haskell implementations you can checkout for ideas.", "Finally, it's awesome that you are able to use the function/reader monad in ", ":", "But I think using the reader monad is a little overkill; it adds cognitive overhead to each line while all it does for you is pass 1 parameter to 1 function in 1 line.  The reader monad really shines when you have to pass the same value to multiple functions across multiple lines to potentially nested functions -- think passing a program's configuration settings to everywhere that needs it automatically while guaranteeing it does not change.  I think the simpiler way to write this function would be:", "It's impressive that you were able to write code using the reader monad for your first program!  You'll do well in Haskell if you were able to do that.", " - Written on my TI84+.  Only does one sequence at a time.  B is the sequence size, D is the gap distance.  Since it uses a list only sequences less than 1000 numbers can be used.", "Input:", "11 1 ; 31 63 53 56 96 62 73 25 54 55 64", "11 1 ; 26 8 7 25 52 17 45 65 11 35 12", "20 1 ; 76 74 45 48 13 75 16 14 79 58 78 82 46 89 81 88 27 64 21 63", "11 2 ; 31 63 53 56 96 62 73 25 54 55 64", "Output:", "I really really really want a reason to learn Perl6", "I didn't code anything in some years!\nIn C, removed all error and input checks and braces for brevity :)", "Python 3.6", "No bonus, and late to the party, but damn am I more proud than is appropriate. ", "Instead of ", ", you can use ", " which will split the lines and discard the last line if it is empty.", "Translation of skeeto's C program:", "I made a small html page: ", "Here's the logic:", "a partly working solution in F#. i would love some insight as to what i'm doing wrong.", " storing index for each value in an array of size (max value).", "O(n) time complexity.", " Now implements bonus (gap added in 3rd position of input)", "Challenge output", "Challenge output with gap = 3", "Haskell", "Doesn't take the first line of input since it isn't necessary.", "Plan: I was at first thinking this: loop through every element, go backwards and forwards from that element and find elements that were a distance away (1, or something else), and then compute the indexes distances, sum them, done. But, I realized it would be a lot easier if I could sort the list; that way, the numbers a distance away would be far easier to compute (with 1, the number would be in order, so right next to each other). But, the indexes still had to be retained. Since multiple elements of the same number didn't really make sense in this challenge (assumption) I created a TreeMap (ordered map) to hold the integers and their indexes. I then paired up every entry in the map with the next, checked the distance between the integers. If it was the specified distance, compute the distance between the indexes (held in the values) and add it to the final distance.", " you can view the output for the first input.", " you can view the output for the second input.", "Without printing stuff, the algorithm finished ~3-4 ms. With printing, it jumped up to ~10-15ms. ", "Your idea of sorting the array can work well... but instead of sorting the numbers themselves sort the array indexes.", "Could you elaborate a bit further? I might be missing something obvious here....", "You sort the indexes of the array like explained ", ". Then use a loop like I did ", ".", "You linked something sorting the values not the indexes. It just keeps track of the original index", "Well - what I mean by \"sorting the indexes\" is that you sort the array but instead of moving the values around you move the indexes.", "So if your original array is ", " and the sorted indexes ", ", then ", " is the index of the i-th smallest value - that is ", " is the i-th smallest value. Hope that explains what I'm trying to get at.", "C# with bonus", "Go, with challenge, but not bothering to parse input.", "Output, for offset of 1 and 2", "Python 2.7.", "I'm new to Python and haven't been programming for a while, so feedback is welcome! ", "Input needs to be copied to textfile. The function arguments are the name of the input textfile as string and the considered size gap as integer.", "It seems you attempting to chomp off the ending newline with ", ". However, if you use:", "you won't have to worry about the line ending (which may be more than one character.)", "Hey, thanks for the suggestion, works fine!", "Python", "doesn't take the first line", " ", "Edit: Changed to print result as one value per line\nEdit 2: Fixed mistakes from non-thorough adjustment of function parameter names", "I'm getting ", " when I try running this.", "Edited. My bad, I changed the parameter name for the second function definition (for more appropriate semantics) and didn't follow up everywhere.", "Maybe I should stop doing these first thing in the morning haha.", " with bonus", "Feedback always welcome. I don't use the first line. I initially tried to, but felt like it overcomplicated things. So instead, I read from input from file and find the consecutive distance rating of a line as long as that line is longer than 2. ", " Added bonus. If no gap is specified, finds for a gap of 1.", "Challenge output:", "main.go (I made it way too complicated)", "input.txt", "Machine I am working on at the moment is dated and doesn't have the necessary libraries/compiler for Modern C++, so I have to settle...  Figured I would do one of these challenges in something other than Python3", "Will redo when I get home and can use Modern C++", "Includes bonus - Takes an optional argument for gap.  Defaults to 1.", "EDIT:  main() was missing (int argc, char** argv)", "In Ruby:", "Bonus solution for any size gap\n", " with bonus, O(n)", "called with two arguments, the left indicates the gap", "with one, the gap defaults to 1", "An ", " log ", " solution:", "Edit: Just realized that this only works for a gap of 1.", " ", "O(n) time", "Code:", "Input:", "Output:", "javascript", "Using only arrays and ignoring the first line.", "Clojure, with some pretty ugly destructuring.", "Clojure", "Python 3", "gawk", "Bonus feature implemented by adding additional \"gap\" value on the first line of input.  Fun fact:  it doesn't matter what you put in for the first two values, so long as it doesn't go over system's maxint.", "needs O(n * log n) comparisons of sequence elements\nwhere n is the number of sequence elements", " with bonus", "Output:", "Wait, I don't understand.", "How do you derive 26 from the first example?", "EDIT: Never mind, figured it out!", "My solution in Python:", "\nI have not used the first input line, instead opted for a continuous input thread for lines of any length.", " Using a nested list comprehension:", "Should work with any gap, but I didn't test it.    ", "Result:", "Perl 5 - With no second argument, or a second argument of '1', match 55 with 54 or 56. With an arg of 2, match 55 with 53 or 57.", "Output", "Total: 26", "Total: 20", "Total: 15", "Total: 3", "Total: 6", "Total: 13", "Total: 31", "Total: 68", "Total: 67", "Total: 52", "Total: 107", "Total: 45", "Java - with bonus", "Output with gap = 3", " w/o bonus:", "C++17. With bonus. Takes advantage of the somewhat insane fact that two pointers into a contiguously allocated piece of memory count as comparable RandomAccessIterators. O(n", " ) time and no extra space, which seems okay since n is small.", "Java", "Python 3.6, I'm still learning so all feedback/help is appreciated", " with Bonus:", "Challenge Output: 31 68 67 52 107 45", "Outputs: 31 68 67 52 107 45", "I'm relatively inexperienced, so any suggestions to make it run better or faster are greatly appreciated!", "Haskell:", "In Kotlin:", "JavaScript with bonus:", "31 68 67 52 107 45", "Javascript with bonus (dx is gap size)", "I coded mine up in ", ".  The output I got was different than the example output.  I scratched my head for a few minutes, did one example in my head, and looked at some of the other folks' output and found that mine matched theirs.", "My output:", "Output:", "Javascript -- Probably a better way to load the initial array", "Challenge Output:\nEnter the size: 6 20", "Enter the numbers:76 74 45 48 13 75 16 14 79 58 78 82 46 89 81 88 27 64 21 63 37 35 88 57 55 29 96 11 25 42 24 81 82 58 15 2 3 41 43\n36 54 64 52 39 36 98 32 87 95 12 40 79 41 13 53 35 48 42 33 75 21 87 89 26 85 59 54 2 24 25 41 46 88 60 63 23 91 62 61 6 94 66 18 57\n58 54 93 53 19 16 55 22 51 8 67 20 17 56 21 59 6 19 45 46 7 70 36 2 56 47 33 75 94 50 34 35 73 72 39 5", "Enter gap:1", "31\n68\n67\n52\n107\n45", "Bonus Output:", "Enter the size: 6 20", "Enter the numbers:76 74 45 48 13 75 16 14 79 58 78 82 46 89 81 88 27 64 21 63 37 35 88 57 55 29 96 11 25 42 24 81 82 58 15 2 3 41 43\n36 54 64 52 39 36 98 32 87 95 12 40 79 41 13 53 35 48 42 33 75 21 87 89 26 85 59 54 2 24 25 41 46 88 60 63 23 91 62 61 6 94 66 18 57\n58 54 93 53 19 16 55 22 51 8 67 20 17 56 21 59 6 19 45 46 7 70 36 2 56 47 33 75 94 50 34 35 73 72 39 5", "Enter gap:3", "23\n9\n41\n45\n48\n49", "Written in C:", "When I first started this challenge I misunderstood the instructions initially and actually created a separate program that supplied input data, still came in handy for completing the challenge. When I input the sample data it gets everything right except for the second integer in the example output text, for me it shows up as 22 rather than 20. Not sure if that's an error on my part or if its a typo.", "C++ feedback welcome", "Output:\n31\n68\n67\n52\n107\n45", "VLA are not (standard) C++ even if some compilers allow it. So ", " and ", " are out.", "Also looks like it should be ", " to me", "Thanks! How should I change the arrays? Is my only option to use vectors or other data structures or is there a way to still do it with arrays?", "There is no way to ", " allocate like you're doing here. That leaves you with the ugly pointer to pointer solution.", "Which I don't know anyone that actually recommends because it is so very ugly and also means your 'array' will not be allocated in a continuous block of memory.", "Just go with a ", " solution.", "Alright thanks for the help!", "Here's mine without using enumerate.", "My C++ attempt at full challenge(bonus consecutive gap range)", "Feedback would be cool. ", "I compile with ", "Code:", "JavaScript :)", " ", " ", " ", "This is my second daily programmer challenge after discovering this sub and starting with the #355 Intermediate challenge. I thought I'd work my way backwards while waiting for a new challenge.", "My O(n) solution with bonus. I also added my own bonus of allowing duplicate numbers. ", "D with bonus\n(no input parsing)", "Python with numpy. Brand new - first ever challenge. Clearly there are smarter ways of doing this! Anyway, learned a lot", "If the solution code is stored in a file, ", ", and the challenge input is stored in ", ", run it like this: ", "The solution will be printed to ", ".", "Here is ", ":", "Rust with bonus - still new to the language and would appreciate some advice", "I'm still fiddling with Rust to learn it. Check my solution too.", "I like your map() to parse the i32s. I need to work out how to handle error propagation when using it though.", "I would prefer creating an immutable ", ".", "** Swift 4 **", "Output:", "Javascript", " one liner with bonus:", "Output:\n31\n68\n67\n52\n107\n45", "I was once told by a grizzled sysadmin that friends don't let friends awk, but every time I see a script like this i think he's making a huge mistake. ", "C# The comments are all moved to the top to show how logically simple the code is. Though, the simplicity may mean there is room for optimization. Output: 31 68 67 52 107 45", "Java. Nothing fancy but it worked out the challenge.", "clojure with bonus. Tried to be as efficient as possible rather than scan the full list each iteration so its probably a little longer than needed and the fact im a clojure noob.", "output", "\nI'm looking to improve my Python skills, so please tell me how I could improve the solution!", "Python 3 ", "Maps each value to the absolute value of the difference between the current index and the index of the number diff greater than itself, or 0 if there is no number diff greater than itself, and then finds the sum after the mapping.", " with bonus", "Method:", "Code:", "Java. Simple solution. Feedback welcome.", "My o(n) solution with bonus. Doesn't require or do any sorting. Doesn't support duplicate numbers like my C++ solution does, but I'm trying to learn python. Might give it a go later on.", "Would love some feedback", " | ", "Rust 1.21.0 with bonus", "Challenge output, gap 1", "Challenge output, gap 2", "Python 3.6.0 with bonus", "\nAny feedback appreciated.", "\u00a0", "\u00a0", "Challenge output: 31, 68, 67, 52, 107, 45", "Solution in Clojure. Comments welcome :)"]},
{"score": "78", "title": "[2017-10-16] Challenge #336 [Easy] Cannibal numbers", "content": [". There are no restrictions on how many numbers any given number can consume.   A number which has been consumed is ", ".  ", "Your task is to determine the number of numbers which can have a value equal to or greater than a specified value.  ", "You'll be given two integers, ", " and ", ", on the first line. ", " indicates how many values you'll be given, and ", " indicates the number of queries.  ", "Example:  ", "Based on the above description, 7 is number of values that you will be given.  2 is the number of queries.  ", "That means -", "\n* Query 1 - How many numbers can have the value of at least 10", "\n* Query 2 - How many numbers can have the value of at least 15", "Your program should calculate and show the number of numbers which are equal to or greater than the desired number.  For the sample input given, this will be - ", "For Query 1 - ", "The number 9 can consume the numbers 5 to raise its value to 10 ", "The number 8 can consume the numbers 1 and 3 to raise its value to 10.  ", "So including 21 and 10, we can get ", " numbers which have a value of at least 10.     ", "For Query 2 -  ", "The number 10 can consume the numbers 9,8,5,3, and 1 to raise its value to 15.  ", "So including 21, we can get ", " numbers which have a value of at least 15.  ", "This challenge was suggested by user ", ", many thanks! If you have a challenge idea, please share it in ", " and there's a good chance we'll use it", "Whaaaaa?", "Another good test sequence is", "The answer should be 4, because one 3 can eat a 2 instead of a 1. Some implementations assume always the smallest number can be eaten and get 3 for this example.", "Edit: Two 3s have to eat a 2 instead of a 1. I accidentally posted this twice because on mobile. I deleted the other post.", "This was actually a great example of an edge case here!", "how would you account for this? I'm currently using the \"only eat smaller numbers\" method. I can't see how a pattern would recognize for a 3 to eat a 2, and a 3 to eat a 1 - it seems inconsistent.", "I think you need a counter for how many numbers have been eaten before by higher numbers. Don't delete any numbers from the list though. When you reach a number (like 2) that appears several times and you realize that the number of available numbers (in this case 5) minus the number of numbers that have been eaten (3 by the 3s) minus the number of numbers that are equal (there are 2 other 2s) is 0, then you can go and say \"wait a minute, two of the other 2s could have been eaten by a higher number, because my counter says 3\". Does it make sense? To be honest, I haven't implemented it though.", "This challenge should have input that gives incorrect results if the reader does not account for numbers being consumed.", "EDIT:\nSee ", "'s input: ", "That's a good point. If 8 only consumes 1 and 3, that leaves 5 for the next cannibal.", "See my above edit.  Can you think of any input that triggers this?", "Input:", "So the output should be:", "If numbers are removed by consumption. 5 is already at the target. 4 can reach it or 3 can reach it, but not both at the same time.", "I believe the output should be 3 given the rules of the challenge.", "UPDATE: Ah actually I'm an idiot. Forget that. I can see it's 2 now.", "There we go, I knew I was missing a simple example.", "Should we be finding the most efficient method of consuming/removing digits to maximize the amount of numbers that cross the threshold", "Or just remove them linearly regardless of whether it's the best overall move? ", "You are trying to find the maximum possible number of cannibals", " following the exact in- and output description via stdin/stdout.", "Hey, really good solution.", "One thing I noticed at the end - instead of printing the results via", "you can just unpack the results:", "Ultimately insignificant, but a little easier.", "I like it, good feedback!", "I'll leave it as is since it's still useful to see how to create the string explicitly without relying on ", "'s specification. Yours is definitely more elegant, though.", "I'm not quite following the line:", "Specifically, where you use len(numbers).  I know its used to set the maximum cannibal chain size, but I don't know how its being invoked.", "The line is a tuple assignment that will give two variables two values. It's a shorter way of writing", "The ", " function will simply return the length of the ", " list, i.e. how many numbers are in there.", "Man, I think I need some sleep.  I was reading that as three statements, 'cannibals', 'available = 0', and 'len(numbers)'.", "That makes a lot more sense haha - thanks!", "What are your 4 combinations?", "2 is not greater than 5.\nYou aren't looking for the numbers remaining, you're looking for the numbers that are cannibals that can hit threshold.", "Hey, I'm brand new to programming. I don't really get the logic of this line?", "Max will return the largest number which will either be 0 or the result of query - n. Available -= max(0, query-n) is the same as available = available - max(0, query-n). Just shorter. ", "Thanks, I understand that though, I'm just not sure why you'd need tu subtract n from query?", "The logic used doesn't meet the requirements of the challenge.", "Using the test case:\n9 1\n3 3 3 2 2 2 1 1 1\n4", "While your code provides the correct answer of 4, it does rely upon a two cannibalizing a two, which it cannot do since predator must be greater than prey", "Your cannibals feast as such: (3, 1), (3, 1), (3, 1), (2, 2)\nThe correct feasting should be (3,2), (3,2), (3, 1), (2, 1, 1)", "Yes, I wrote the code based on the assumption that numbers are unique, see my question ", " which has yet to be answered.", "Fair enough.  My apologies.  I had not read all of the comments at the time of my posting.", "Can I assume that the given numbers (second line of input) are unique?", "Note that a number has to be larger than the other in order to eat it:", "So if you were given the numbers ", " and threshold 5, the answer would be 0.", "If we were given [4 4 4 3] , threshold 6, would the answer be 0 or 1? ", "4(3)->5, 5(4)->6", "I'd say the answer is 1.", "I was gonna ask the same thing. No duplicated number?", "The problem becomes more interesting -- see my reply just one above.", "C#", "The explanation has me a bit confused. Are the numbers considered non-scarce? That is, are two numbers allowed to consume the same smaller number within the same query? Glancing over a few of the solutions, it seems that most people interpret it that way, but your explanation suggests that they can't (for Query 1, 9 and 8 do not share any consumed numbers even though they could).", "See ", "\nInspired by ", " solution. Ran all the example input I could find in the thread, and made up a few of my own. I had no use for the first line of input (i & j). Feedback welcome!", "Edit: Fixed an issue where cannibals were eating numbers of the same size.", "Code:", "Input/Output:", "For the numbers ", " and query ", " the answer is 0 (because you need to be larger in order to eat another number.)", "Ah. Thanks for the heads up. I must've missed that in the instructions. Easy fix! ", "EDIT: I'm a little embarrassed about the brute-force approach here, but I'll leave it up. ", "'s solution is much cleaner.", "This is much longer when you have to fight over the scraps!  This version generates all partitions of your input, and finds the number of valid cannibals in that partition, looking for the maximum number of cannibals a partition can generate. Credits to the Combinatorics module by Dr. Phillip M. Feldman (who also credits David Eppstein), which I had to grab pieces of and translate to Python 3.", "Java", "Output", "This solution handles duplicated numbers, but does not assume numbers are scarce (i.e. it answers the question of how many numbers could possibly reach the target value, not how many numbers could do so ", ").", "Python 2, tips would be appreciated, I am still learning.", "EDIT: Tested multiple edge cases posted here in the comments and mine seems to handle them all correctly.", "Kotlin:", "Example:", "First time posting here so let me know if I've got anything messed up.", "I went for a solution that I think is guaranteed to find the maximum number of cannibals without doing a full brute force search of every possible move. It handles duplicate numbers and passes all the tricky tests I could find. It does NOT find every possible way to get the maximum. It also currently outputs it's work so you can see the process.", "My algorithm starts with the numbers sorted big to little. Each number is stored in a tuple of the original value and an array of numbers it has eaten. It's current value is the original number plus the length of the array of eaten numbers. A separate kibble array of numbers eliminated from cannibal candidacy is kept and initialized empty. These numbers are good for eating.", "Starting at the end of the list, the number is compared to the target. If it is smaller, it eats kibble till it hits the target, or runs out of kibble numbers. If it runs out, the last number in the list, and any it had previously eaten, are moved into the kibble array. If that was the number we were working on, we move to the next number, otherwise, try again to eat up to target.", "I believe your algorithm works. Have a look at ", " and see if you can spot any issues.", "OK here's a revised version. The eat function now always feeds the largest legal number from kibble to the cannibal. This solves the", "case that I found failed. (should be 2). It's a hack with more re-sorting and searching than I like and there's probably a more efficient way to do it, but it works.", "OK that's very helpful. Here's my new algorithm...", "You may have noticed that the first thing my previous solution does is determine the maximum number of numbers which can cross the threshold. Let's call this the \"break\" and denote it by a vertical line. Here are some examples:", "Note that if all of the numbers to the right of the break are strictly less than the numbers to the left of the break, you can achieve the maximum number of cannibals crossing the threshold.", "If the numbers adjacent to the break are equal (like in the first two cases) then you need to try to use of the smaller numbers to boost up the numbers to the left of the break which are equal.", "For example, in the first case above if we use one ", " to bump up the ", " on the LHS we'll get all ", "s on the LHS and all of those numbers will be able to reach the threshold. In the second case we can use the two ", "s to bump up the two ", "s to lift the LHS off of the break.", "The point is that numbers on the LHS which cannot be lifted off of the break are not going to reach the threshold, but all of the other numbers can.", "Really nice work on this!", "Java", "Simple solution, nothing elegant. Feedback welcome.", "Java feedback... use:", "to avoid the unchecked exception warning ( ", " )", "Also, check this test case: ", " with query 3. No numbers can eat another number so the answer is 0.", "Thank you very much for the feedback! My solution definitely didn't take into account that the number must be larger to be a cannibal.", "Probably one of the more complicated ways to solve it but here is python 2:", "I know that this solution is incomplete. That being said, it still gets the right answer.", "  ", " Back to the drawing board!  ", "We'll be using 10 as our query for this explanation.", "As far as I can tell, this algorithm accounts for cases where a number can steal a feeding from another number who needs it worse. The magic is all in the sorting, and also realizing that by removing the lowest element as you go along, you only decrease the number of feeding opportunities for numbers who need it the least.", "Nice to see a Factor solution. ", "I used to write a lot of Java (and low-key hating it) while searching around for \"that perfect language.\" I tried almost all of the popular ones and quite a few less popular ones. Haskell and Scheme came somewhat close to \"being the one\" to get me to switch from Java, but they didn't quite cut it for me.", "About a year ago, someone posted a bunch of Factor solutions in here and I fell in love at first sight. From that very moment, I never wrote another line of Java ever again.", "I came to Factor via Forth.  I don't find it an easy language though and now vacillate between them. ", "I'm always a fan of the super concise Python answers, so here's mine! This doesn't account for numbers no longer being available though, since at the time I didn't realize that mattered.", "output:\n    [4, 2]", "Just a few syntactic things:", "You can use Collection.count() instead of Collection.filter().size. Generally looks a little nicer and is more idiomatic.", "Also, ns[j] appears to just pull from the left side, as long as that is less than ns[i]. Did you consider using Collection.min() and Collection.remove() instead, such that you could potentially get a (more correct) answer? Just as an example, the input:", "fails with your solution as the answer should be 2 (5 is one, and 2 eats 1, and then can eat 2 and 1) while your solution gives 1.", "Thank you for your advice sir, i fixed it.", "Of course! It's all a learning experience, happy to help you out ", "Seems like you are allowing a number to be consumed by multiple other numbers. Note that numbers consumed are no longer available. See ", " which illustrates the point.", "Yes sir, my bad !", "If I understand correctly, this is an equivalent statement:", "Input.PowerSet()\n.Where(s => Sum(s) > Treshold)\n.Select(s => s.Max())\n.Distinct()", "Don't think this works. If the input is 8, 3 and the threshold is 10, then your query yields 1 row (for the subset {8,3}), but if 8 eats 3 it only rises to 9 which isn't >= 10.", "Thanks for pointing that out, I get the eating numbers part right :)", "Input.PowerSet().Where(s => s.Max() + s.Count() -1 > Treshold) .Select(s => s.Max()) .Distinct()", "Well - I don't think it's right still.", "For starters, it should be ", ".", "Also, consider ", " with threshold 5 (or 4 with ", "). Your query yields three rows -- one with a 5 as the max, one with a 4 as the max and one with a 3 as the max. The answer, however, is 2 as ", ".", "Ahh I see, \"no longer available\" meant for that whole query. Now I see why there was a whole page trying to explain the problem. Gotta go back to reading classes.", "Erlang:", "Doesn't handle actual IO but that's a small thing to add.", "EDIT: There's an error. Cannibals can't eat numbers the same size as them. So if you end up with ", " in the list, then you're done. My above solution simply consumes the minimum which means it will consume a peer. The change isn't too big, but I need to test the last value and make sure it's smaller. When it isn't, I should drop the head of the list.", "Change the last clause of ", " to:", "Excellent observation! There should be a test case for that, e.g. something like:", "The answer is 2 if the numbers are eaten in the right order.", "Hmmm... maybe this doesn't actually distinguish bad algorithms from good ones...", "Using ", " and a threshold of 5 is a better example.", " This solution assumes there are no duplicate numbers", " solution assuming scarce numbers", "First sorts the values in descending order and starts consuming from the first value lower than the query.", "Works on sample input and ", "'s input.", " Fixed to avoid a number consuming another of equal value.", "11", "Edit: It seems that I also didn't take into account that equal numbers can't eat each other. I will have to fix that.", "Edit 2: I fixed it by subtracting the count of the same number in the rest of the numbers from the number of remaining \"meals\" in the condition for consumption.", "Firstly, rather than use ", ", I think ", " looks nicer and clearer.", "Secondly, your solution for the duplicate numbers doesn't work. ", " with a query of 4 should be 1. ", " -> ", " -> ", "There is always a \"best move\" to take at each iteration. The next best candidate for becoming a cannibal of the size of the query is always the largest. The best candidate to eat is always the smallest cannibal.", "This leads to the following code:", "In the case of 3,3,3,2,2,2,1,1,1 with query = 4, the best moves are:", "Yeah, the idea kinda destroys itself when duplicate numbers arrive. Which I took as not appearing in the original question", "edit: there's something wrong with this! I might go in and take a look later", "Call with threshold on the left, numbers on the right", "I REALLY wished that 7 consumed 9 ", "But we have 9 8 7!", " loop magic", "Uh, it may not work if there are duplicate numbers: a number can eat a same sized number", " loop magic\nHere is a correct version that works with equally sized numbers", " should return 4.", "Yeah, I know, that's the same problem that araise in other implementations which eat always the lowest number", "Here it is a recursive function with memoization, need some refractoring but hey", "Seems like ", " returns 0. Even with lower thresholds it still returns 0 for those numbers.", "I'm running the code on ", "in eat-pairs i was return 0 instead of to-add which is the count of > limits, now it's correct thanks", "Seems to work for the inputs I tested.", "\n\u2022\n", "Feedback is welcome.", "This is my revised solution after discovering that ", "'s test case ", " should equal 4 but my previous solution was only finding 3. I know some people are pointing out that the challenge uses the word \"set\" to describe the input but I like to think of this as the ", ".", ": ", " has a good test case for ", " which should equal 0. I've made a fix to my cannibalisation and added this test to my list of results.", "1) First remove numbers from the sequence that have already reached the target (singles). This helps reduce the work for the next step.", "2) Calculate combinations of all remaining numbers", "3) Remove combinations that don't reach the target through cannibalisation", "4) Calculate combinations of combinations that form subsets of the remaining numbers (cannibals)", "5) The answer becomes the singles count plus the longest cannibals combination found", "Example Input // Output", "'s Input // Output", "'s Input // Output", "'s Input // Output", "'s Input // Output (slow to calculate)", "Python 3.6", "I can post the unit test if you are interested.", "[edit] Modified code to only cannibalize numbers less than the cannibal", "Here's a test case which probably should have been included in the challenge... numbers are 4, 4, 4, 4, 4, 4, 4  and the threshold is 5.", "Are there supposed to be 3 cannibals? ", "No one can eat each other because:", "I've made the necessary modifications.", " just found another very interesting test case!", "That is a good one that my program fails. I'll start working on getting it to pass.", "\nBrand new to programming, and would love some input! Trying to look at how everyone else is doing it better. ", "Couple of things...", "Hi, I'm new around here here's my ", " solution. Adjusted my initial solution after reading ", "'s post and ", "All inputs and comments appreciated!", "My algorithm works as follows:", "Given the list:", "And the target of 5", "There is a few extra conditions in step 2, I just chuck step 2 into a recursive function, I calculate the number of steps I need to step through in order to get to the desired number then I remove that number of elements from the tail end of the list.", "The exit condition from the recursive functions are:", "This should be able to deal with a variation of values and queries (hopefully!)", "Have a look at ", "'s ", "I did, their test case was the main reason I switched my algorithm to consume numbers off the tail end of the list. Also, added a check to guard against duplicate values as well. i.e. If the list is left with ", " and the target is greater than 1, then we should stop checking. ", "I ran your code with:", "and it printed ", ", but the answer is ", ".", " first time here, lookes like ", " did a better implementation of the same idea.", "Part of the spec is that you need to be larger in order to eat another number. So the answer for numbers = ", " and limit ", " is 0.", "yeah, I noticed that today, while doing something totally different.\nnut sure how I can fix that easily though ", "Just add four spaces at the beginning of each of your code lines and it will be formatted as code.", "I thought i did it...lol I'll fix", "Easiest way is to just CTRL + A in your editor, tab and then copy paste", "Javascript using recursion", "I ran your code with numbers ", " and query ", " and it returned 0.", "Does not handle an input with repeated values as the problem description mentions a ", " of numbers. ;)", "Accounted for several edgecases in the comments, including already ate numbers, duplicate numbers, overeating, etc.", "What about this test case:", "When I run your code it returns 0, but the answer is 1 (when 9 eats all of the other numbers.)", "Fixed by ", "Try numbers: ", " and query: 4. Answer should be 2 since 3 can eat 2 and then the other 2 can eat first 1 and then 2.", "Think this works but not positive. Can someone check for me? ", "   ", "Your logic works well for a lot of cases, but what about this:", "The answer should be 0. Note this part of the specification:", "Thanks! I think I made the necessary adjustment for that case. ", "Edit: Code updated to reflect the new algorithm discussed below.", "Thanks to ", " for the new test case and ideas.", "Output:", "Here is a simpler version of the revised code which only computes the count:", "In studying your code, I found a test case that both your and my solutions fail.", "The first 2 2's can eat a 1 each to become 3's. Then they can each eat a 2 to become 4's giving an answer of 2. But both our programs only give 1 because the 1st 2 eats both ones and the rest are stuck.", "I'm not sure how to solve that off the top of my head other than a brute force try of every possible combination of eating.", "Nice one! This is definitely not an easy problem!", "Ok - code has been updated with the new algorithm. Hopefully this finally does it.", ":", "Omitted my getInput() method cause it's nothing new or interesting.  I took the input in as int arrays, sorted the array of values, then iterated through them form largest to smallest.", "All consumed numbers started at smallest.  Tracked this with \"consumed\" variable, then just logically ignored those smallest values that have been consumed.  I figure this is the simplest way to track the consumed numbers.  My array is sorted in ascending order, so the logic looks more complicated than it really is.", "Try ", ", ", ". Answer should be 0 since you need to be larger in order eat another number.", "mmm good call I didn't account for that", "Python 3.6, works according to the problem description. ", "Edit: Works better now, but still cant handle all testcases (e g 3 3 3 2 2 2 1 1 1)", "Jokes on me, it doesn't", "I'm allowing individual numbers to be eaten serveral times, missed that part. Update incoming", "After thinking about this for a bit and the whole question of duplicate numbers, and how to pair up devourerers and devoured, it occurred to me that pairings are irrelevant.  It only complicated matters and makes for overly complicated code.", "All that matters in the end is that there are enough potential meals weaker than a particular cannibal to raise it to the required level.   Proper pairings only matter if the challenge's output requirements dictate.", "I did write a solution that provides proper pairings and deals with duplicate numbers, but this one is not it.", "\n    4\n    2", "Python 3, all feedback is appreciated.", "A test case to consider:", "(Once a number is eaten it can't be eaten by another number.)", "Hmm, I didn't know that once a number is eaten it cant be eaten by another number. Maybe ill update code later", "Why in the example of Query 1 does 9 not consume 8 as well, making the answer 5?\n9(5) 9(8) 9(1) 9(3) 10  = 5 pairings?", "We are not counting the number of pairings. We are counting the maximum number of survivors which can reach the threshold. If 9 ate 8 then 8 would not be a survivor anymore.", "So I am to understand that (1)survivor = cannibal in this case, (2) Cannibal numbers also cannot be used twice, i.e. the larger number also follows the \"A number which has been consumed is no longer available. \" caveat? Sorry, one last piece: Could you then take 9, consume (1) to form ten, and then take 8 and consume (3) and (5)? I am asking for possibility, not efficiency in this case. ", "First time trying out these challenges! Any feedback is appreciated.", "Check your algorithm on numbers ", " and query ", ". Answer should be 1.", "Also, this turned out to be a pretty tricky challenge. A greedy method mostly works, but note that the best answer for ", " and threshold 4 is 2 -- 3 eats a 2, then 2 first eats 1 and then 2.", "I coded my solution up in ", ".", "Here's the solution:\n    #include <stdlib.h>\n    #include <stdio.h>", "Note that in order to eat another number it must be larger, so the answer for ", " and threshold 4 is 0.", "Thanks for that.  I made a small tweak to account for this and I also removed a few debug printfs.  Note that my code will report 0, not 1 for:", "4 1", "4 4 4 3", "6", "The problem becomes a bit more interesting when returning the latter result.", "What's the official response on how it should handle this case?  1?", "It was bugging me all day so I fixed my code to handle the case I described above.", "Try getting a result of 2 for ", " with threshold 4. Note that the 3 should eat a 2; then the other 2 can eat the 1 and then a 2 to get to 4.", "Yep, my algorithm does not work for this case.  It looks like I underestimated this problem and naively assumed that the best choice was always greedy.  I haven't been able to come up with an algorithm that will guarantee maximum cannibals for all-cases aside from exhaustive search which I don't want to implement :-/", "Java. Noob grind solution. Works only for unique numbers. ", "This seems to be working for every sequence I throw at it, if there's a sequence that breaks it let me know. :)", "The answer for ", " and query = 3 is 0 because no number can eat another number:", "Ah I knew something was off. Perfect, simply added a check if the predator is larger than the prey. Updated the code.", "Try ", " with query 4. The answer should be 4 since a 2 can eat a 1 to get at ", " and then all of the threes can eat a smaller number to get to 4.", "This challenge is meant to be easy, so I took the monkeys and typewriters approach ", "A simplified solution:", "I like your clean solution to grab from the back of the left list when the front of the list is too low. I read from the front aiming for the highest number. Your solution made me think about it a bit more and made me realise that if you can grab from the front, then it doesn't really matter where you grab from.", "Yeah - in a situation like ", ", threshold 4 it ensures that a 2 only eats one 1 each.", "After determining the ", " and ", " lists you can compute the answer without \"simulating\" the eating by just counting the number of smallest elements in ", " and the number of largest elements in ", " and doing some arithmetic.", "FINALLY finished this one. Definitely challenged my Python knowledge, but coming up with the algorithm took some time, too. I think ", "'s solution is based on the same concept. This solution gets the correct answer for ", "'s edge case, ", "'s input, ", "'s edge case, and ", "'s modification to that case. ", "Explanation: ", "I noticed that the sets have a relationship where the sum of the differences between the threshold and the largest numbers smaller than it would reach an equilibrium with the quantity of numbers remaining. So, for the example input, we remove 21 and 10 automatically for two solutions and 5 remaining numbers. (10 - 9) + (10 -8) = 3, which is how many numbers remain if we remove 9 and 8, and we have 4 solutions at this point. ", "For [5, 4, 3, 2, 1], it goes (5-4) + (5-3) = 3, but at this point there are only two remaining numbers. So 3 can't be a solution, but 4 can be. ", "For [3, 3, 3, 2, 2, 2, 1, 1, 1], we get (4-3) + (4 - 3) + (4 -3) + (4 - 2) = 5 and 5 numbers remaining in the set. ", "For [4, 4, 4, 4], there are no numbers smaller than 4 and so no solution exists. ", "There is a weird interaction going on between the ", " loop and ", ". Try this test case: ", " and threshold 1.", "Also, a particularly tricky case is: ", " with threshold 4. Answer is just 2.", "Hmm, very interesting. That first case (code produces 3, for anyone reading later) I think is a matter of the code being poorly written. I dunno--that should just remove every item in the list and return 5.", "The second case completely breaks the algorithm. Back to the drawing board for that one.", "I suspect my algorithm only holds when ", " is greater than half the length of the original set, but that will take some testing to find out. ", "EDIT:", "Trying to think of the weakness here, I think the errant results are happening because the algorithm is only ", " the numbers less than the one being checked, but not removing them as it does so. Maybe adding a ", " will fix it?", "For the first issue, see ", "Actually keeping track of the numbers you are eating and the numbers remaining is a good idea. However, if you always eat the smallest available number you won't pass a test case like ", ", threshold = 4 where the best possible is 4 but always eating the smallest yields a result of 3.", "Still, coding up that algorithm is a good idea, because it is a stepping stone to another idea...", "Instead of eating the smallest possible number, try eating the largest possible which doesn't eat a threshold candidate.", "That is, a lot of solutions use a greedy method to determine which of the largest numbers could eat their way to the threshold assuming ideal conditions. The rest are always going to be fodder for these larger numbers.", "To verify that a threshold candidate number ", " can actually reach the threshold most algorithms have ", " eat the smallest possible number remaining - but this doesn't always give the right answer.", "Instead, have ", " eat from the fodder group the largest number it could possibly eat at the time, and then iterate while ", " is less than the threshold.", "That thread is a good read. A quote for others which explains why my code breaks on the ", " set. ", "I'll have to revisit the algorithm later today, for sure. I convinced myself it was finding solutions irrespective of the order of consumption, and thought that finding the correct answer for ", " proved this :p . ", "I'd really like some feedback. I'm a C/C++ programmer trying out python.", "Sorry, I didn't call your function correctly.", "However, here is another case: ", " returns 0 but the answer is 1.", "See the end of ", " for a more extensive list of test cases.", "I deliberately made it return 0 in that case.", "So a '2' can eat the '1', but not another '2', making the maximum 3. Therefore ", " should be 0, but ", " should be 1.", "I did have a bit more of a think about it and my solution does have a bug handling a corner case where the lower numbers should be eaten by the more selectively. It's late here though, so I'm going to call it a night and fix it tomorrow.", "Thanks for the feedback!", "Did I miss something?", "Once the 2 eats a 1 it becomes a 3, so then it can eat a 2.", "Oh, I didn't understand that part. Yeah, my solution is totally borked then. I'll redo it tomorrow", "This test case trips up a lot of algorithms: ", " with query 4. Answer is 4.", "Ok, my reworked solution. Thanks for ", " for pointing out my mistakes. It's not very pythonic and shows my c/c++ background, but I believe it is efficient.", "Now I can go peak at other peoples solutions.", "I used Java for this. I was also working on practicing clean code. So any feedback is much appreciated.", "SourceCode:", "Example Output:", "Shouldn't the answer for ", " and query 21 be 4?", "30, 25 and 25 are larger than 21 and then 19 can eat 14 and 12 to reach 21.", "You're right. I guess something is buggy in my calculateResults(); method. I'll go through and see what's causing it. Thank you", " This is my first time posting here and I'm little late to the party for this challenge but I'd still love some feedback. Been trying to practice my C so also decided to write a version of the quicksort algorithm within the file, so that can be ignored. Decided to be a little fancy and implement some recursion in the LeftoverHandler function but there is probably a better way to approach the problem.", "Solution that passes all of ", " excellent test cases."]},
{"score": "83", "title": "[2017-10-30] Challenge #338 [Easy] What day was it again?", "content": ["What day of the week did the Normans invade Britain on? ", "What day of the week did Jesus die on?", "What day of the week did MacDonald get founded on?", "Today we're gonna find out", "For todays challenge you are allowed to use your languages built in Calender functions/classes.", "But it's more interesting if you do the calculation yourself :)", "It's leap-year if the year is divisible by 4", "Ignore leap-year if the year is divisible by 100", "Ignore previous rule if the year is divisible by 400", "The input will be 3 integers as such:", "YEAR MONTH DATE", "Limits for the 3 integers:", "8000 > YEAR > 0", "13 > MONTH > 0", "32 > DATE > 0", "Sorry to anyone starting at 0.", "January is 1 and December is 12 ", "Assume all dates to be correct (i.e. no 31th of february)", "Input will look like:", "Output is simply the day of the week of the given date, for above it would be:", "If you have any challenges, please share it at ", "!", "And remember to upvote challenges you like :)", "I had no idea that Cobol was all lexically abstracted like that. ", "As I'm practising my list comprehension, here is a disgusting ", " one-ish-liner using Zeller's algorithm:", "Output:", "I'm using look-up tables in places where modulo operators might be better, but my head was already hurting.", "I don't know you, but I'm so proud of you for creating this monstrosity", " using my favorite day-of-the-week algorithm: ", ".", "What will you do with all the memory saved by using \"%sday\"?", ", besides an absolutely trivial reduction in storage, this does allow for a completely unimportant optimization on x86 that is sort of fun: an efficient use of the ", " (\"load effective address\") instruction. :-)", "x86 has some relatively fancy addressing modes. A memory address operand in an instruction can be composed of a ", ", an ", ", a ", ", and a ", ". In Intel syntax such an operand looks like this:", "The base and index are registers, displacement is a signed immediate (a constant hard-coded into the instruction), and the scale may be one of 1, 2, 4, or 8 (enforced by the instruction encoding). Suppose we have an array, ", ":", "Its address is stored in the ", " register, and the index we want to access (", ") is stored in ", ". Thanks to this addressing mode, we can increment the element at this index with a single instruction.", "Becomes:", "The 4 is because an ", " is 4 bytes since the i386. If it was a ", " (1 byte), ", " (2 bytes), or ", " (8 bytes, sometimes), this would all work equally as well since these would all be covered by the scale. A theoretical 6-byte integer would require additional instructions in order to increment since it has no matching scale.", "The ", " instruction is used to store an address in a register as if the instruction were going to access that address. No such access is actually made, but this does allow the architecture's addressing features to be used more generally. The compilers abuses this all the time to generate faster code. As an example of ", ", this instruction loads the ", " of this same element into ", ".", "Becomes:", "My code calls ", ", and part of setting up that call means computing the address of an element in ", ". Note that each element of ", " is 8 bytes, even though 7 would work fine. If ", " holds the address of ", ", and ", " holds the numeric day of the week, a single ", " is all that's needed to compute the address of the string to be passed to ", ".", "If I used the full name \"Wednesday\", each element would be at least 10 bytes. That address can't be computed with ", ", instead requiring a multiplication instruction.", "However, ", " will be slower than ", " since it has to \"interpret\" a format string. Even with skipping the multiply (which would be dwarfed by the time it takes to do I/O anyway) my \"day\"-less table is going to be slower.", "Alternatively I could have used an array of pointers, and ", ". This has the interesting consequence of introducing relocations.", "For a guy like me, your code is consistently found in \"write-only\" memory, ", " it does blow my mind.", "Man, this is just classic ", "; taking something seemingly trivial and turning it into a thorough and instructive explanation! Fantastic.", "I'm learning the basics of the language. Can someone explain lines 3-5: ", "Any help much appreciated, those lines are throwing me for a loop..", "I answered ", ". This could have just as easily been a 1 dimensional array of pointers:", "The rest of the code would be unchanged, including the initializer, and this would work just fine. However, this is a very different representation in memory, and, while the rest of the code is the same, the actual machine instructions (i.e. how the compiler implements this code) is also accordingly different because of the change of type (i.e. an ABI change rather than an API change).", "The 2D array packs everything together into a single table. The 1D array is a table of pointers into another string table elsewhere. This also has some additional consequences during linking and loading, but don't worry about that as a beginner.", "If all the strings are of similar length, I generally prefer the flat table version (2D array) when making this totally arbitrary decision. It typically uses less memory (no pointer storage), and it's nicer on cache. Since 1D pointer arrays can share strings, there ", " the possibility that it's the smaller and faster representation even when all the strings are of similar length. It all depends on the circumstances, and it usually doesn't matter.", "The answer is kind of complicated and ", ". The short version: You're right about 7. It would also work just fine and would even use a tiny bit less memory. On the other hand, computers are generally faster with objects that have a power-of-two size (alignment, etc.), or are rounded similarly. In many cases the compiler will even arrange to make things bigger than strictly necessary (structure alignment) in order to get this.", "Ok, great.  I was so confused,but not anymore. Thanks a lot for the detailed explanation!  Great article btw", "What a great formula, thanks for pointing me to it.  I like to understand how something works before I implement it so I took a look at the Wikipedia page to figure out exactly how it was derived.  The way it deals with the 29th day of February in possible leap years is subtle and genius.   ", "Mine's slightly different in style. I'd welcome feedback!", "It gives the same output as the parent comment. ", " ", ". Used built in time package like a mad lad. Had to make all years be 4 digits with leading zeroes in input or else I got errors with ", "Code:", "Output:", "C# 7.0 version using Zellers algorithm.", "Is ", " one of those fancy new ValueTuples? I think this is also the first time I've seen a static import in the wild.", "Yeah it is a ", " due to it being a value type it can't be modified within the loop so I have to make a copy of it. I can't say I use value tuples or static imports much outside of coding challenges or personal projects. I've attempted to use them at work but they aren't really looked nicely upon by my coworkers.", "Can you explain why it's not suitable for work and why \"they aren't really looked nicely\"? ", " using Zeller's Algorithm.", " by using the getDay() method. I feel like it's ", " so going to work on it without, probably with Zeller's Congruence. ", "Good use of the getDay() function. If you wanted, you could get rid of the switch by creating an array of day names, and then picking which one you want out of that array (you want the ", "th item).  ", "That greatly reduced the line count. Thanks!!", "Updated to use an array:", "Rust. Stole ", "'s algorithm for this, otherwise I'd probably have been using a date library, because math(s). :)", "Another version employing Chrono:", "My solution in ", ", also my first ", " submission. Any feedback will be appreciated.", "I will admit that I kinda looked at a lot of the top comments to use Zeller's algorithm as the solution, but I swear I didn't copy anyone's code lol.", "Brute-forcing from 1st of January 1, which happened to be a Monday.", "Cheating with ", "Output:", "My take on yours, utilising the padleft to get \"29\" recognised as a year.", "Gotta love PowerShell.", "Using Zeller's Algorithm and Python 3.", "C# DateTime", "You should replace 'day' with 'day of the week'.", "fixed", "In ", ".", "The dates to be parsed are passed as command line arguments. Since Myrddin's \"date.parsefmt\" does not parse single-digit days, I prefixed those with a '0'. Also Myrddin does not compute the weekday correctly. And still it is a very interesting language - feature-full, still simple and mostly elegant:", "Sample output for the first date:", " using Zeller's congruence - ", " inspired me!", "Saturday\nWednesday\nMonday", "I coded my solution up in ", " after being pointed to Zeller's congruence in the post by ", ".  I took some time to understand exactly how the formula works before I implemented it.  The way it handles February 29th in leap years is subtle, yet brilliant.  Good stuff.", "This is how I do it in my head so I figured I'd use the same technique for this challenge.", "C++ here and OOB. I did this using brute force. I did another Zeller's algorithm. I'm just not sure about using Zeller because it doesn't feel like a challenge. ", "Python3 using Zeller's algorithm.\nNote: There was a guy I met who told me he could determine the day of any given date quite quickly. I've always wondered how he did that until now. Didn't realize he did Zeller's algorithm in his head!", "He was probably using the ", " devised by the mathematician John Conway.", "\nLearning js, any feedback appreciated.  29.4.12 is an invalid date, but it's 2am! I'll figure it out tomorrow.", "Take a peak at my comment, I list two alternative ways on how to do, one by advice of ", "Output:  ", "Factor of course has a comprehensive library, including Zeller's algorithm which would make this a one-liner. But where's the fun in that? :) My algorithm works by converting the date to the total number of days that have passed since 1-1-1 and taking the modulus of that and 7.", "The bonus should be to correct for the ", " and ", ", and oh, what a bonus that would be...", "As the Gregorian calendar was not proposed until 1582 technically speaking, three of the challenge dates (years 29, 570 and 1066) should be interpreted using the Julian calendar. And since adoption of the Gregorian calendar was adopted in difference parts of the world at different times, the day of the week of one date (year 1776) depends on what part of the world you are talking about. After 1926 the Gregorian calendar was in use universally throughout the world.", "Here is an online app which illustrates the differences and some notable transitions:", "Enter a year before 1582 only shows the Julian calendar and after the transition year only the Gregorian calendar.", "Entering a year which is the selected transition year will show which dates which removed to perform the transition - e.g. for 1582 the dates October 5th - 14th are missing; for 1752: September 3rd through 13th; for 1918: February 1st through 13th.", "But it wasn't implemented everywhere simultaneously, so locale becomes a factor.", "I did mention that:", "Because at times both calendars were in effect in neighboring parts of the world it was customary to ", " dates - i.e. express them in both systems.", "Dual dating is the practice, in historical materials, to indicate some dates with what appears to be duplicate, or excessive digits, sometimes separated by a hyphen or a slash. This is also often referred to as double dating. The need for double dating arose from the transition from an older calendar to a newer one. For example, in \"10/21 February 1750/51\", the dual day of the month is due to the leap year correction of the Julian calendar by the Gregorian calendar, and the dual year is due to some countries beginning their numbered year on 1 January while others were still using another date.", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "   ", "\n", " ", " ", " ", " ", "playing around with racket algorithm: Zeller's.", "Java using Zeller's", "This is my first python program, I also used zeller's algorithm", "Erlang", "New to coding, Solution using Java:", "I think this needs some more testing. For example, it doesn't work for dates in 2016 like 2016-01-01 or 2016-03-01.", "Python 3.5, I hope the formatting's right.", "Once again I manage to write completely illegible Lisp code. It was kind of challenging to convert all that infix math to prefix notation", "Since the operations ", " appear so often perhaps it would be helpful to define:", "\u00a0", "Late to the party but I have a live ", "!", " with Zeller's algorithm.", "Still new to C# so i just made a very simple console application the easy way. Started by creating a method which calculated the leap year, but soon realised that i didn't need it. ", "Any feedback is very welcome. ", "Swift 4 using built in Calendar. Having an issue with two of them so if anyone have any idea.", "Results", "** Swift 4 ** Using Foundation's Date class.", "Output:", ", using ", "'s excellent ", "Using Zeller's congruence in ", ":", "Output:", "\nFirst time posting here! The algorithm is simple.", "In ", "Used Python as a refresher for the language (and Zeller's Congruence)", "Output:", ", using Sakamoto's method.", ". Let me preface this by saying that I've never really programmed before (and most of the \"easy\" challenges are way beyond me, to the point where I feel like an idiot for not understanding the actual challenge :'( ), having just recently picked it up, so this was a good challenge. Except that I failed. ", "This is what I have. It produces correct results for everything except the year 2100 entry. How can I fix that?", "First time Post", "Coming from a C++ background, I am embedded in OOP, definitely didn't need the class, so its not as short as possible, but am willing to take any input on how I can make it better. ", "I'm just learning classes in python so don't worry, I'm happy to read it :)", "Made in java, you have to input like: MM-DD-YYYY\n      if(m>2) {\n      m=m-2;\n    } //march has to be the first day of the mont so that february 29th would be the last day of the year\n    else {\n      m=m+10;\n    }"]},
{"score": "61", "title": "[2017-06-29] Challenge #321 [Intermediate] Affine Cipher Solver", "content": [". In short, Affine ciphers are encoded by the following formula for each character in the plaintext: ", " where ", " and ", " are constants, ", " is the ciphertext letter, and ", " is the plaintext letter. In this case, the letter \"a\" has the value of 0, \"b\" 1, and so on and so forth. If you want a hint as to how to decode:", "In order to rank your decodings in terms of accuracy, I recommend you use a dictionary of some sort (builtin, or the popular ", " -- note that enable1 lacks \"i\" and \"a\" as words). You can choose to not use a dictionary, but it will likely be harder.", "Here's a sample of encoding, done with simple numbers (", ") ", "First, we express our input numerically", "Then we multiply by ", "Optionally reduce to least positive residue", "Add ", "Now we change this to text again", "Input will be words separated by spaces or newlines. Input will be in uppercase if need be (i.e. if you can't figure out a way to handle mixed cases), but if not, it will be provided in regular text (e.g. ", "). Expect only alphabetical characters. With reference to my previous equation, ", " will ", " be a number coprime with 26. Hint:", "What your program thinks is the correct decoding, in lowercase if you only took uppercase input, else in the same case as you were given. You may give multiple outputs if there is a \"tie\" in your scoring, that is, if your program deemed two or more decodings to be correct.", " NLWC WC M NECN", " YEQ LKCV BDK XCGK EZ BDK UEXLVM QPLQGWSKMB", " Yeq lkcv bdk xcgk ez bdk uexlv'm qplqgwskmb.", " NH WRTEQ TFWRX TGY T YEZVXH GJNMGRXX STPGX NH XRGXR TX QWZJDW ZK WRNUZFB P WTY YEJGB ZE RNSQPRY XZNR YJUU ZSPTQR QZ QWR YETPGX ZGR NPGJQR STXQ TGY URQWR VTEYX WTY XJGB", " Nh wrteq tfwrx, tgy t yezvxh gjnmgrxx stpgx / Nh xrgxr, tx qwzjdw zk wrnuzfb p wty yejgb, / Ze rnsqpry xznr yjuu zsptqr qz qwr yetpgx / Zgr npgjqr stxq, tgy Urqwr-vteyx wty xjgb.", "Make your solver work for all forms of input, not just alphabetical and make your output match the input. I think it goes without saying that this challenge is for the English language, but if you want to, make this program for another language or compatible with English and another. If you want another challenge, optimize your code for run-time (I'd be interested to see submissions in this category).", "This challenge was submitted by ", ", many thanks! Have a good challenge idea? Consider submitting it to ", "For your example of \"foobar\", you say you're going to use 1-26 mapping, but then say a is 0.", "For the example, I'm getting that it should be", "foobar", "First, we express our input numerically", "6, 15, 15, 2, ", ", 18", "Then we multiply by a", "18, 45, 45, ", ", ", ", 54", "Optionally reduce to least positive residue", "18, 19, 19, ", ", ", ", 2", "Add b", "20, 21, 21, ", ", ", ", 4", "Now we change this to text again", "t", "d", "Did I mess something up?", ".", "Looks like it's a typo/messed up arithmetic based on the creator's response to one of the comments pointing that out. I guess it was never corrected. I hope the OP updates it.", " using an English letter histogram rather than a dictionary. Works\non all the test inputs, though it requires them to be capitalized.", "Not too relevant, but out of curiosity (and inspired by your approach) I wrote up a ", " to calculate the frequency of letters based off of ", " dictionary.", "Particularly relevant? No. Interesting? I thought so.", "The trouble with using a dictionary is that it's not representative of\nnatural sentences, which is what's being decoded in the challenge. It\njust captures the letter frequencies of individual words, losing the\nfrequencies of the words themselves. For example, in natural English,\n\"the\" appears far more frequently than the vast majority of other words,\nbut in a dictionary it only appears once. The letters T, H, and E will\nbe underrepresented from a straight dictionary analysis.", "So as input, you should use something closer to what you want to decode,\nwhich would be a big pile of prose. You could feed it some books from\n", " \u2014 though given the age\nof the material, this only covers older dialects of English, with (likely) a\nslightly different histogram \u2014 or ", ".", "I'll give that a go when I have the time, thank you. I've been fascinated with words recently :)", "Using the \"", "\" batch of reddit comments, I came out to the following figures: ", "I write another ", " to parse  each comment body into its own line of text as well as updating my ", " to be a bit more friendly on memory. (Loading a 12gb file straight into memory causes your system to choke, who knew?)", "These figures differ by the ones listed on the ", ". I believe this is because I did not remove parts of text that looked like URLs and I did not filter non-English subreddits. The difference of frequencies between Wikipedia's and mine are as follows", "Thanks for the tip, I found this fascinating.", "I find it interesting how much E went down between your results and the Wikipedia table.", "This is where that dictionary you used last time could come into play. You could drop the words that aren't listed in the dictionary, filtering out this sort of noise.", "I am relativity new to programming, and i had the basics of C, but i saw a few things which are pretty new for me. ", "does this automatically stop at the string stop sign ('\\0', right?). So would you also be able to use it like this:", "Non-static functions and variables have ", ". That's a\nfancy way to say they can be accessed from other, separately-compiled\nfiles (", "). The linker's job is to ", " all the places\nthese functions and variables are used to their definitions/storage.", "On the other hand, static functions and variables are only accessible\nfrom within the same file. If you don't use a static function, the\ncompiler is free to toss it out. If you only call it from a couple of\nplaces, it might fully inline the function rather than produce an\nactual, callable function. If you don't use a static variable, the\ncompiler doesn't need to allocate storage for it. When there's external\nlinkage, the compiler cannot do any of this because another translation\nunit might use the function/variable.", "The short of it: Use ", " by default and only remove it if you need\nexternal linkage.", "Caveat: There is something called ", " (LTO) where\nadditional information is put in the object file that allows the linker\nto recompile some parts of the program and make other late decisions. It\nsees the larger picture of the program as a whole and can make decisions\nthe compiler was unable to make just looking at a single translation\nunit. IMHO, you shouldn't rely on this and should use the language's\nfacilities to achieve these effects as much as possible, such as with\nliberal use of ", ". This is more for C++, where templates explode\ninto massive piles of code that simply require LTO to manage.", "Here's an example of this: SQLite is a large C application, and they\ndistribute an ", " of\ntheir source. Basically, their build system can concatenate all the C\nsources together in the right order into a single, massive C file. It's\nnot practical to develop SQLite like this, but compiling the entire\nthing as a single, massive translation unit enables optimizations\nthat would otherwise be impossible, even with LTO. The compiler can see\neverything at once and make more informed decisions.", "Yup, the ", " and ", " loops you showed are exactly the same. The\ncompiler probably produces the exact same code for both. The difference\nis just a matter of style. If I'm simply iterating across something, I\nlike to use a ", " loop to group the iteration terms together, making\nit obvious to the reader.", "Yup, exactly right. I was surprised it actually worked for the shortest\ntest. If the input is short enough, the correct decoding is completely\nambiguous \u2014 imagine it decodes to two different, valid sentences \u2014 and\nno specific algorithm can solve it.", "Thanks for the extensive explanation! I assume we will be getting information on this in future classes, since the optimization it provides (as far as I understand it ^ ^  ) is irrelevant in our current use.", "I am not the person you asked but,", " functions in C are used to restrict the scope of the function to the file level, i.e., if you ", " a file, then you cannot access the  ", " functions but can access all functions which are not defined as static.", "This is accessing the string/char array through a pointer. Accessing a character array, say ", " using ", " gives you the address of the first element and ", " gives you the value at that element. Then when you do ", ", you increment the Address using pointer arithmetic, so you now point to the next element. When you reach the last element, you point to NULL (", " is ", " which is ", " in ascii) which is ", " (in C, 0 is false, all non-zero is true) and hence you exit the loop. So yeah, you can use it in ", " as well. ", " is pretty good if you want to learn more about pointers.", "Alright, so declaring a function ", " can be compared to the ", " tag in Java?", "I understand pointers pretty well. I just did not realize that \\0 was 0 in ASCII. This is probably intended for this kind of use.", "Thanks for the clear explanation :D", "Sorry about that. I am visually impaired, so this occurred because of differences between the way in which my screen reader and reddit interpret python syntax. The actual code for my solution is posted ", ".", "Quite a simple solution, no bonus:", " Just realized I'm an idiot. The following is much faster of course: ", "in J, with b holding symbols of dictionary with a i added,", "finds all decodes that match dict,  no bonus, only lowercase.  testcase 3 has no matches.", "You need to add ", " too.", "Test case 2 bonus: ", " ", " ", "wasn't doing bonusesii", "Sorry, I misread.", "Sir, if this were back in the 90s, they would burn you at the stake.", "Simple brute-force solution; takes a while for the longer test cases. I'm interested to see how it might be optimized. Probably python version agnostic, but giving the version I used just in case.", "This is so much faster if you make word_list a set.", "Didn't realize sets had speed ups for checking if an item is inside of them, though that makes sense. Thanks!", "Haskell: (second input as example)", "output:", "  ", "I always love feedback as I am still very new to programming.  Thanks to ", " for the dictonary link", "Using highscore... Nicely done !! ", " with all the bonuses", "I've made a concurrent cracker that does brute forcing for each word in a separate goroutine. Hence the great performance. ", "An Haskell solution. It does all the examples. It replaces the punctuation symbols by spaces. The only optimization I used was storing the words of enable1.txt in a binary search tree.", "I'm late to this challenge, but I notice that most submissions use the provided list of multipliers, which is missing 9.", "Brute-force, but runs fairly quick ... 0.13 seconds total to do all four test cases on my PC ...", "Without bonus, using a brute force: ", "I used a 10,000 word dictionary - so, it does not correctly solve all cases. ", "I must not understand this challenge at all.  In Test Case 1, the first letter \"N\" is translated to a \"t\".  Yet, in Test Case 3 the first letter is also an \"N\" but is translated to an \"m\".  How does this happen, shouldn't a letter always translate the same?", "The test cases don't necessarily use the same the same constants between eachother.", "So 'a' and 'b' will change for each test case?  Is the point of the challenge to run all possible primes for 0-26 for 'a' and 'b' is always 2?   Then see which 'a' puts out the most actual words?", "That was my understanding, although I haven't attempted it yet. B should be variable as well though, between 0-25 (or 1-25 in the example). Im still pretty beginner at this though so I'm not 100% sure.", "Thanks for clearing this up for me.  I was able to get a solution once this clicked.", "It's a decryption problem. We have the ciphertext and we want the plaintext. To do that, we need to crack the secrets ", " and ", ". To do ", " we need to systematically search through the possible values and decide when the result looks enough like English.", "  Cleaned up the code and added bonus(respect case and doesnt ignore non Alphabetic characters)", "I've not included the file fileReader.js, you can find it ", "Ok, for once I'm going to post my results:", "The number beside each result line is the \"score\" for that line; I guess I just told it to print that for debug purposes, but it doesn't look like the program got anything wrong. /shrug", "Here's the main program code, in Rust. It depends on Rayon, OrderMap, and a library I just wrote called affine. What it does, I think, is it runs through all the options (brute force) in parallel. I suppose I could probably have done something to shrink the search space, but I don't know what. :) Probably the worst thing is that it actually allocates each plaintext it tries in full before saying, \"no, you know, this one probably isn't spelled right.\"", "Edit: ", " refers to a thin wrapper around ", " that lets me treat it as just a set. I could have just used the normal HashSet, but this is supposed to be faster. I guess if I'm being anal about speed, I could use a different hash function, too, but really those things are noise compared to the amount of time I waste with the algorithm here. :)", "Edit more: Using MetroHash seems to shave like five milliseconds off each run. :p", "Here's the code for ", ":", "Takes the filename of the wordlist as the first commandline argument. Implements the bonus.", " Narrowed imports.", " Remembered that ", " exists.", "Python 2.7. Happy to hear any thoughts/criticism.", "Output:", " ", "D, no bonus. Output matches the case of the input.", "+", " D", "Input:", "Edit : I forgot that compilebot needs enable1.txt to run this code. Here's the output :", "I went with a brute-force approach with some minor optimizations \n* ditching a potential candidate if any words aren't actual words", "I am also using a slightly modified version of ", " dictionary", "Yet another brute-force solution. It is very, very slow, but it is accurate regardless of string length and I'm not getting paid to optimize it, so nbd. It basically generates all possible permutations and checks each word against 'enable1.txt'.", " Optimized by loading the entire 'enable1.txt' into memory rather than reading it line by line, lol. Now it is much faster.", " added execution times from 'timeit' module", "C# ", "Based on code from:", "25 ms for all solutions", "83 lines in Rust; preserves both case and non-alphabetic/random Unicode characters.", "This is a solution in python 3.\nIt is a little slow for the longer test cases. However, it correctly handles upper and lowercase letters and punctuation and displays multiple solutions when that possibility exists.", "def decode_character(character,a,b):\n    if character in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\":\n        if character.isupper():\n            return chr((a", "(ord(character)-97)+b)%26+97)\n    else:\n        return character", "def decode_word(word,a,b):\n    result = \"\"\n    for char in word:\n        result += decode_character(char,a,b)\n    return result", "def strip_non_alphabetic(word):\n    result = \"\"\n    for char in word:\n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\":\n            result += char\n    return result", "def score_solution(solution,word_list):\n    solution_words = solution.split()\n    count = 0\n    for word in solution_words:\n        if strip_non_alphabetic(word).lower() in word_list:\n            count += 1\n    return (count,solution)", "def read_ciphertext():\n    result = \"\"\n    done = False\n    print(\"Enter some ciphertext. Enter a blank line when done:\")\n    while not done:\n        cur_line = input()\n        if cur_line == \"\":\n            done = True\n        else:\n            result += cur_line+\"\\n\"\n    return result\nenable = open(\"enable1.txt\",\"r\")\nword_list = enable.read().splitlines()\nenable.close()\nword_list += [\"a\",\"i\"]\nciphertext = read_ciphertext()\nsolutions = []\nfor a in range(26):\n    if (a%2 == 0) or (a%13 == 0):\n        continue\n    for b in range(26):\n        decoded_text = decode_word(ciphertext,a,b)\n        solutions.append(score_solution(decoded_text,word_list))\nsolutions.sort()\nsolutions.reverse()\nprint(\"The following are possible solutions for this ciphertext:\")\ni = 0\nhighest_score = solutions[0][0]\nwhile solutions[i][0] == highest_score:\n    print(solutions[i][1])\n    i = i+1", "Something went wrong :)", "I usually put the source here using this method:", "Select all(Ctrl +a) > tab(once or twice) > select all(Ctrl +a) > Copy then paste here"]}
]


